'''
Generates 3D lung surface mesh.
'''

from scaffoldmaker.annotation.annotationgroup import AnnotationGroup
from scaffoldmaker.annotation.lung_terms import get_lung_term
from scaffoldmaker.meshtypes.scaffold_base import Scaffold_base
from scaffoldmaker.utils.eft_utils import remapEftLocalNodes, remapEftNodeValueLabel, setEftScaleFactorIds
from scaffoldmaker.utils.eftfactory_tricubichermite import eftfactory_tricubichermite
from scaffoldmaker.utils.meshrefinement import MeshRefinement
from opencmiss.utils.zinc.field import findOrCreateFieldCoordinates, findOrCreateFieldGroup, \
    findOrCreateFieldNodeGroup, findOrCreateFieldStoredMeshLocation, findOrCreateFieldStoredString
from opencmiss.zinc.element import Element
from opencmiss.zinc.field import Field
from opencmiss.zinc.node import Node


class MeshType_3d_lung1(Scaffold_base):
    '''
    3D lung scaffold.
    '''

    @staticmethod
    def getName():
        return '3D Lung 1'

    @staticmethod
    def getParameterSetNames():
        return [
            'Default',
            'Human 1',
            'Mouse 1',
            'Rat 1']

    @classmethod
    def getDefaultOptions(cls, parameterSetName='Default'):
        options = {}
        if parameterSetName == 'Default':
            parameterSetName = 'Mouse 1'
        options['Base parameter set'] = parameterSetName
        options['Refine'] = False
        options['Refine number of elements'] = 4
        return options

    @staticmethod
    def getOrderedOptionNames():
        optionNames = [
            'Refine',
            'Refine number of elements'
            ]
        return optionNames

    @classmethod
    def checkOptions(cls, options):
        '''
        :return:  True if dependent options changed, otherwise False.
        '''
        dependentChanges = False
        for key in [
            'Refine number of elements']:
            if options[key] < 1:
                options[key] = 1
        return dependentChanges

    @classmethod
    def generateBaseMesh(cls, region, options):
        '''
        Generate the base tricubic Hermite mesh. See also generateMesh().
        :param region: Zinc region to define model in. Must be empty.
        :param options: Dict containing options. See getDefaultOptions().
        :return: annotationGroups
        '''
        parameterSetName = options['Base parameter set']
        isMouse = 'Mouse' in parameterSetName
        isHuman = 'Human' in parameterSetName
        isRat = 'Rat' in parameterSetName

        fm = region.getFieldmodule()
        coordinates = findOrCreateFieldCoordinates(fm)

        nodes = fm.findNodesetByFieldDomainType(Field.DOMAIN_TYPE_NODES)
        nodetemplate = nodes.createNodetemplate()
        nodetemplate.defineField(coordinates)
        nodetemplate.setValueNumberOfVersions(coordinates, -1, Node.VALUE_LABEL_VALUE, 1)
        nodetemplate.setValueNumberOfVersions(coordinates, -1, Node.VALUE_LABEL_D_DS1, 1)
        nodetemplate.setValueNumberOfVersions(coordinates, -1, Node.VALUE_LABEL_D_DS2, 1)
        nodetemplate.setValueNumberOfVersions(coordinates, -1, Node.VALUE_LABEL_D_DS3, 1)

        mesh = fm.findMeshByDimension(3)

        eftfactory = eftfactory_tricubichermite(mesh, None)
        eftRegular = eftfactory.createEftBasic()

        elementtemplateRegular = mesh.createElementtemplate()
        elementtemplateRegular.setElementShapeType(Element.SHAPE_TYPE_CUBE)
        elementtemplateRegular.defineField(coordinates, -1, eftRegular)

        elementtemplateCustom = mesh.createElementtemplate()
        elementtemplateCustom.setElementShapeType(Element.SHAPE_TYPE_CUBE)

        lungGroup = AnnotationGroup(region, get_lung_term("lung"))
        leftLungGroup = AnnotationGroup(region, get_lung_term("left lung"))
        annotationGroups = [leftLungGroup, lungGroup]

        lungMeshGroup = lungGroup.getMeshGroup(mesh)
        leftLungMeshGroup = leftLungGroup.getMeshGroup(mesh)
        rightLungGroup = AnnotationGroup(region, get_lung_term("right lung"))
        rightLungMeshGroup = rightLungGroup.getMeshGroup(mesh)
        annotationGroups.append(rightLungGroup)
        lowerRightLungGroup = AnnotationGroup(region, get_lung_term("lower lobe of right lung"))
        lowerRightLungMeshGroup = lowerRightLungGroup.getMeshGroup(mesh)
        annotationGroups.append(lowerRightLungGroup)
        upperRightLungGroup = AnnotationGroup(region, get_lung_term("upper lobe of right lung"))
        upperRightLungMeshGroup = upperRightLungGroup.getMeshGroup(mesh)
        annotationGroups.append(upperRightLungGroup)
        middleRightLungGroup = AnnotationGroup(region, get_lung_term("middle lobe of right lung"))
        middleRightLungMeshGroup = middleRightLungGroup.getMeshGroup(mesh)
        annotationGroups.append(middleRightLungGroup)

        if isHuman:
            lowerLeftLungGroup = AnnotationGroup(region, get_lung_term("lower lobe of left lung"))
            lowerLeftLungMeshGroup = lowerLeftLungGroup.getMeshGroup(mesh)
            annotationGroups.append(lowerLeftLungGroup)
            upperLeftLungGroup = AnnotationGroup(region, get_lung_term("upper lobe of left lung"))
            upperLeftLungMeshGroup = upperLeftLungGroup.getMeshGroup(mesh)
            annotationGroups.append(upperLeftLungGroup)
        elif isMouse or isRat:
            diaphragmaticLungGroup = AnnotationGroup(region, get_lung_term("right lung accessory lobe"))
            diaphragmaticLungMeshGroup = diaphragmaticLungGroup.getMeshGroup(mesh)
            annotationGroups.append(diaphragmaticLungGroup)


        # Annotation fiducial point
        markerGroup = findOrCreateFieldGroup(fm, "marker")
        markerName = findOrCreateFieldStoredString(fm, name="marker_name")
        markerLocation = findOrCreateFieldStoredMeshLocation(fm, mesh, name="marker_location")

        nodes = fm.findNodesetByFieldDomainType(Field.DOMAIN_TYPE_NODES)
        markerPoints = findOrCreateFieldNodeGroup(markerGroup, nodes).getNodesetGroup()
        markerTemplateInternal = nodes.createNodetemplate()
        markerTemplateInternal.defineField(markerName)
        markerTemplateInternal.defineField(markerLocation)

        cache = fm.createFieldcache()

        # common element field templates
        eftWedgeCollapseXi1_15 = eftfactory.createEftWedgeCollapseXi1Quadrant([1, 5])
        eftWedgeCollapseXi1_37 = eftfactory.createEftWedgeCollapseXi1Quadrant([3, 7])
        eftWedgeCollapseXi1_57 = eftfactory.createEftWedgeCollapseXi1Quadrant([5, 7])
        eftWedgeCollapseXi2_56 = eftfactory.createEftWedgeCollapseXi2Quadrant([5, 6])
        eftWedgeCollapseXi2_78 = eftfactory.createEftWedgeCollapseXi2Quadrant([7, 8])
        eftTetCollapseXi1Xi2_82 = eftfactory.createEftTetrahedronCollapseXi1Xi2Quadrant(8, 2)
        eftTetCollapseXi1Xi2_63 = eftfactory.createEftTetrahedronCollapseXi1Xi2Quadrant(6, 3)

        # common parameters in species
        generateParameters = False
        leftLung = 0
        rightLung = 1

        # The number of the elements in the generic lungs
        # These counts are only values that work for nodeFieldParameters (KEEP THEM FIXED)
        lElementsCount1 = 2
        lElementsCount2 = 4
        lElementsCount3 = 3

        uElementsCount1 = 2
        uElementsCount2 = 4
        uElementsCount3 = 4

        if isHuman:
            #valueLabels = [ Node.VALUE_LABEL_VALUE, Node.VALUE_LABEL_D_DS1, Node.VALUE_LABEL_D_DS2, Node.VALUE_LABEL_D_DS3 ]
            nodeFieldParameters = [
                (   1, [ [ 204.214, 217.387,-341.252], [ -62.947, -35.911,   0.688], [  25.814, -29.305,  29.820], [  -4.512,  17.903,  91.032] ] ),
                (   2, [ [ 269.306, 209.072,-354.889], [ -20.103,  -4.908,  79.411], [  47.047, -49.139,  -2.543], [   0.175,  15.720,  89.961] ] ),
                (   3, [ [ 223.341, 188.444,-308.232], [ -60.426, -24.274,  -1.081], [  20.503, -36.477,  21.902], [   3.351,  18.019,  52.584] ] ),
                (   4, [ [ 175.176, 162.285,-317.267], [ -27.384, -29.319, -26.704], [   9.020, -29.937,  61.149], [   2.480,  21.158,  82.660] ] ),
                (   5, [ [ 292.990, 153.587,-341.674], [ -10.831,  26.074,  66.575], [ -10.247, -58.090,  17.240], [  10.595,  29.035,  61.452] ] ),
                (   6, [ [ 241.787, 149.543,-291.578], [ -78.934, -21.344,  11.789], [  22.813, -35.233,  12.622], [  -6.632,  28.612,  43.054] ] ),
                (   7, [ [ 155.702, 126.322,-273.198], [ -89.521, -38.973,  20.606], [  16.492, -32.096,   4.354], [  14.895,  29.074,  37.867] ] ),
                (   8, [ [ 279.346,  98.455,-327.717], [ -21.666,  16.370,  35.485], [ -18.452, -43.354,   8.934], [  18.541,  53.843,  54.860] ] ),
                (   9, [ [ 251.887, 110.979,-294.259], [ -46.884,  -0.667,  13.029], [  -6.640, -34.923,  -9.542], [  -1.793,  34.831,  57.261] ] ),
                (  10, [ [ 203.263, 108.034,-281.647], [ -46.333, -22.115,  13.236], [  35.945, -18.664,  -6.836], [   5.249,  39.630,  30.209] ] ),
                (  11, [ [ 256.412,  71.152,-323.525], [ -14.537,  11.023,  15.628], [  -7.850, -10.251,  25.280], [  35.613,  35.978,  71.913] ] ),
                (  12, [ [ 243.935,  80.999,-302.872], [ -16.394,   8.598,  18.165], [  -8.074, -19.651,  -6.343], [  10.839,  34.046,  66.123] ] ),
                (  13, [ [ 226.628,  91.702,-285.892], [ -23.230,  -0.285,  15.358], [   7.839, -18.769, -11.448], [   6.974,  29.647,  42.160] ] ),
                (  14, [ [ 217.057, 233.615,-251.001], [ -56.387, -12.798,  -2.074], [   6.551, -32.468,   4.928], [   7.180,   7.996,  92.202] ] ),
                (  15, [ [ 267.567, 218.538,-268.608], [ -31.271, -28.559,  17.780], [  28.703, -41.920, -22.876], [  -2.499,   2.835,  82.368] ] ),
                (  16, [ [ 227.626, 202.773,-250.316], [ -46.421,  -9.158,  11.317], [   7.297, -31.033,   0.920], [  -0.016,   8.237,  63.668] ] ),
                (  17, [ [ 178.210, 194.840,-246.533], [ -50.393,  -5.414,  -8.376], [ -22.308, -44.954,  12.222], [   3.296,  11.647,  70.649] ] ),
                (  18, [ [ 296.250, 178.154,-283.773], [ -52.959,  -4.397,  27.035], [  10.998, -43.061,  -0.027], [  -2.037,   9.722,  56.957] ] ),
                (  19, [ [ 240.706, 174.731,-251.298], [ -65.503, -16.663,  18.653], [  12.413, -26.875,   3.862], [  -0.209,   7.605,  43.189] ] ),
                (  20, [ [ 170.036, 151.299,-240.510], [ -77.888, -18.667,   9.104], [  21.815, -36.197,   2.313], [  11.396,  18.147,  30.385] ] ),
                (  21, [ [ 297.502, 143.355,-275.679], [ -48.044,   9.944,  32.993], [  -5.929, -36.823,  16.652], [  -0.988,  42.077,  47.842] ] ),
                (  22, [ [ 250.978, 148.431,-247.195], [ -50.687,   1.846,   9.041], [   9.032, -28.662,   9.417], [  -4.776,  32.784,  41.932] ] ),
                (  23, [ [ 204.680, 141.636,-246.513], [ -35.493, -20.244,  16.094], [  31.013, -11.624,   3.008], [ -11.195,  25.677,  39.181] ] ),
                (  24, [ [ 287.464, 106.726,-251.655], [ -25.621,   6.219,  23.134], [ -19.294, -29.795,  27.926], [  17.692,  37.852,  69.883] ] ),
                (  25, [ [ 257.922, 116.607,-238.393], [ -31.830,   9.651,   4.808], [  -9.432, -33.031,   3.881], [ -10.300,  42.470,  62.047] ] ),
                (  26, [ [ 228.110, 129.472,-238.391], [ -30.191,   5.166,  -9.731], [  19.291, -27.684,   5.002], [ -37.186,  41.031,  47.384] ] ),
                (  27, [ [ 219.598, 234.911,-158.376], [ -59.865, -18.569, -15.474], [   6.365, -34.542, -21.886], [  -2.376,  -5.948,  82.683] ] ),
                (  28, [ [ 271.479, 212.598,-191.075], [ -45.292, -11.794,   7.859], [  30.495, -31.862, -46.294], [   1.874, -12.175,  77.537] ] ),
                (  29, [ [ 226.886, 201.943,-182.154], [ -46.036,  -0.006,   5.281], [   5.759, -30.320, -27.476], [   4.237, -12.188,  64.641] ] ),
                (  30, [ [ 176.812, 202.108,-180.833], [ -45.198,  -1.262,   0.548], [  -3.376, -48.006, -27.616], [  -1.725,  -4.852,  66.277] ] ),
                (  31, [ [ 291.428, 178.268,-232.360], [ -43.644, -20.853,  24.989], [   9.889, -35.193, -43.486], [   4.353, -16.910,  50.697] ] ),
                (  32, [ [ 237.268, 175.712,-212.165], [ -56.954, -16.756,  10.424], [  13.032, -26.067, -32.916], [   0.506, -11.344,  40.699] ] ),
                (  33, [ [ 175.732, 160.132,-211.466], [ -60.962, -16.488,  -9.264], [  19.400, -26.292, -38.189], [   2.855,   9.850,  36.322] ] ),
                (  34, [ [ 219.695, 225.898, -85.992], [ -73.383,  -7.270,   0.075], [   9.466, -34.972, -20.253], [  -0.443, -16.457,  58.378] ] ),
                (  35, [ [ 276.870, 199.241,-113.455], [ -50.589,  -4.004,   2.780], [  27.986, -43.217, -64.463], [  -2.551, -14.345,  71.169] ] ),
                (  36, [ [ 228.512, 190.564,-119.932], [ -48.632,  -2.241,   2.901], [  10.553, -37.072, -44.027], [  -7.211, -10.078,  60.219] ] ),
                (  37, [ [ 177.143, 186.587,-116.041], [ -45.024, -10.633,   6.490], [  36.691, -40.359, -41.741], [  -7.404, -14.171,  56.958] ] ),
                (  38, [ [ 294.618, 150.473,-187.485], [ -61.912,   3.854,  13.211], [  -7.435, -61.052,  31.811], [   4.313,  46.520,  70.475] ] ),
                (  39, [ [ 237.513, 155.974,-176.526], [ -52.879,   5.296,   5.774], [  -7.421, -52.768,   1.120], [  -9.440,  39.508,  59.010] ] ),
                (  40, [ [ 185.657, 157.799,-171.994], [ -42.801,   6.979,   3.264], [  17.078, -26.547,   0.836], [  -6.732,  20.365,  70.432] ] ),
                (  41, [ [ 246.491,  63.880,-307.113], [  -7.559,   4.781,   7.258], [ -10.994,  -7.365,  11.231], [  30.221,  28.933,  71.221] ] ),
                (  42, [ [ 239.325,  70.695,-300.571], [  -8.415,   6.741,   6.479], [  -7.094,  -9.314,   3.351], [  10.779,  13.380,  72.272] ] ),
                (  43, [ [ 231.513,  77.178,-292.656], [ -12.525,   4.255,   3.319], [  -0.928, -16.243,  -4.197], [  11.706,  13.532,  59.617] ] ),
                (  44, [ [ 230.978,  62.444,-297.245], [  -9.805,   9.975,   8.601], [  -8.962,  -8.354,   1.170], [  -5.556,   2.237,  55.703] ] ),
                (  45, [ [ 258.329,  78.766,-234.210], [  -8.603,   4.498,   0.874], [ -37.867, -20.422,   2.056], [   3.424,   4.618,  67.449] ] ),
                (  46, [ [ 248.799,  84.344,-233.104], [ -10.725,   6.321,   0.445], [ -24.858, -21.841,  -4.453], [ -12.855,  -3.519,  64.769] ] ),
                (  47, [ [ 238.275,  93.157,-232.136], [ -12.861,   7.971,  -1.034], [  -9.789, -33.602, -12.451], [  -9.411,  14.946,  61.906] ] ),
                (  48, [ [ 223.573,  66.187,-240.080], [ -17.027,  20.665,  -0.831], [ -28.759,  -7.073,  -9.354], [ -34.523,   0.750,  50.708] ] ),
                (  49, [ [ 254.223,  82.226,-174.237], [ -21.821,  14.346,  -0.313], [ -70.819, -36.828,  -4.473], [  -6.474,   1.765,  58.654] ] ),
                (  50, [ [ 232.669,  96.602,-174.812], [ -20.714,  13.936,   0.272], [ -45.067, -35.411,  -8.030], [ -18.872,  10.884,  54.020] ] ),
                (  51, [ [ 211.888, 109.358,-175.186], [ -20.256,  12.504,   0.821], [ -16.313, -50.413, -13.321], [ -35.462,  14.924,  45.481] ] ),
                (  52, [ [ 187.821,  69.713,-187.140], [ -17.219,  27.275,   2.313], [ -45.037, -16.749, -14.126], [ -30.897,   6.798,  50.061] ] ),
                (  53, [ [ 213.425, 207.382, -42.148], [ -56.500,   0.342,  -5.827], [   6.048, -18.275, -16.938], [  -5.756, -22.958,  37.324] ] ),
                (  54, [ [ 258.130, 182.777, -53.571], [ -32.759,  -3.828,  -5.952], [  46.842, -36.257, -14.249], [ -42.970, -18.327,  45.780] ] ),
                (  55, [ [ 221.272, 179.757, -61.791], [ -41.743,  -3.435,  -5.875], [  10.486, -36.897, -21.690], [  -5.754, -11.017,  49.078] ] ),
                (  56, [ [ 175.167, 176.300, -67.698], [ -50.920,  -3.892,   0.663], [  -2.971, -33.698, -41.085], [  -2.018, -13.036,  51.511] ] ),
                (  57, [ [ 270.017, 129.272, -88.096], [ -48.699,  18.376,  -7.516], [ -17.418, -51.841, -36.718], [ -50.518, -29.109,  80.611] ] ),
                (  58, [ [ 224.626, 141.720, -98.406], [ -43.872,   3.149,  -4.298], [  -5.587, -42.256, -31.773], [   2.711, -18.020,  68.031] ] ),
                (  59, [ [ 185.274, 147.077,-102.145], [ -35.411,  -3.106,  -4.228], [  15.191, -29.940, -31.756], [ -14.714,  -1.454,  64.340] ] ),
                (  60, [ [ 236.417,  87.160,-119.825], [ -26.717,  14.046,  -6.516], [ -56.297, -42.646, -20.424], [ -33.135,   2.045,  67.489] ] ),
                (  61, [ [ 209.605, 101.124,-126.121], [ -27.728,  12.727,  -4.885], [ -42.756, -25.066, -21.644], [ -36.638,   1.272,  45.800] ] ),
                (  62, [ [ 181.792, 113.536,-131.292], [ -27.851,  13.168,  -2.607], [  -7.595, -34.516,  -8.836], [ -30.082,  -2.456,  33.978] ] ),
                (  63, [ [ 161.721,  78.671,-141.179], [ -21.726,  42.029, -15.240], [ -51.129, -20.611, -10.957], [  -8.563,  21.673,  52.565] ] ),
                (  64, [ [ 203.028, 174.619, -25.286], [ -60.155,  -2.415,  -3.955], [ -17.934, -44.396,   2.254], [  -5.864,   0.361,  32.179] ] ),
                (  65, [ [ 189.729, 132.313, -57.386], [ -66.731,  15.839, -24.611], [  -7.400, -14.578, -13.799], [ -31.717,   2.116,  31.478] ] ),
                (  66, [ [ 162.058, 109.623, -84.659], [ -29.742,  25.246, -50.572], [ -39.636, -28.589, -27.407], [ -49.298,   7.984,  46.787] ] ),
                (  67, [ [ 112.805, 220.636,-344.408], [ -57.668,  31.639, -21.158], [ -27.490,  -7.728,  31.544], [  -7.261,  25.118,  94.160] ] ),
                (  68, [ [ 138.804, 176.487,-317.842], [ -42.283,  17.815,  25.150], [  35.114, -29.696,  45.703], [ -14.588,  30.925,  88.491] ] ),
                (  69, [ [  91.579, 200.374,-316.049], [ -54.312,  26.071, -18.610], [ -21.624, -23.063,  24.318], [   4.200,  -7.127,  69.610] ] ),
                (  70, [ [  45.375, 218.344,-353.416], [ -33.266,   4.881, -54.504], [ -61.732, -41.224,   6.887], [   0.041,  11.357,  87.726] ] ),
                (  71, [ [ 157.132, 141.529,-272.796], [ -81.449,  61.031, -11.075], [ -12.618, -42.064,  37.035], [  -3.164,  13.541,  40.904] ] ),
                (  72, [ [  74.446, 172.925,-295.847], [ -76.526,   2.015, -34.054], [ -12.428, -38.556,  16.527], [   4.041,  -7.852,  55.914] ] ),
                (  73, [ [  19.591, 150.815,-334.755], [  -3.346, -58.150, -34.776], [  -2.241, -66.932,  16.771], [ -37.214,  32.111,  65.155] ] ),
                (  74, [ [ 110.041, 132.222,-267.112], [ -38.045,  -0.257,   4.674], [ -17.685, -35.955,   7.777], [  13.262,   5.765,  25.693] ] ),
                (  75, [ [  69.151, 126.208,-283.827], [ -43.252, -15.831, -25.640], [   5.343, -46.939,   6.574], [  -2.573,   8.979,  43.158] ] ),
                (  76, [ [  36.295,  94.586,-323.318], [ -23.915, -46.011, -46.866], [  28.030, -41.990,  18.732], [ -35.404,  53.450,  65.721] ] ),
                (  77, [ [ 102.468,  96.616,-272.124], [ -19.736, -13.518,  -6.858], [   7.724, -16.668,   0.398], [   8.984,  23.773,  34.657] ] ),
                (  78, [ [  83.599,  83.999,-282.740], [ -14.132, -14.812, -15.431], [  32.211, -10.811,   2.136], [ -23.147,  18.638,  18.839] ] ),
                (  79, [ [  67.542,  71.106,-298.778], [ -14.808, -11.987, -18.636], [  32.574, -12.596,  14.591], [ -50.592,  24.213,  13.600] ] ),
                (  80, [ [ 109.300, 234.171,-248.531], [ -52.302,  25.979, -18.010], [ -19.303, -36.966,   0.740], [  -4.582,   1.836,  96.421] ] ),
                (  81, [ [ 135.331, 190.757,-238.135], [ -39.821,   0.430,  -4.178], [  22.077, -42.173,   7.556], [  -3.889,   9.995,  73.763] ] ),
                (  82, [ [  91.699, 199.576,-247.800], [ -46.192,  17.407, -15.151], [ -16.031, -32.155,   0.697], [  -3.291,   2.421,  66.468] ] ),
                (  83, [ [  46.055, 227.254,-268.328], [ -44.924,  35.895, -26.293], [ -53.545, -36.498, -12.333], [   1.708,   5.118,  82.513] ] ),
                (  84, [ [ 152.423, 152.232,-233.455], [ -80.326,  24.447,  -7.950], [  -7.571, -34.911,  -1.433], [  -4.926,  12.512,  36.525] ] ),
                (  85, [ [  77.265, 169.881,-247.131], [ -69.352,  10.546, -19.469], [ -10.609, -28.577,   2.252], [   1.874,   0.636,  41.232] ] ),
                (  86, [ [  14.896, 174.390,-270.710], [ -54.454,  -2.347, -27.972], [ -12.870, -45.688,   3.505], [  -0.893,  15.664,  55.197] ] ),
                (  87, [ [ 128.461, 142.532,-236.966], [ -58.190,   0.601,   0.855], [ -23.184, -13.581,  -4.697], [  19.504,  21.536,  33.741] ] ),
                (  88, [ [  70.179, 142.990,-243.592], [ -57.694,   0.305, -14.313], [  -4.787, -27.614,   2.693], [   4.708,  24.314,  36.010] ] ),
                (  89, [ [  14.153, 142.929,-264.777], [ -53.191,  -0.026, -29.220], [   3.625, -31.174,   8.060], [   4.661,  44.056,  51.260] ] ),
                (  90, [ [ 112.858, 122.968,-231.669], [ -45.051, -10.899,  -8.599], [ -10.735, -28.480,   2.607], [  14.630,  28.758,  45.554] ] ),
                (  91, [ [  67.804, 115.230,-241.806], [ -44.888,  -4.537, -11.644], [   7.971, -30.404,   4.318], [  -6.116,  42.327,  60.537] ] ),
                (  92, [ [  23.424, 113.892,-254.850], [ -43.703,   1.854, -14.388], [  21.699, -35.829,  12.761], [ -29.770,  57.684,  72.277] ] ),
                (  93, [ [ 104.207, 234.698,-152.733], [ -57.745,  26.895,  -7.074], [ -25.137, -25.018, -30.805], [   0.558,  -2.469,  77.755] ] ),
                (  94, [ [ 135.749, 192.199,-173.993], [ -57.597,   9.559, -12.340], [  21.057, -36.953, -26.041], [   2.245,  -7.457,  61.353] ] ),
                (  95, [ [  84.928, 206.459,-183.823], [ -43.517,  18.872,  -7.207], [ -13.067, -31.107, -30.940], [   0.766,  -1.586,  66.478] ] ),
                (  96, [ [  49.256, 228.018,-188.624], [ -27.295,  23.783,  -2.350], [ -46.031, -28.715, -40.634], [   2.797,  -2.517,  77.864] ] ),
                (  97, [ [ 146.834, 163.963,-199.827], [ -73.680,   9.289, -14.410], [  -1.766, -30.206, -31.659], [ -15.120,   1.557,  27.005] ] ),
                (  98, [ [  78.264, 173.394,-213.785], [ -63.451,   9.570, -13.504], [  -7.411, -31.806, -29.975], [   1.456,  -1.298,  43.628] ] ),
                (  99, [ [  19.915, 182.976,-226.748], [ -53.236,   9.593, -12.420], [ -16.164, -43.819, -39.572], [   3.936,   4.415,  60.578] ] ),
                ( 100, [ [ 108.125, 230.310, -93.528], [ -60.591,  28.132,   1.067], [ -13.931, -33.044, -12.007], [   4.596, -12.946,  57.694] ] ),
                ( 101, [ [ 141.968, 177.527,-116.980], [ -50.186,  17.132,  -3.637], [  13.607, -45.829, -52.443], [   9.726, -10.010,  55.555] ] ),
                ( 102, [ [  93.588, 196.028,-117.204], [ -45.032,  22.969,   1.979], [ -14.635, -34.317, -34.909], [   8.867, -14.370,  62.135] ] ),
                ( 103, [ [  51.988, 222.000,-112.818], [ -38.646,  27.605,   7.146], [ -48.820, -28.128, -36.207], [   1.902,  -5.868,  69.749] ] ),
                ( 104, [ [ 133.055, 155.147,-183.014], [ -50.398,   9.084,  23.516], [  -9.198, -33.156,  20.315], [  12.146,  20.340,  62.470] ] ),
                ( 105, [ [  80.120, 164.701,-163.613], [ -55.883,  12.515,  11.024], [   5.477, -51.428,  35.601], [  13.858,  40.686,  62.263] ] ),
                ( 106, [ [  22.839, 178.915,-159.278], [ -58.296,  15.237,  -1.951], [ -15.341, -83.376,  10.208], [  25.833,  57.492,  69.483] ] ),
                ( 107, [ [ 113.145,  88.046,-272.215], [  -9.350,  -8.812,  -7.836], [  13.248,  -7.657,  -1.039], [  -0.655,   3.227,  25.179] ] ),
                ( 108, [ [ 104.281,  79.019,-281.413], [  -8.550,  -9.748,  -9.808], [  22.001,   2.416,   6.648], [ -24.411,   8.417,  37.367] ] ),
                ( 109, [ [  94.545,  69.272,-290.944], [  -5.290, -12.555, -10.931], [  29.050,   6.005,  16.206], [ -30.419,   6.714,  45.052] ] ),
                ( 110, [ [ 126.005,  78.321,-270.120], [  -1.523,  -8.676,  -5.124], [  23.157,  -2.063,  11.752], [  14.097, -10.214,  23.163] ] ),
                ( 111, [ [ 110.779,  90.715,-234.929], [ -20.626,  -3.554,   0.196], [  25.282, -19.816,  -8.626], [  -7.947,   4.073,  48.804] ] ),
                ( 112, [ [  87.111,  87.499,-235.179], [ -25.846,  -6.325,  -4.452], [  34.640, -25.610,   1.322], [ -10.371,   9.996,  53.349] ] ),
                ( 113, [ [  60.277,  76.353,-242.362], [ -29.944,  -9.378, -10.303], [  59.866, -22.816,  11.218], [ -24.802,  14.723,  58.770] ] ),
                ( 114, [ [ 134.247,  72.870,-242.126], [  -0.240, -10.729,   1.399], [  58.738,   2.608,   2.449], [   2.955,  -0.060,  31.056] ] ),
                ( 115, [ [ 120.546, 104.051,-176.461], [ -29.942,  -7.987,   0.166], [   1.555, -50.037, -14.328], [  26.018,   2.579,  44.916] ] ),
                ( 116, [ [  86.014,  97.683,-176.263], [ -39.074,  -4.278,   0.229], [  32.793, -54.376, -24.428], [  11.840,   5.546,  52.991] ] ),
                ( 117, [ [  42.944,  92.427,-176.508], [ -47.600,   1.553,   0.293], [  65.220, -66.919, -26.935], [   7.926,   7.876,  68.237] ] ),
                ( 118, [ [ 131.420,  72.412,-210.024], [  -0.226, -19.168,   1.863], [  53.830,  -1.229, -27.395], [  -0.892,  -2.235,  47.338] ] ),
                ( 119, [ [ 113.261, 209.394, -39.187], [ -58.015,  16.946,   3.696], [  -7.484, -28.183, -16.526], [   8.287, -32.069,  37.482] ] ),
                ( 120, [ [ 153.826, 168.085, -64.529], [ -56.165,  -3.576,   3.482], [   4.306, -46.196, -41.906], [ -10.396,  -1.517,  54.580] ] ),
                ( 121, [ [ 102.498, 178.383, -60.042], [ -46.388,  16.516,   4.961], [ -14.042, -33.069, -26.005], [  16.284, -10.358,  47.201] ] ),
                ( 122, [ [  64.189, 202.493, -54.339], [ -28.979,  30.763,   5.289], [ -43.499, -29.808, -24.779], [  33.688, -24.925,  55.097] ] ),
                ( 123, [ [ 123.540, 138.168,-101.485], [ -34.841,  -0.986,   9.056], [  -6.374, -36.724, -42.407], [  -7.235, -12.421,  65.846] ] ),
                ( 124, [ [  85.021, 144.013, -90.695], [ -43.409,   7.248,   9.410], [  -0.486, -43.000, -39.187], [  23.904, -17.493,  55.956] ] ),
                ( 125, [ [  37.909, 155.369, -80.880], [ -50.463,  16.948,   9.056], [   0.425, -61.681, -36.664], [  34.615, -21.375,  78.761] ] ),
                ( 126, [ [ 141.972, 106.508,-140.392], [ -33.103,  -6.698,   5.569], [  24.138, -37.596, -25.097], [  17.276,  -3.374,  47.967] ] ),
                ( 127, [ [ 107.369,  98.979,-132.633], [ -36.268,  -6.344,  10.645], [  42.344, -39.637, -37.346], [  30.705,   0.158,  44.660] ] ),
                ( 128, [ [  70.498,  93.229,-117.454], [ -37.708,  -2.027,  19.331], [  68.482, -57.114, -32.013], [  58.629, -15.041,  46.951] ] ),
                ( 129, [ [ 163.749,  72.265,-157.014], [  -9.560, -38.172,  14.941], [  64.175, -23.344,   7.170], [ -12.951,  22.136,  66.011] ] ),
                ( 130, [ [ 121.257, 174.979, -23.486], [ -61.541,  10.197,  19.011], [  -3.863, -47.244,  -6.568], [  14.695,  -1.216,  28.119] ] ),
                ( 131, [ [ 117.057, 132.479, -55.764], [ -61.489,   4.844,  37.672], [  11.585, -39.956, -35.077], [  34.195,  -6.085,  11.996] ] ),
                ( 132, [ [ 146.435, 101.417, -88.480], [ -12.117, -28.636,  11.354], [  25.548, -28.865, -55.831], [  50.980,  -2.219,  39.663] ] )
                ]

            # Create nodes
            nodeIndex = 0
            nodeIdentifier = 1
            lowerLeftNodeIds = []
            upperLeftNodeIds = []
            lowerRightNodeIds = []
            upperRightNodeIds = []

            # Left lung nodes
            nodeIndex, nodeIdentifier = getLungNodes(leftLung, cache, coordinates, generateParameters,
                nodes, nodetemplate, nodeFieldParameters,
                lElementsCount1, lElementsCount2, lElementsCount3,
                uElementsCount1, uElementsCount2, uElementsCount3,
                lowerLeftNodeIds, upperLeftNodeIds, nodeIndex, nodeIdentifier)

            # Right lung nodes
            getLungNodes(rightLung, cache, coordinates, generateParameters,
                nodes, nodetemplate, nodeFieldParameters,
                lElementsCount1, lElementsCount2, lElementsCount3,
                uElementsCount1, uElementsCount2, uElementsCount3,
                lowerRightNodeIds, upperRightNodeIds, nodeIndex, nodeIdentifier)

            # Create elements
            elementIdentifier = 1

            # Left lung elements
            elementIdentifier = getLungElements(coordinates, eftfactory, eftRegular, elementtemplateRegular,
                elementtemplateCustom, mesh, lungMeshGroup,
                leftLungMeshGroup, lowerLeftLungMeshGroup, None, upperLeftLungMeshGroup,
                lElementsCount1, lElementsCount2, lElementsCount3,
                uElementsCount1, uElementsCount2, uElementsCount3,
                lowerLeftNodeIds, upperLeftNodeIds, elementIdentifier)

            # Right lung elements
            getLungElements(coordinates, eftfactory, eftRegular, elementtemplateRegular,
                elementtemplateCustom, mesh, lungMeshGroup,
                rightLungMeshGroup, lowerRightLungMeshGroup, middleRightLungMeshGroup, upperRightLungMeshGroup,
                lElementsCount1, lElementsCount2, lElementsCount3,
                uElementsCount1, uElementsCount2, uElementsCount3,
                lowerRightNodeIds, upperRightNodeIds, elementIdentifier)

        elif isMouse:
            # valueLabels = [ Node.VALUE_LABEL_VALUE, Node.VALUE_LABEL_D_DS1, Node.VALUE_LABEL_D_DS2, Node.VALUE_LABEL_D_DS3 ]
            nodeFieldParameters = [
                (   1, [ [  -0.06500,  -9.79600,   3.32500], [   0.93700,   0.96700,   2.47500], [  -1.72900,  -0.55700,   0.27900], [  -1.97500,  -3.88300,   3.53100] ] ),
                (   2, [ [  -0.00500,  -9.22800,   5.76600], [  -0.74000,   0.15300,   2.17800], [  -1.51700,   0.36800,  -0.21400], [  -0.71900,  -2.10500,   2.41600] ] ),
                (   3, [ [  -1.87500, -11.05600,   1.28600], [  -0.21900,   0.91700,   2.49900], [  -2.39900,  -0.36900,  -1.06700], [  -2.61300,  -2.51900,   4.94800] ] ),
                (   4, [ [  -1.93400, -10.00200,   3.65200], [   0.10200,   1.18600,   2.22000], [  -1.96200,   0.15900,   0.36800], [  -1.82400,  -2.13500,   2.94900] ] ),
                (   5, [ [  -1.68200,  -8.70900,   5.70400], [   0.40000,   1.39200,   1.87100], [  -1.82200,   0.66700,   0.09200], [  -0.58800,  -0.21200,   2.94500] ] ),
                (   6, [ [  -3.99400, -10.67100,   1.23900], [  -0.01000,   0.98000,   3.19800], [  -2.14700,   0.89400,   0.42200], [  -1.85400,  -1.87000,   4.95800] ] ),
                (   7, [ [  -3.89800,  -9.45400,   4.04500], [   0.20100,   1.44300,   2.38200], [  -1.94000,   0.83500,   0.33100], [  -0.94500,  -0.58800,   3.06100] ] ),
                (   8, [ [  -3.61900,  -7.88600,   5.97900], [   0.35100,   1.66300,   1.45900], [  -1.91700,   1.03900,   0.16000], [  -0.23900,   0.30600,   2.67600] ] ),
                (   9, [ [  -5.86600,  -9.33300,   2.12700], [   0.01700,   0.59900,   2.31000], [  -1.70800,   1.80100,   1.54800], [  -1.04600,  -0.54700,   4.42900] ] ),
                (  10, [ [  -5.76000,  -8.34000,   4.30200], [   0.19500,   1.37500,   1.98800], [  -1.60500,   1.16300,   0.13500], [  -0.13300,   0.32500,   2.99100] ] ),
                (  11, [ [  -5.48200,  -6.63600,   6.01500], [   0.35200,   1.99000,   1.40800], [  -1.65900,   1.25900,  -0.05100], [   0.25300,   0.26400,   2.50200] ] ),
                (  12, [ [  -7.10400,  -7.17500,   4.33400], [  -0.44700,   2.06800,   1.94900], [  -1.07500,   1.15600,  -0.07000], [  -0.35600,   0.07900,   2.65000] ] ),
                (  13, [ [  -6.93700,  -5.39200,   5.89100], [   0.73400,   1.40700,   1.09300], [  -1.24500,   1.22400,  -0.19700], [   0.68600,   1.13000,   2.17900] ] ),
                (  14, [ [  -1.55200, -12.41900,   7.12200], [   1.89000,   1.23100,   1.52300], [  -1.81000,   0.92100,   0.01900], [  -0.91700,  -1.20200,   3.91600] ] ),
                (  15, [ [  -0.54600, -10.44300,   8.76100], [   0.11000,   2.46200,   1.58800], [  -1.25400,   2.16800,   0.00900], [  -0.30400,  -0.15400,   3.37700] ] ),
                (  16, [ [  -3.84500, -12.69000,   6.04000], [   0.31200,   0.90800,   0.87300], [  -2.16400,   0.54100,  -0.59300], [  -1.28400,  -0.70700,   4.47700] ] ),
                (  17, [ [  -3.22600, -11.20300,   7.18000], [   0.92300,   2.05600,   1.39900], [  -1.50800,   1.49400,   0.09700], [  -0.63100,  -0.11700,   3.89800] ] ),
                (  18, [ [  -1.95900,  -8.56200,   8.76100], [   1.60800,   3.22200,   1.76000], [  -1.55900,   1.57300,  -0.00900], [   0.04300,   0.51000,   3.11900] ] ),
                (  19, [ [  -5.48600, -11.63400,   5.93600], [   1.00200,   2.17400,   1.35300], [  -1.53700,   1.70600,   0.08800], [  -1.09700,  -0.02200,   4.34400] ] ),
                (  20, [ [  -4.51300,  -9.46500,   7.31500], [   0.94300,   2.16400,   1.40500], [  -1.27500,   1.72900,   0.06700], [  -0.25700,   0.58500,   3.38600] ] ),
                (  21, [ [  -3.60000,  -7.30600,   8.74500], [   0.88400,   2.15200,   1.45500], [  -1.54100,   1.29600,  -0.07900], [   0.27900,   0.85000,   2.82400] ] ),
                (  22, [ [  -6.64300,  -9.35400,   6.25900], [   0.93200,   1.51100,   0.93700], [  -0.87500,   2.49400,   0.58500], [  -0.49800,   0.51200,   3.78400] ] ),
                (  23, [ [  -5.77100,  -7.75200,   7.31600], [   0.81100,   1.68900,   1.17300], [  -1.37400,   1.36400,  -0.12000], [   0.11200,   0.84800,   3.01900] ] ),
                (  24, [ [  -5.03400,  -5.98300,   8.60700], [   0.66100,   1.84700,   1.40700], [  -1.28000,   1.58200,  -0.26400], [   0.64000,   1.03900,   2.64400] ] ),
                (  25, [ [  -7.17300,  -6.74200,   7.10200], [   0.25600,   2.72800,   1.02500], [  -1.39400,   0.63900,  -0.30000], [   0.22600,   0.78500,   2.83700] ] ),
                (  26, [ [  -6.09900,  -4.17500,   8.21500], [   1.80500,   2.29700,   1.14800], [  -0.84000,   2.00500,  -0.51300], [   0.98900,   1.30200,   2.46800] ] ),
                (  27, [ [  -1.93100, -12.43600,  10.55900], [   2.49000,   1.68500,   1.18300], [  -1.15200,   2.23900,   0.69100], [  -0.54300,   0.32500,   3.55900] ] ),
                (  28, [ [  -0.56200,  -9.47900,  12.04200], [   0.22400,   3.80500,   1.60300], [  -0.78100,   1.89400,  -0.16000], [  -0.44600,   0.30600,   3.16500] ] ),
                (  29, [ [  -4.52000, -12.65600,   9.95600], [   1.30600,   2.32000,   0.98900], [  -2.41100,   0.92900,  -0.48400], [  -0.46700,   0.65000,   3.64600] ] ),
                (  30, [ [  -3.13300, -10.25400,  10.92300], [   1.46800,   2.48500,   0.94400], [  -1.24000,   2.10000,   0.02900], [  -0.18500,   0.74000,   3.42200] ] ),
                (  31, [ [  -1.58200,  -7.68800,  11.83900], [   1.63300,   2.64600,   0.88900], [  -1.25200,   1.66600,  -0.24300], [  -0.06200,   0.20100,   3.11400] ] ),
                (  32, [ [  -6.19700, -10.92400,   9.69400], [   2.06600,   2.90800,   0.94500], [  -1.25600,   2.20900,  -0.19200], [  -0.23700,   1.12300,   3.54400] ] ),
                (  33, [ [  -4.37800,  -8.28200,  10.63900], [   1.57100,   2.37300,   0.94500], [  -1.20500,   1.80600,  -0.31200], [   0.08200,   0.79000,   3.19500] ] ),
                (  34, [ [  -3.04500,  -6.18300,  11.56000], [   1.09400,   1.82300,   0.89500], [  -1.31100,   1.58200,  -0.31600], [   0.41300,   0.44900,   2.91100] ] ),
                (  35, [ [  -6.88900,  -8.42400,   9.59400], [   1.35800,   1.61900,   0.61600], [  -0.24700,   2.73500,   0.10200], [   0.26400,   1.11000,   3.22300] ] ),
                (  36, [ [  -5.53200,  -6.64300,  10.30600], [   1.35200,   1.94000,   0.80700], [  -1.15000,   1.33500,  -0.37700], [   0.46000,   0.90100,   2.97900] ] ),
                (  37, [ [  -4.19800,  -4.54300,  11.21100], [   1.31400,   2.25600,   1.00300], [  -0.95600,   1.70800,  -0.37900], [   0.81800,   0.65100,   2.72300] ] ),
                (  38, [ [  -6.63100,  -5.59800,   9.91100], [   0.94700,   2.93800,   0.60800], [  -1.03500,   0.74500,  -0.40700], [   0.98500,   1.06600,   2.93400] ] ),
                (  39, [ [  -4.95200,  -2.79500,  10.80900], [   2.34400,   2.59400,   1.15400], [  -0.54700,   1.77500,  -0.42200], [   1.20400,   0.55900,   2.59700] ] ),
                (  40, [ [  -2.63300, -11.75400,  14.13900], [   2.07100,   1.01000,   1.01300], [  -0.94500,   2.13200,  -0.11000], [  -1.19500,   1.29000,   2.62900] ] ),
                (  41, [ [  -1.34700,  -9.76300,  14.88200], [   0.43300,   2.56600,   0.40900], [  -0.67800,   1.57400,  -0.00900], [  -0.85400,   0.07400,   2.62100] ] ),
                (  42, [ [  -4.78400, -11.50200,  13.19700], [   1.12400,   1.88500,   0.74200], [  -1.93100,   1.31700,  -0.71500], [   0.33300,   1.24300,   2.91700] ] ),
                (  43, [ [  -3.53400,  -9.71000,  13.96000], [   1.37200,   1.69300,   0.78200], [  -0.85500,   1.95400,  -0.24900], [  -0.46900,  -0.15300,   2.45300] ] ),
                (  44, [ [  -2.04800,  -8.12700,  14.75500], [   1.59400,   1.46900,   0.80600], [  -0.72300,   1.69400,  -0.24600], [  -0.31400,  -0.89000,   2.71200] ] ),
                (  45, [ [  -5.99600,  -9.47500,  12.89200], [   1.70200,   1.70700,   0.76600], [  -0.70000,   2.26100,  -0.31000], [   0.83600,   1.57400,   3.01000] ] ),
                (  46, [ [  -4.34300,  -7.84900,  13.64900], [   1.60500,   1.54500,   0.74600], [  -0.66600,   1.88500,  -0.36200], [  -0.13900,   0.17400,   2.48300] ] ),
                (  47, [ [  -2.78800,  -6.38400,  14.38400], [   1.50500,   1.38500,   0.72400], [  -0.70800,   1.74800,  -0.46700], [   0.53500,  -0.43200,   3.00600] ] ),
                (  48, [ [  -6.14400,  -7.17700,  12.60200], [   1.21900,   1.17800,   0.66400], [   0.37800,   2.50500,  -0.03200], [   1.15600,   1.37100,   2.63400] ] ),
                (  49, [ [  -4.86400,  -5.95300,  13.24000], [   1.34200,   1.27000,   0.61200], [  -0.41900,   1.59500,  -0.39800], [   0.39900,   0.41100,   2.26200] ] ),
                (  50, [ [  -3.46100,  -4.63700,  13.82300], [   1.46400,   1.36000,   0.55300], [  -0.50700,   1.71100,  -0.60900], [   0.85100,  -0.09300,   2.33400] ] ),
                (  51, [ [  -5.18900,  -4.65900,  12.87300], [   1.22600,   2.11800,   0.29700], [  -0.23000,   0.99100,  -0.33700], [   1.02700,  -0.31500,   2.68800] ] ),
                (  52, [ [  -3.80900,  -2.97900,  13.17500], [   1.49600,   1.21300,   0.30100], [  -0.18800,   1.59800,  -0.68200], [   1.26300,  -0.91100,   2.64300] ] ),
                (  53, [ [  -3.97000, -10.25800,  15.67100], [   1.39000,   1.09500,   2.04300], [  -1.07900,   2.17800,   0.78400], [  -0.36000,  -0.84200,   0.86500] ] ),
                (  54, [ [  -2.21000,  -9.38800,  17.16100], [   2.01800,   0.61000,   0.88900], [  -0.38600,   1.79200,   1.71400], [  -0.00900,  -1.59600,   2.05300] ] ),
                (  55, [ [  -4.58000,  -7.85600,  15.56900], [   2.11100,   1.24600,   2.39500], [  -0.34700,   2.32300,  -0.47500], [  -0.32900,  -0.18600,   1.33500] ] ),
                (  56, [ [  -1.94700,  -7.07000,  17.50600], [   3.03100,   0.31400,   1.42200], [  -0.14400,   2.64400,  -0.63500], [   1.14000,  -0.93300,   3.21700] ] ),
                (  57, [ [  -4.66700,  -5.75200,  14.78800], [   1.90000,   1.26100,   1.65700], [  -0.32900,   1.75000,  -1.46200], [  -0.00600,  -0.00900,   0.81900] ] ),
                (  58, [ [  -2.54100,  -4.72700,  15.86200], [   2.25100,   0.75500,   0.47100], [  -0.93900,   2.14800,  -2.20600], [   0.98300,  -0.08500,   1.73600] ] ),
                (  59, [ [   3.21000, -14.40000,   2.61000], [   2.45000,  -0.85500,   0.01500], [   0.34400,   2.19000,   1.23000], [   0.00400,  -0.80200,   2.52000] ] ),
                (  60, [ [   0.88200, -11.40000,   2.59000], [   2.06000,  -0.29900,   1.50000], [  -1.23000,   2.97000,   0.75300], [  -0.22000,  -1.37000,   1.92000] ] ),
                (  61, [ [   3.47000, -12.00000,   3.89000], [   3.07000,  -1.43000,   0.64300], [   0.57500,   1.72000,   2.00000], [   0.02000,  -1.12000,   1.70000] ] ),
                (  62, [ [   6.56000, -14.00000,   3.58000], [   2.97000,  -2.53000,  -1.24000], [   3.13000,   1.39000,   1.62000], [  -0.06700,  -0.64000,   2.48000] ] ),
                (  63, [ [   0.77700, -10.50000,   6.79000], [   3.07000,  -0.42700,  -0.51900], [   1.10000,   0.84100,   2.57000], [  -1.04000,  -1.14000,   1.95000] ] ),
                (  64, [ [   4.14000, -11.00000,   6.27000], [   4.18000,  -0.53400,  -0.58200], [   0.53400,   1.27000,   2.35000], [  -0.11100,  -0.23400,   1.97000] ] ),
                (  65, [ [   8.84000, -11.70000,   5.54000], [   5.22000,  -0.85200,  -0.88100], [   2.29000,   3.24000,   2.57000], [  -0.40200,  -0.68200,   1.53000] ] ),
                (  66, [ [   1.69000,  -9.41000,   9.46000], [   1.74000,   0.27200,  -0.64900], [  -0.32900,   0.88800,   2.23000], [  -0.55100,  -1.14000,   0.63600] ] ),
                (  67, [ [   4.49000,  -9.40000,   8.57000], [   3.82000,   0.49200,  -0.79600], [   0.08200,   2.48000,   2.40000], [  -0.02500,  -0.13800,   0.93500] ] ),
                (  68, [ [   9.35000,  -8.58000,   8.03000], [   3.28000,   1.25700,   0.50500], [  -0.55000,   2.58000,   1.57000], [  -0.33400,  -1.54000,   0.45000] ] ),
                (  69, [ [   1.02000,  -8.07000,  11.90000], [   2.34000,   2.47000,  -1.51000], [  -0.99100,   3.00000,   1.34000], [   0.18900,  -0.82600,   1.25000] ] ),
                (  70, [ [   4.18000,  -6.03000,  10.70000], [   3.39000,   1.34000,  -1.05000], [  -1.25000,   3.11000,   1.17000], [   0.22400,  -1.86000,   0.43500] ] ),
                (  71, [ [   7.92000,  -5.44000,   9.89000], [   3.64500,   0.55700,  -0.59800], [  -0.83300,   1.42000,   0.60700], [   0.64600,  -1.31000,   0.80000] ] ),
                (  72, [ [   3.31000, -15.10000,   5.27000], [   2.59000,  -0.53600,  -0.02700], [   0.15400,   2.25000,   0.50800], [   0.26500,  -0.37600,   3.06000] ] ),
                (  73, [ [   0.91900, -13.40000,   6.67000], [   2.53100,   0.43500,   0.04200], [  -1.55000,   1.75000,   2.17000], [   0.17000,  -0.55500,   3.21000] ] ),
                (  74, [ [   3.66000, -13.07900,   6.59200], [   2.92900,  -0.58200,  -0.17400], [   0.44000,   1.98000,   1.54000], [   0.28000,  -0.79900,   2.90000] ] ),
                (  75, [ [   6.47000, -14.30000,   6.16000], [   2.66000,  -2.23000,  -0.02900], [   1.75000,   1.43000,   0.96800], [   0.24600,   0.20600,   2.69000] ] ),
                (  76, [ [  -0.19700, -11.60000,   8.90000], [   4.38000,   0.93300,  -0.40500], [   1.03000,   0.73100,   1.20000], [  -0.25400,  -0.21500,   2.42000] ] ),
                (  77, [ [   4.19400, -11.28500,   8.31500], [   4.41300,  -0.56100,  -0.89600], [   0.43300,   1.59000,   1.78000], [   0.15900,  -0.27800,   2.03000] ] ),
                (  78, [ [   8.29000, -12.30000,   7.11000], [   2.56500,  -1.43000,  -0.76300], [   1.03000,   1.97000,   0.91300], [  -0.40400,  -0.27900,   1.46000] ] ),
                (  79, [ [   0.90300, -10.80000,  10.40000], [   2.72000,   1.16000,  -0.46300], [   0.46700,   1.34000,   2.46000], [  -0.94100,  -1.12300,   0.97300] ] ),
                (  80, [ [   4.53300,  -9.71400,   9.97600], [   4.48800,   0.06600,  -1.13000], [   0.19000,   1.69000,   1.54000], [  -0.01500,  -1.18000,   1.14000] ] ),
                (  81, [ [   9.03000, -10.10000,   8.41000], [   2.04200,  -1.07500,  -1.05600], [   0.08600,   1.44000,   1.87000], [  -0.52600,  -1.73000,   0.70400] ] ),
                (  82, [ [   1.40200,  -9.18300,  13.23100], [   2.30100,   1.11800,  -1.69000], [   0.89900,   1.61000,   1.22000], [  -0.21600,  -1.29000,   1.83000] ] ),
                (  83, [ [   4.54000,  -7.87000,  11.30000], [   3.58100,   1.06000,  -0.76100], [  -0.31900,   2.31000,   1.22900], [   0.48000,  -1.81000,   0.71500] ] ),
                (  84, [ [   8.33000,  -6.82000,  10.60000], [   4.01100,   1.10400,  -0.40400], [  -0.97400,   2.10000,   1.31000], [   0.30800,  -2.36000,   1.31000] ] ),
                (  85, [ [   3.67000, -15.20000,   8.43000], [   3.66000,  -0.19900,   0.11900], [   0.44400,   1.71000,   1.59000], [   0.16900,   0.35900,   2.69000] ] ),
                (  86, [ [   1.24000, -13.70000,  10.10000], [   2.30000,   0.53400,   0.14700], [  -1.13000,   0.95700,   1.01000], [   0.38000,  -0.15800,   3.00000] ] ),
                (  87, [ [   4.04000, -13.40000,   9.71000], [   2.78000,   0.10800,  -0.90100], [   0.44400,   1.85000,   0.91400], [   0.63100,   0.42500,   3.05000] ] ),
                (  88, [ [   6.82000, -13.90000,   8.87000], [   2.89000,  -0.77800,  -0.24100], [   2.12000,   1.57000,   0.27200], [   0.38800,   0.64900,   2.08000] ] ),
                (  89, [ [  -0.21500, -11.89600,  11.60400], [   3.40000,   0.10000,  -1.14600], [   1.05800,   1.23800,  -1.21900], [   0.21900,  -0.02100,   1.92900] ] ),
                (  90, [ [   4.46000, -11.50000,  10.30000], [   4.10000,   0.28400,  -1.23000], [   0.23100,   1.93000,   0.05800], [   0.34200,   0.08800,   1.66900] ] ),
                (  91, [ [   8.43000, -11.60000,   9.04000], [   2.10300,  -0.39700,  -0.46200], [   0.83200,   1.39000,  -0.62600], [   0.42400,   1.62000,   2.11000] ] ),
                (  92, [ [   4.07100, -14.59800,  11.20400], [   2.31200,   0.61700,  -0.27000], [   0.65900,   1.60300,   0.60700], [   0.40800,   0.67700,   3.13000] ] ),
                (  93, [ [   1.60000, -13.50000,  13.30000], [   3.15200,   0.71300,  -1.53500], [  -0.98900,   1.18900,   1.04700], [   0.67100,   0.45200,   2.11000] ] ),
                (  94, [ [   4.61000, -12.80000,  11.90000], [   2.43900,   0.41200,  -0.57300], [   0.51900,   2.15000,   0.56800], [  -0.40500,  -0.00900,   1.83700] ] ),
                (  95, [ [   7.18000, -13.00000,  11.10000], [   1.24900,  -0.68100,  -0.50900], [   1.62000,   2.25000,   0.54700], [  -0.20100,   0.76100,   2.90000] ] ),
                (  96, [ [   0.19500, -11.60000,  14.40000], [   4.67000,   1.97000,  -2.39000], [   0.52800,   0.71700,   1.76000], [  -0.16000,  -0.52100,   0.39100] ] ),
                (  97, [ [   4.95300,  -9.85200,  12.34500], [   4.34200,   0.68900,  -0.96600], [   0.31300,   1.53000,   2.23000], [   0.19600,  -2.32000,   0.49900] ] ),
                (  98, [ [   8.57700,  -9.27300,  11.71000], [   1.67600,   0.01000,  -0.41500], [  -0.58900,   1.41000,   2.69000], [  -0.52300,  -3.64000,   0.34200] ] ),
                (  99, [ [   0.17500,  -4.79000,  11.40000], [   2.19000,   1.07000,  -0.47700], [  -1.17000,   3.24000,  -0.42000], [   2.95000,  -1.42000,   2.27000] ] ),
                ( 100, [ [   2.42000,  -3.62000,  11.00000], [   2.29000,   1.28000,  -0.45800], [  -2.62000,   2.34000,   0.24600], [   1.85000,  -0.53100,   1.67000] ] ),
                ( 101, [ [   4.36000,  -1.84000,  10.70000], [   2.08000,   1.65000,  -0.35600], [  -4.71000,   2.20000,   0.65100], [   1.87000,  -0.62300,   1.67000] ] ),
                ( 102, [ [  -1.02000,  -1.69000,  11.00000], [   0.77400,   1.81000,  -0.26700], [  -1.41000,   0.43000,   0.19700], [   0.91000,   1.90000,   2.73000] ] ),
                ( 103, [ [   2.50200,  -6.10300,  13.80300], [   1.32800,   1.43600,  -0.84000], [   0.26600,   3.66000,   0.88300], [   1.03000,  -1.59000,   2.47000] ] ),
                ( 104, [ [   3.88300,  -4.54900,  12.89500], [   1.71000,   1.65000,  -0.78500], [  -1.79000,   3.19000,   1.46000], [   0.70800,  -1.36000,   1.72300] ] ),
                ( 105, [ [   6.06000,  -2.90000,  12.40000], [   1.02600,   0.45300,  -0.08800], [  -3.10000,   2.21000,   1.63000], [   0.95000,  -1.10000,   1.62000] ] ),
                ( 106, [ [   1.07000,  -1.86000,  14.10000], [   0.56000,   2.90000,   0.59200], [  -3.00000,   0.21000,   1.58000], [   0.70100,  -0.98000,   1.70900] ] ),
                ( 107, [ [   2.37000,  -7.49000,  15.90000], [   1.75700,   1.17000,  -0.77700], [   0.63200,   3.39800,  -0.01300], [  -0.58000,  -1.14000,   2.10000] ] ),
                ( 108, [ [   4.35000,  -6.18000,  15.00000], [   2.03000,   1.57000,  -1.03000], [  -1.98000,   3.34000,   2.01000], [  -0.07100,  -1.66000,   2.17000] ] ),
                ( 109, [ [   6.58000,  -4.52000,  13.90000], [   0.63600,   1.38500,  -0.17500], [  -1.88000,   1.91000,   1.25000], [  -0.63500,  -1.92000,   2.68000] ] ),
                ( 110, [ [   1.86000,  -3.31000,  16.00000], [   0.37500,   2.65100,   1.04300], [  -2.62000,   0.83400,   0.85500], [  -0.15700,  -1.09000,   1.66000] ] ),
                ( 111, [ [   4.42000, -13.70000,  14.20000], [   2.33000,   0.71600,   0.00700], [  -0.22400,   0.74100,   0.29300], [   0.14000,   1.05000,   1.94000] ] ),
                ( 112, [ [   2.64000, -12.70000,  15.30000], [   0.94900,  -0.20000,  -0.35200], [  -1.44000,   1.35000,   1.27000], [   1.14000,   0.58600,   1.28000] ] ),
                ( 113, [ [   4.27000, -12.70000,  14.60000], [   2.09400,   0.41000,  -0.44700], [  -0.31000,   1.48000,   0.66300], [   0.04800,   0.24200,   1.17500] ] ),
                ( 114, [ [   6.77000, -12.20000,  14.00000], [   1.14000,   0.37800,   0.29900], [   1.21000,   1.53000,   0.27000], [  -1.19000,   0.02700,   1.81000] ] ),
                ( 115, [ [   1.07000, -10.90000,  16.80000], [   2.55200,   0.17900,  -1.11500], [  -0.66800,   2.40000,   1.38000], [   1.79000,   0.15800,   1.91000] ] ),
                ( 116, [ [   3.87000, -10.70000,  15.60000], [   3.16200,   0.52100,  -1.11600], [  -0.10800,   2.70300,   1.43300], [  -0.50900,  -0.45800,   2.86000] ] ),
                ( 117, [ [   7.33000, -10.10000,  14.40000], [   3.17000,   0.05600,   0.01400], [  -0.09600,   3.07000,   1.14000], [  -2.59000,  -0.76300,   3.56000] ] ),
                ( 118, [ [   1.34000,  -8.28000,  17.80000], [   2.52200,   0.57800,  -0.72600], [   0.32100,   2.86000,   0.62500], [   0.36100,  -0.63500,   1.89000] ] ),
                ( 119, [ [   3.76000,  -7.78000,  17.10000], [   2.18000,   0.81800,  -0.17600], [  -1.05000,   2.81000,   1.59000], [  -0.92300,  -0.82100,   1.77300] ] ),
                ( 120, [ [   5.60000,  -6.96000,  17.00000], [   1.52000,   0.93200,   0.13400], [  -2.95000,   2.55000,   2.23000], [  -1.90000,  -2.20000,   2.72000] ] ),
                ( 121, [ [   1.73000,  -5.15000,  18.50000], [   2.92000,   1.23000,   0.96600], [  -2.87000,   2.35000,   1.05000], [   0.35800,  -2.13000,   1.39000] ] ),
                ( 122, [ [   4.23000, -12.40000,  16.00000], [   2.26000,  -0.31500,  -0.71700], [  -0.40600,   1.32000,   1.51000], [   0.02500,   0.14000,   1.42500] ] ),
                ( 123, [ [   3.87000, -10.70000,  17.60000], [   3.79000,   0.42100,  -0.94000], [  -0.81100,   1.93000,   1.48000], [   0.44100,   0.35000,   1.01000] ] ),
                ( 124, [ [   2.99000,  -8.50000,  18.90000], [   2.71000,   0.49000,  -0.17200], [  -1.57000,   3.81000,   1.44000], [  -0.14300,  -0.36100,   1.17300] ] ),
                ( 125, [ [   2.49300,  -9.65700,   8.51800], [  -1.35500,   0.80500,   0.25900], [  -2.09500,  -2.28700,  -5.51800], [  -0.14100,  -1.15900,   1.75800] ] ),
                ( 126, [ [   1.82900,  -8.51000,   9.08400], [   0.62000,   1.16800,   0.77800], [  -0.05400,  -0.02400,  -0.02000], [  -0.67000,  -0.79900,   1.19500] ] ),
                ( 127, [ [   3.15700,  -8.31000,   9.39800], [   2.53800,  -0.40100,   0.43300], [  -1.64700,   2.16100,   0.67400], [  -1.60100,   0.06100,   1.77100] ] ),
                ( 128, [ [   4.11100,  -5.52400,  10.77500], [  -1.93100,   3.85000,   2.14600], [  -1.36100,   1.34600,   0.44700], [  -3.02000,  -1.80300,   0.23600] ] ),
                ( 129, [ [   0.06500, -11.43700,   7.21500], [   0.18400,   2.21200,  -0.19300], [  -0.54200,  -0.39700,  -0.29100], [   0.10900,   0.04700,   2.24600] ] ),
                ( 130, [ [  -0.16200,  -9.48800,   6.61900], [   1.30200,   2.93700,   3.92300], [  -1.02400,   0.49500,  -1.87400], [  -1.35400,  -0.03500,   3.61400] ] ),
                ( 131, [ [   1.19500,  -6.75800,   9.68000], [   1.40000,   2.49800,   2.16700], [  -2.14900,   0.85000,  -0.15400], [  -1.51700,  -1.03900,   0.74200] ] ),
                ( 132, [ [   2.49300,  -4.64600,  11.05500], [   1.15800,   1.67200,   0.56600], [  -1.65900,   0.66700,   0.08800], [  -2.05100,  -1.69200,   0.35800] ] ),
                ( 133, [ [  -2.02800,  -8.78200,   6.40500], [   0.97200,   1.92400,   3.23400], [  -2.03500,   1.31500,   0.66900], [  -0.36500,   1.12500,   4.45200] ] ),
                ( 134, [ [  -0.79200,  -6.61800,   9.20000], [   1.48600,   2.37600,   2.30700], [  -1.85100,   0.70100,  -0.13300], [  -0.68500,  -0.48100,   1.57900] ] ),
                ( 135, [ [   0.87700,  -4.12500,  10.97600], [   1.81900,   2.56400,   1.22300], [  -1.73500,   0.43000,  -0.13400], [  -1.77200,  -1.55600,   0.42900] ] ),
                ( 136, [ [  -3.58000,  -7.09200,   8.05300], [   1.29300,   1.54400,   1.32600], [  -1.32900,   1.77000,   1.27100], [   0.40200,   0.69000,   2.47200] ] ),
                ( 137, [ [  -2.27700,  -5.49600,   9.40000], [   1.31400,   1.64800,   1.36800], [  -1.33600,   1.34600,   0.31300], [  -0.46000,  -0.52000,   1.27200] ] ),
                ( 138, [ [  -0.95000,  -3.76000,  10.74000], [   1.33200,   1.75200,   1.40900], [  -1.63800,   0.73000,  -0.22100], [  -1.09700,  -1.31800,   0.38500] ] ),
                ( 139, [ [  -4.66400,  -5.35100,   8.96000], [   1.32600,   1.46500,   0.91600], [  -0.79700,   1.90500,   0.71200], [   0.31300,   0.30300,   1.46900] ] ),
                ( 140, [ [  -3.40400,  -3.97400,   9.81500], [   1.19400,   1.28900,   0.79400], [  -0.86800,   1.93100,   0.39500], [  -0.44800,  -0.51400,   0.82400] ] ),
                ( 141, [ [  -2.29900,  -2.77300,  10.58400], [   1.05900,   1.11500,   0.67500], [  -0.92400,   1.77400,   0.34600], [  -1.01000,  -0.90200,   0.52200] ] ),
                ( 142, [ [  -5.16100,  -3.36500,   9.46100], [   1.02300,   1.84500,   0.77500], [  -0.19200,   2.02200,   0.28300], [  -0.02400,   0.01700,   0.98200] ] ),
                ( 143, [ [  -3.88800,  -1.70800,  10.15300], [   1.51100,   1.44000,   0.59700], [  -0.09800,   2.54100,   0.27400], [  -0.42400,  -0.07600,   0.80100] ] ),
                ( 144, [ [  -2.21800,  -0.53800,  10.63300], [   2.02900,   0.25900,   0.44900], [  -1.61300,   2.07400,  -0.10700], [  -1.05300,  -0.66900,   1.14800] ] ),
                ( 145, [ [   1.75100, -10.58100,  10.76100], [  -0.97700,   1.55100,  -0.18500], [  -2.85000,  -1.04200,  -1.37200], [  -1.33400,  -0.62600,   2.63200] ] ),
                ( 146, [ [   1.22000,  -9.13500,  10.80000], [  -0.03300,   1.25800,   0.27400], [  -2.33700,  -0.38600,  -0.53500], [  -0.52300,  -0.41900,   2.19300] ] ),
                ( 147, [ [   1.51600,  -8.25800,  11.17000], [   0.26000,   0.83600,   0.41900], [  -1.73100,   0.31600,  -0.13700], [  -1.20200,  -0.48000,   2.11000] ] ),
                ( 148, [ [   1.73700,  -7.47700,  11.62600], [   0.18100,   0.72300,   0.49100], [  -0.88900,   1.03000,   0.36900], [  -1.66600,  -1.94500,   1.42400] ] ),
                ( 149, [ [  -0.11300, -11.26300,   9.86400], [  -0.57200,   2.27600,   0.46100], [  -0.87900,  -0.32100,  -0.42300], [  -0.46500,   0.30100,   3.03200] ] ),
                ( 150, [ [  -0.91900,  -9.25600,  10.19700], [   0.88500,   1.55700,   0.86400], [  -1.03300,   1.70500,   0.19900], [  -0.13400,   0.50100,   3.47100] ] ),
                ( 151, [ [  -0.07900,  -7.79200,  11.03900], [   0.79700,   1.37000,   0.82000], [  -1.44500,   0.61400,  -0.12300], [  -0.92600,  -0.95700,   1.92600] ] ),
                ( 152, [ [   0.67300,  -6.51400,  11.83400], [   0.70700,   1.18500,   0.76900], [  -1.22100,   0.87800,   0.03900], [  -1.53900,  -2.00300,   1.19100] ] ),
                ( 153, [ [  -2.08900,  -7.88200,  10.27500], [   0.72600,   0.57800,   0.57600], [  -1.14200,   1.39600,   0.12000], [   0.24500,   0.67100,   3.27300] ] ),
                ( 154, [ [  -1.35600,  -7.06100,  10.92600], [   0.73000,   1.05600,   0.71900], [  -1.31100,   0.94800,  -0.09300], [  -0.43900,  -0.40200,   1.86600] ] ),
                ( 155, [ [  -0.67100,  -5.75900,  11.69300], [   0.63700,   1.53900,   0.80900], [  -1.33200,   0.75700,  -0.19600], [  -1.29400,  -1.68600,   0.99800] ] ),
                ( 156, [ [  -3.19900,  -6.46900,  10.43600], [   0.46100,   0.43500,   0.34300], [  -1.08300,   1.48100,   0.16100], [   0.35900,   0.55500,   2.29400] ] ),
                ( 157, [ [  -2.66200,  -5.88700,  10.86100], [   0.61400,   0.72800,   0.50500], [  -1.20000,   1.37800,   0.01100], [  -0.30300,  -0.25500,   1.63200] ] ),
                ( 158, [ [  -1.98200,  -5.00400,  11.44300], [   0.74300,   1.03700,   0.66000], [  -1.29100,   1.07400,  -0.18500], [  -0.99200,  -1.13500,   0.95800] ] ),
                ( 159, [ [  -4.25000,  -4.92100,  10.59600], [   0.52600,   0.53800,   0.33800], [  -0.86500,   1.66300,   0.12300], [   0.51300,   0.55600,   1.80000] ] ),
                ( 160, [ [  -3.71400,  -4.32700,  10.95400], [   0.54700,   0.64900,   0.37600], [  -0.82300,   1.98900,   0.12000], [  -0.14600,  -0.16400,   1.40600] ] ),
                ( 161, [ [  -3.16000,  -3.62200,  11.34900], [   0.56100,   0.76100,   0.41300], [  -0.74200,   1.91400,   0.07300], [  -0.68900,  -0.74300,   1.01200] ] ),
                ( 162, [ [  -4.91500,  -3.17200,  10.67900], [   0.58300,   1.47100,   0.33300], [  -0.45900,   1.81800,   0.04300], [   0.51700,   0.36900,   1.41700] ] ),
                ( 163, [ [  -4.16900,  -1.97000,  11.09800], [   0.89300,   0.89100,   0.49400], [  -0.08600,   2.67300,   0.16500], [  -0.11900,  -0.44500,   1.05400] ] ),
                ( 164, [ [  -3.22900,  -1.40800,  11.61400], [   0.94000,   0.22100,   0.51200], [   0.56900,   2.37200,   0.43200], [  -0.95100,  -1.06000,   0.79300] ] ),
                ( 165, [ [  -0.21700, -10.72500,  13.59000], [   1.15600,   1.58500,  -0.23100], [  -0.98100,  -0.11900,  -0.49200], [  -2.54900,   0.33100,   2.96300] ] ),
                ( 166, [ [   0.88000,  -9.22100,  13.37100], [   1.03800,   1.42300,  -0.20700], [  -1.37100,   0.43200,   0.23800], [  -0.06900,  -1.36500,   2.16900] ] ),
                ( 167, [ [  -0.93000, -10.81200,  13.23200], [   0.43900,   2.22800,   0.14800], [  -0.44500,  -0.05400,  -0.22300], [  -1.16400,   0.59900,   3.69000] ] ),
                ( 168, [ [  -0.48300,  -8.53800,  13.38300], [   0.45600,   2.31900,   0.15400], [  -1.30900,   0.92000,  -0.22200], [   0.11300,  -0.51400,   2.64700] ] ),
                ( 169, [ [  -1.65200,  -7.41300,  12.91600], [   0.63100,   0.43300,   0.19800], [  -1.20000,   1.28300,  -0.38200], [  -0.15200,  -0.30000,   2.10300] ] ),
                ( 170, [ [  -2.86200,  -5.97800,  12.63700], [   0.71200,   0.49800,   0.26600], [  -1.00400,   1.61400,  -0.19300], [  -0.09600,   0.07200,   1.90500] ] ),
                ( 171, [ [  -3.63100,  -4.22700,  12.53600], [   1.04500,   0.89800,   0.69600], [  -0.60500,   1.70400,  -0.23300], [   0.30200,   0.35300,   1.71400] ] ),
                ( 172, [ [  -4.07700,  -2.59900,  12.18800], [   0.79000,   0.79000,   0.97500], [  -0.28400,   1.54000,  -0.45900], [   0.29600,  -0.79400,   1.10100] ] )
            ]
            # The number of the elements in the left mouse lung
            elementsCount1 = 2
            elementsCount2 = 4
            elementsCount3 = 4

            # The number of the elements in the diaphragmatic animal lung
            diaphragmaticElementsCount1 = 3
            diaphragmaticElementsCount2 = 5
            diaphragmaticElementsCount3 = 2

            # Create nodes
            nodeIndex = 0
            nodeIdentifier = 1
            leftNodeIds = []
            lowerRightNodeIds = []
            upperRightNodeIds = []
            diaphragmaticNodeIds = []

            # Left lung nodes
            d1 = [0.5, 0.0, 0.0]
            d2 = [0.0, 0.5, 0.0]
            d3 = [0.0, 0.0, 1.0]
            for n3 in range(elementsCount3 + 1):
                leftNodeIds.append([])
                for n2 in range(elementsCount2 + 1):
                    leftNodeIds[n3].append([])
                    for n1 in range(elementsCount1 + 1):
                        leftNodeIds[n3][n2].append(None)
                        if n3 < elementsCount3:
                            if (n1 == 0) and ((n2 == 0) or (n2 == elementsCount2)):
                                continue
                        else:
                            if (n2 == 0) or (n2 == elementsCount2) or (n1 == 0):
                                continue
                        node = nodes.createNode(nodeIdentifier, nodetemplate)
                        cache.setNode(node)
                        if generateParameters:
                            x = [0.5 * (n1 - 1), 0.5 * (n2 - 1), 1.0 * n3]
                        else:
                            nodeParameters = nodeFieldParameters[nodeIndex]
                            nodeIndex += 1
                            assert nodeIdentifier == nodeParameters[0]
                            x, d1, d2, d3 = nodeParameters[1]
                        coordinates.setNodeParameters(cache, -1, Node.VALUE_LABEL_VALUE, 1, x)
                        coordinates.setNodeParameters(cache, -1, Node.VALUE_LABEL_D_DS1, 1, d1)
                        coordinates.setNodeParameters(cache, -1, Node.VALUE_LABEL_D_DS2, 1, d2)
                        coordinates.setNodeParameters(cache, -1, Node.VALUE_LABEL_D_DS3, 1, d3)
                        leftNodeIds[n3][n2][n1] = nodeIdentifier
                        nodeIdentifier += 1

            # Right lung nodes
            nodeIndex, nodeIdentifier = getLungNodes(rightLung, cache, coordinates, generateParameters,
                 nodes, nodetemplate, nodeFieldParameters,
                 lElementsCount1, lElementsCount2, lElementsCount3,
                 uElementsCount1, uElementsCount2, uElementsCount3,
                 lowerRightNodeIds, upperRightNodeIds, nodeIndex, nodeIdentifier)

            # Diaphragm lung nodes
            getDiaphragmaticLungNodes(cache, coordinates, generateParameters,
                 nodes, nodetemplate, nodeFieldParameters,
                 diaphragmaticElementsCount1, diaphragmaticElementsCount2, diaphragmaticElementsCount3,
                 diaphragmaticNodeIds, nodeIndex, nodeIdentifier)

            # Create elements
            elementIdentifier = 1

            # Left lung elements
            for e3 in range(elementsCount3):
                for e2 in range(elementsCount2):
                    for e1 in range(elementsCount1):
                        eft = eftRegular
                        nodeIdentifiers = [
                            leftNodeIds[e3    ][e2][e1], leftNodeIds[e3    ][e2][e1 + 1], leftNodeIds[e3    ][e2 + 1][e1], leftNodeIds[e3    ][e2 + 1][e1 + 1],
                            leftNodeIds[e3 + 1][e2][e1], leftNodeIds[e3 + 1][e2][e1 + 1], leftNodeIds[e3 + 1][e2 + 1][e1], leftNodeIds[e3 + 1][e2 + 1][e1 + 1]]

                        if (e3 < elementsCount3 - 1):
                            if (e2 == 0) and (e1 == 0):
                                # Back wedge elements
                                nodeIdentifiers.pop(4)
                                nodeIdentifiers.pop(0)
                                eft = eftWedgeCollapseXi1_15
                            elif (e2 == elementsCount2 - 1) and (e1 == 0):
                                # Front wedge elements
                                nodeIdentifiers.pop(6)
                                nodeIdentifiers.pop(2)
                                eft = eftWedgeCollapseXi1_37
                        else:
                            if (e2 == 0) and (e1 == 1):
                                # Top back wedge elements
                                nodeIdentifiers.pop(5)
                                nodeIdentifiers.pop(4)
                                eft = eftWedgeCollapseXi2_56
                            elif (e2 == elementsCount2 - 1) and (e1 == 1):
                                # Top front wedge elements
                                nodeIdentifiers.pop(7)
                                nodeIdentifiers.pop(6)
                                eft = eftWedgeCollapseXi2_78
                            elif ((0 < e2 < (elementsCount2 - 1))) and (e1 == 0):
                                # Top middle back wedge element
                                nodeIdentifiers.pop(6)
                                nodeIdentifiers.pop(4)
                                eft = eftWedgeCollapseXi1_57
                            elif (e2 == 0) and (e1 == 0):
                                # Top back tetrahedron element
                                nodeIdentifiers.pop(6)
                                nodeIdentifiers.pop(5)
                                nodeIdentifiers.pop(4)
                                nodeIdentifiers.pop(0)
                                eft = eftTetCollapseXi1Xi2_82
                            elif (e2 == elementsCount2 - 1) and (e1 == 0):
                                # Top front tetrahedron element
                                nodeIdentifiers.pop(7)
                                nodeIdentifiers.pop(6)
                                nodeIdentifiers.pop(4)
                                nodeIdentifiers.pop(2)
                                eft = eftTetCollapseXi1Xi2_63

                        if eft is eftRegular:
                            element = mesh.createElement(elementIdentifier, elementtemplateRegular)
                        else:
                            elementtemplateCustom.defineField(coordinates, -1, eft)
                            element = mesh.createElement(elementIdentifier, elementtemplateCustom)
                        element.setNodesByIdentifier(eft, nodeIdentifiers)
                        if eft.getNumberOfLocalScaleFactors() == 1:
                            element.setScaleFactors(eft, [-1.0])
                        elementIdentifier += 1
                        leftLungMeshGroup.addElement(element)
                        lungMeshGroup.addElement(element)

            # Apex annotation point
            idx = elementsCount1 * elementsCount2 * (elementsCount3 - 1) + elementsCount1 * (elementsCount2 // 2)
            element1 = mesh.findElementByIdentifier(idx)
            markerPoint = markerPoints.createNode(nodeIdentifier, markerTemplateInternal)
            nodeIdentifier += 1
            cache.setNode(markerPoint)
            markerName.assignString(cache, 'apex of left lung')
            markerLocation.assignMeshLocation(cache, element1, [1.0, 1.0, 1.0])

            # Right lung elements
            elementIdentifier = getLungElements(coordinates, eftfactory, eftRegular, elementtemplateRegular,
                elementtemplateCustom, mesh, lungMeshGroup,
                rightLungMeshGroup, lowerRightLungMeshGroup, middleRightLungMeshGroup, upperRightLungMeshGroup,
                lElementsCount1, lElementsCount2, lElementsCount3,
                uElementsCount1, uElementsCount2, uElementsCount3,
                lowerRightNodeIds, upperRightNodeIds, elementIdentifier)

            # Diaphragm lung elements
            getDiaphragmaticLungElements(coordinates, eftfactory, eftRegular, elementtemplateRegular,
                elementtemplateCustom, mesh, lungMeshGroup,
                rightLungMeshGroup, diaphragmaticLungMeshGroup,
                diaphragmaticElementsCount1, diaphragmaticElementsCount2, diaphragmaticElementsCount3,
                diaphragmaticNodeIds, elementIdentifier)

        elif isRat:
            # valueLabels = [ Node.VALUE_LABEL_VALUE, Node.VALUE_LABEL_D_DS1, Node.VALUE_LABEL_D_DS2, Node.VALUE_LABEL_D_DS3 ]
            nodeFieldParameters = [
                ( 1, [ [-1.521212e+01, 4.450771e+01,-7.208433e+01], [-7.186375e+00,-3.791370e-01, 3.251822e-01], [-3.924135e+00,-4.623427e+00, 1.726128e+00], [-5.526411e+00,-2.621673e+00, 9.974769e+00] ] ),
                ( 2, [ [-2.206311e+01, 4.300762e+01,-7.080269e+01], [-6.327741e+00,-2.545471e+00, 2.173567e+00], [-4.030182e+00, 2.007064e+00,-2.366845e+00], [-6.006330e+00,-2.116173e+00, 3.939340e+00] ] ),
                ( 3, [ [-8.376042e+00, 4.372255e+01,-7.141591e+01], [-9.540407e+00,-6.620326e+00, 1.873232e+00], [ 4.440911e+00,-5.585930e+00, 4.165240e-01], [-1.114235e+01,-7.121356e+00, 8.753019e+00] ] ),
                ( 4, [ [-1.839219e+01, 4.013799e+01,-7.098472e+01], [-9.840246e+00,-9.660336e-02,-1.138800e+00], [-2.401430e+00,-4.075278e+00, 4.578835e-01], [-1.304942e+00,-1.341127e+00, 5.233746e+00] ] ),
                ( 5, [ [-2.637894e+01, 4.294856e+01,-7.322691e+01], [-5.469101e+00, 5.098585e+00,-2.983296e+00], [-4.008092e+00,-2.420695e+00,-2.133112e+00], [-3.277114e+00,-3.875766e+00, 5.277514e+00] ] ),
                ( 6, [ [-9.177505e+00, 3.708594e+01,-7.151774e+01], [-1.107509e+01,-1.943042e+00, 2.567847e+00], [-2.999073e+00,-6.583692e+00,-1.142820e+00], [-1.092011e+01,-3.658937e+00, 6.444831e+00] ] ),
                ( 7, [ [-2.006703e+01, 3.655725e+01,-7.102010e+01], [-1.031334e+01, 9.541944e-01,-1.663138e+00], [-2.154141e+00,-3.849985e+00,-8.892684e-01], [-9.287653e-01,-8.589858e-01, 2.084014e+00] ] ),
                ( 8, [ [-2.902073e+01, 3.877625e+01,-7.450408e+01], [-7.248418e+00, 3.325240e+00,-5.063373e+00], [-2.979595e+00,-4.824469e+00,-1.468280e+00], [-2.711525e+00,-2.810995e+00, 3.160427e+00] ] ),
                ( 9, [ [-1.397666e+01, 3.177838e+01,-7.356470e+01], [-7.691685e+00, 9.363793e-01, 2.396235e+00], [-8.141847e+00,-4.926946e+00,-2.263784e+00], [-9.462745e+00,-1.852715e+00, 4.701806e+00] ] ),
                ( 10, [ [-2.264164e+01, 3.269814e+01,-7.291205e+01], [-9.382880e+00, 8.720491e-01,-1.170499e+00], [-2.593119e+00,-3.911633e+00,-2.270647e+00], [-2.015187e+00,-2.002990e+00, 1.612149e+00] ] ),
                ( 11, [ [-3.222422e+01, 3.345631e+01,-7.611384e+01], [-9.578219e+00, 6.308508e-01,-5.123917e+00], [-3.691927e+00,-4.439139e+00,-5.054025e+00], [-1.425769e+00, 2.304126e+00, 1.547833e+00] ] ),
                ( 12, [ [-2.522726e+01, 2.877137e+01,-7.556584e+01], [-1.160769e+01,-1.946227e-01,-5.435094e+00], [-2.571934e+00,-3.932447e+00,-3.029645e+00], [-6.454563e+00,-1.085342e-01, 4.140071e-01] ] ),
                ( 13, [ [-3.523452e+01, 3.181362e+01,-8.397229e+01], [-7.867269e+00, 5.876120e+00,-1.064756e+01], [-2.109020e+00, 1.044930e+00,-9.657093e+00], [-5.183881e+00, 3.181016e+00, 7.876179e-01] ] ),
                ( 14, [ [-2.102558e+01, 4.206394e+01,-6.420965e+01], [-5.553418e+00, 2.402316e+00,-1.295196e+00], [-5.858009e-01,-3.589550e+00,-1.539955e+00], [-6.027024e+00,-2.231006e+00, 5.641955e+00] ] ),
                ( 15, [ [-2.747842e+01, 4.109114e+01,-6.704352e+01], [-6.523493e+00,-3.857806e+00,-3.879657e+00], [-2.384411e+00,-8.561237e-01,-1.531362e+00], [-4.821417e+00,-1.715775e+00, 3.577116e+00] ] ),
                ( 16, [ [-1.816025e+01, 3.825148e+01,-6.444974e+01], [-1.566322e+00, 6.740138e-02,-9.993376e-01], [ 1.227501e+00,-4.553600e+00,-1.254843e+00], [-8.395218e+00,-3.801066e+00, 5.155085e+00] ] ),
                ( 17, [ [-2.187051e+01, 3.859799e+01,-6.613165e+01], [-5.837721e+00, 6.249096e-01,-2.353970e+00], [-1.098801e+00,-3.310131e+00,-2.290223e+00], [-5.531476e+00,-1.615317e+00, 3.990218e+00] ] ),
                ( 18, [ [-2.988371e+01, 3.956173e+01,-6.897426e+01], [-1.018237e+01, 1.301764e+00,-3.329188e+00], [-2.372104e+00,-2.183284e+00,-2.295396e+00], [-3.699223e+00,-2.858625e+00, 3.174315e+00] ] ),
                ( 19, [ [-1.876814e+01, 3.408153e+01,-6.636278e+01], [-2.215021e+00, 1.349937e+00,-1.946438e+00], [-1.991834e+00,-4.292227e+00,-2.814285e+00], [-8.246893e+00,-2.345103e+00, 3.856671e+00] ] ),
                ( 20, [ [-2.321688e+01, 3.551318e+01,-6.876813e+01], [-6.604131e+00, 1.465626e+00,-2.795431e+00], [-2.052966e+00,-3.653268e+00,-2.749651e+00], [-5.225624e+00,-1.094761e+00, 2.093869e+00] ] ),
                ( 21, [ [-3.205001e+01, 3.668612e+01,-7.158167e+01], [-1.100761e+01, 8.759162e-01,-2.817694e+00], [-2.259066e+00,-2.099520e+00,-2.798010e+00], [-3.298591e+00,-1.319044e+00, 2.627929e+00] ] ),
                ( 22, [ [-2.224478e+01, 3.037937e+01,-6.987815e+01], [-1.406186e+00,-2.674387e-01,-7.442391e-01], [-6.135818e+00,-3.090023e+00,-4.567557e+00], [-7.057337e+00,-9.421409e-01, 2.663266e+00] ] ),
                ( 23, [ [-2.606653e+01, 3.136538e+01,-7.146832e+01], [-6.120375e+00, 2.261699e+00,-2.374210e+00], [-3.957429e+00,-3.343041e+00,-3.136166e+00], [-4.627779e+00,-4.569677e-01, 1.109859e+00] ] ),
                ( 24, [ [-3.428387e+01, 3.535930e+01,-7.441424e+01], [-1.028337e+01, 5.708968e+00,-3.507081e+00], [-3.784048e+00,-1.256625e+00,-4.920951e+00], [-2.640959e+00, 1.416894e+00, 1.794294e+00] ] ),
                ( 25, [ [-3.094181e+01, 2.917880e+01,-7.484139e+01], [-9.300370e+00, 2.086176e+00,-6.118260e+00], [-5.611392e+00,-9.978023e-01,-3.496723e+00], [-4.917448e+00, 9.243542e-01, 1.031231e+00] ] ),
                ( 26, [ [-3.954798e+01, 3.493990e+01,-8.142448e+01], [-7.544729e+00, 8.998043e+00,-6.720785e+00], [-6.698021e+00, 4.149657e-01,-9.037261e+00], [-3.013482e+00, 2.807952e+00, 4.242737e+00] ] ),
                ( 27, [ [-2.666795e+01, 4.017639e+01,-6.060393e+01], [-4.494059e+00, 2.937279e+00,-1.626621e+00], [-2.869389e+00,-3.268159e+00,-2.835236e+00], [-6.208147e+00,-1.754972e+00, 4.382721e+00] ] ),
                ( 28, [ [-3.171690e+01, 3.957410e+01,-6.368719e+01], [-4.636712e+00,-3.427043e+00,-3.756388e+00], [-1.626492e+00,-2.856806e+00,-3.349977e+00], [-4.246674e+00,-1.930266e+00, 4.174572e+00] ] ),
                ( 29, [ [-2.481892e+01, 3.586014e+01,-6.093479e+01], [-4.090726e+00, 1.832274e+00,-2.802505e+00], [ 5.807312e-01,-4.400619e+00,-1.769502e+00], [-6.499405e+00,-2.036421e+00, 2.931141e+00] ] ),
                ( 30, [ [-2.906603e+01, 3.714204e+01,-6.382621e+01], [-4.370480e+00, 7.167386e-01,-2.957717e+00], [-1.895885e+00,-2.765363e+00,-3.578806e+00], [-6.372385e+00,-1.571669e+00, 2.897817e+00] ] ),
                ( 31, [ [-3.349082e+01, 3.727795e+01,-6.680336e+01], [-4.444022e+00,-4.414343e-01,-2.973115e+00], [-1.909024e+00,-1.713849e+00,-2.856981e+00], [-4.123922e+00,-1.640987e+00, 3.130227e+00] ] ),
                ( 32, [ [-2.553346e+01, 3.234180e+01,-6.364380e+01], [-4.633693e+00, 2.768251e+00,-5.141268e+00], [-1.569632e+00,-3.269403e+00,-3.689539e+00], [-6.596827e+00,-1.175474e+00, 2.188778e+00] ] ),
                ( 33, [ [-3.044540e+01, 3.469296e+01,-6.766019e+01], [-5.117033e+00, 1.890365e+00,-2.810345e+00], [-1.214168e+00,-2.489426e+00,-3.611730e+00], [-6.318643e+00,-8.196281e-01, 2.203310e+00] ] ),
                ( 34, [ [-3.542837e+01, 3.610130e+01,-6.933397e+01], [-4.705131e+00, 8.988482e-01,-5.212861e-01], [-2.001954e+00,-6.228268e-01,-2.970158e+00], [-3.409385e+00,-1.311581e-01, 2.563209e+00] ] ),
                ( 35, [ [-2.797530e+01, 2.980889e+01,-6.808878e+01], [-2.182022e+00, 1.509468e+00,-3.208750e+00], [-4.768569e+00,-1.477809e+00,-5.517930e+00], [-5.828999e+00, 5.849985e-02, 1.649259e+00] ] ),
                ( 36, [ [-3.149345e+01, 3.219831e+01,-7.102334e+01], [-4.755054e+00, 3.200731e+00,-2.514459e+00], [-2.339780e+00,-2.262788e+00,-3.176265e+00], [-5.561226e+00, 8.458539e-01, 1.333105e+00] ] ),
                ( 37, [ [-3.739222e+01, 3.613907e+01,-7.263648e+01], [-6.933558e+00, 4.608390e+00,-7.008112e-01], [-2.680131e+00, 4.009739e-01,-3.537840e+00], [-3.118799e+00, 8.254886e-01, 2.409736e+00] ] ),
                ( 38, [ [-3.497959e+01, 3.044791e+01,-7.363204e+01], [-7.058891e+00, 3.900672e+00,-4.490104e+00], [-4.407429e+00,-1.177863e+00,-1.941966e+00], [-3.708778e+00, 1.585819e+00, 2.115937e+00] ] ),
                ( 39, [ [-4.066474e+01, 3.636192e+01,-7.617229e+01], [-4.245591e+00, 8.423336e+00,-6.546581e-01], [-4.143201e+00, 1.284849e+00,-3.624664e+00], [-1.139390e+00, 7.955250e-01, 5.490387e+00] ] ),
                ( 40, [ [-3.329584e+01, 3.866420e+01,-5.545834e+01], [-4.941363e+00, 2.419664e+00,-9.112052e-01], [-1.238851e+00,-3.941149e+00,-5.436871e+00], [-6.032384e+00,-3.670727e+00, 1.821012e+00] ] ),
                ( 41, [ [-3.580329e+01, 3.721420e+01,-5.867602e+01], [-4.057929e-02,-2.935506e+00,-3.048349e+00], [-2.646087e+00,-8.565914e-01,-4.185859e+00], [-4.997205e+00,-1.534984e+00, 5.107150e+00] ] ),
                ( 42, [ [-3.107766e+01, 3.416595e+01,-5.856006e+01], [-3.486171e+00, 1.492645e+00,-1.803756e+00], [ 5.138955e-01,-3.745087e+00,-3.713268e+00], [-6.254637e+00,-6.057450e-01, 2.261460e+00] ] ),
                ( 43, [ [-3.452397e+01, 3.552333e+01,-6.051753e+01], [-3.400685e+00, 1.219647e+00,-2.108202e+00], [-1.212291e+00,-2.324310e+00,-4.659049e+00], [-4.032809e+00,-1.292851e+00, 3.933097e+00] ] ),
                ( 44, [ [-3.786790e+01, 3.660173e+01,-6.276886e+01], [-3.281684e+00, 9.355875e-01,-2.390458e+00], [-1.462421e+00,-3.616439e-01,-3.967058e+00], [-4.404177e+00,-3.928670e-01, 6.434201e+00] ] ),
                ( 45, [ [-3.185129e+01, 3.168561e+01,-6.196448e+01], [-4.143123e+00, 2.026435e+00,-3.138784e+00], [-1.370532e+00,-1.980270e+00,-4.147289e+00], [-6.603611e+00, 4.566651e-01, 1.080751e+00] ] ),
                ( 46, [ [-3.567143e+01, 3.391804e+01,-6.467078e+01], [-3.478417e+00, 2.429260e+00,-2.259619e+00], [-1.233216e+00,-1.247718e+00,-4.149398e+00], [-3.965957e+00,-7.374854e-01, 3.227478e+00] ] ),
                ( 47, [ [-3.878120e+01, 3.646059e+01,-6.649963e+01], [-2.721074e+00, 2.636414e+00,-1.387855e+00], [-1.297631e+00, 2.088349e-01,-3.449117e+00], [-4.373182e+00, 6.892840e-01, 4.643463e+00] ] ),
                ( 48, [ [-3.380925e+01, 3.049945e+01,-6.660717e+01], [-2.866043e+00, 1.709910e+00,-2.681238e+00], [-3.253216e+00, 1.614292e-01,-4.763869e+00], [-5.561716e+00, 1.596006e+00, 1.144862e+00] ] ),
                ( 49, [ [-3.697531e+01, 3.302393e+01,-6.877820e+01], [-3.378803e+00, 3.286982e+00,-1.579175e+00], [-1.297183e+00,-9.048069e-01,-2.992915e+00], [-3.723689e+00, 2.579964e-01, 3.062410e+00] ] ),
                ( 50, [ [-4.038905e+01, 3.698334e+01,-6.957926e+01], [-3.381158e+00, 4.541155e+00,-2.249568e-02], [-1.661996e+00,-1.160714e-01,-2.172289e+00], [-2.887030e+00, 4.711074e-01, 3.451619e+00] ] ),
                ( 51, [ [-3.806942e+01, 3.225252e+01,-7.071259e+01], [-4.435809e+00, 3.437357e+00,-2.272335e+00], [-8.540066e-01,-6.114980e-01,-8.394648e-01], [-2.157266e+00, 1.334715e+00, 4.153356e+00] ] ),
                ( 52, [ [-4.167855e+01, 3.660452e+01,-7.090386e+01], [-2.613645e+00, 4.565660e+00, 1.816538e+00], [-9.081939e-01,-6.558917e-01,-2.745062e-01], [-1.150938e+00, 4.131309e-02, 5.262634e+00] ] ),
                ( 53, [ [-3.712086e+01, 3.459287e+01,-5.647904e+01], [-5.239658e+00, 1.406317e+00, 2.415817e+00], [-3.001865e+00,-3.157201e+00,-3.736496e+00], [-1.099204e+00,-5.378461e-01, 3.923418e+00] ] ),
                ( 54, [ [-4.136481e+01, 3.674190e+01,-5.392627e+01], [-3.139045e+00, 2.794530e+00, 2.599302e+00], [-7.122152e+00, 3.902434e-01,-1.597759e+00], [-2.536368e+00, 6.593578e-01, 1.101952e+01] ] ),
                ( 55, [ [-3.842105e+01, 3.327014e+01,-6.155652e+01], [-6.193108e+00, 3.019287e+00, 1.093302e+00], [-8.735166e-01,-8.201271e-01,-4.769979e+00], [-1.480492e+00,-5.390917e-01, 2.897715e+00] ] ),
                ( 56, [ [-4.376440e+01, 3.756811e+01,-5.982675e+01], [-4.343308e+00, 5.390147e+00, 2.287101e+00], [-8.283522e-01, 1.163959e-01,-6.421428e+00], [-5.568186e+00, 1.518928e+00, 8.663351e+00] ] ),
                ( 57, [ [-3.891181e+01, 3.288930e+01,-6.582099e+01], [-4.757860e+00, 3.331474e+00, 4.292827e-01], [ 1.266292e-01,-5.101875e-01,-4.657286e+00], [-1.252553e-01,-4.423100e-01, 2.392521e+00] ] ),
                ( 58, [ [-4.309596e+01, 3.704541e+01,-6.578121e+01], [-3.535527e+00, 4.877400e+00,-3.424663e-01], [ 1.039206e+00,-5.204081e-01,-5.529833e+00], [-2.505235e+00,-3.440076e-01, 4.109127e+00] ] ),
                ( 59, [ [-9.425298e+00, 4.743204e+01,-7.079379e+01], [ 1.686893e+00, 1.004597e+01, 1.684272e-01], [-9.513750e+00, 2.424250e+00, 2.500803e+00], [-4.265432e+00, 1.219266e+00, 4.051848e+00] ] ),
                ( 60, [ [-1.791019e+01, 4.582126e+01,-7.099168e+01], [-8.838424e-01, 2.843582e+00, 1.590932e+00], [-8.314921e+00,-1.604357e+00,-2.131487e-01], [-4.913446e-01, 1.201568e+00, 2.279542e+00] ] ),
                ( 61, [ [-1.841467e+01, 4.914604e+01,-7.011403e+01], [-7.887887e-02, 3.657214e+00, 8.113702e-02], [-8.211293e+00, 9.391028e-01,-1.207972e+00], [-2.860701e-01, 9.439116e-01, 1.330079e+00] ] ),
                ( 62, [ [-1.802598e+01, 5.280329e+01,-7.090142e+01], [ 8.222192e-01, 3.511895e+00,-1.590088e+00], [-8.390747e+00, 3.425406e+00,-1.288313e+00], [-9.481736e-01,-1.306584e+00, 3.102310e+00] ] ),
                ( 63, [ [-2.520070e+01, 4.439364e+01,-7.119413e+01], [-4.320483e-01, 4.835168e+00,-2.288459e+00], [-6.146365e+00,-2.978868e+00,-2.087952e+00], [ 2.614364e-01,-1.151566e+00, 1.966614e+00] ] ),
                ( 64, [ [-2.534835e+01, 4.938512e+01,-7.275092e+01], [ 1.434659e-01, 5.072613e+00,-7.895393e-01], [-6.087037e+00,-3.685591e-01,-2.761986e+00], [-4.413071e-01, 1.586767e-01, 3.736100e+00] ] ),
                ( 65, [ [-2.493136e+01, 5.436629e+01,-7.278067e+01], [ 6.784346e-01, 4.804189e+00, 7.172685e-01], [-7.386004e+00, 5.418708e-01,-2.741683e+00], [-1.103433e+00,-1.495865e-01, 3.551706e+00] ] ),
                ( 66, [ [-2.925788e+01, 4.051962e+01,-7.463263e+01], [-7.622489e-01, 9.410005e+00,-8.265904e-01], [-5.990264e+00, 1.505578e-02,-2.702232e+00], [-2.155764e+00, 1.510486e+00, 3.408933e+00] ] ),
                ( 67, [ [-3.050453e+01, 4.854977e+01,-7.549487e+01], [-1.727596e+00, 6.607637e+00,-8.941425e-01], [-5.590513e+00,-1.864206e+00,-2.066806e+00], [-3.836033e+00, 2.578635e-01, 4.655939e+00] ] ),
                ( 68, [ [-3.243734e+01, 5.371238e+01,-7.634687e+01], [-2.106073e+00, 3.662026e+00,-7.977546e-01], [-6.266579e+00,-3.017455e+00,-2.594501e+00], [-2.543440e+00, 2.356159e-01, 4.613672e+00] ] ),
                ( 69, [ [-3.407302e+01, 4.416636e+01,-7.529981e+01], [-2.274816e+00, 2.312955e-01,-1.153579e+00], [-5.471085e+00,-1.875238e-01,-2.156906e+00], [-2.478415e+00, 2.338143e-01, 3.314896e+00] ] ),
                ( 70, [ [-3.619920e+01, 4.567152e+01,-7.667217e+01], [-1.636460e+00, 2.744344e+00,-1.418174e+00], [-4.054884e+00,-4.203444e+00,-2.322941e+00], [-2.461200e+00, 6.489905e-01, 2.433374e+00] ] ),
                ( 71, [ [-3.678766e+01, 4.935478e+01,-7.779748e+01], [ 4.314536e-01, 4.339672e+00,-7.815672e-01], [-4.024389e+00,-6.114234e+00,-2.710243e+00], [-2.889426e+00,-5.757383e-01, 2.535036e+00] ] ),
                ( 72, [ [-1.452547e+01, 4.839932e+01,-6.738809e+01], [ 5.662262e-01, 6.958898e+00, 3.705987e-01], [-5.613890e+00, 2.304632e+00,-5.469859e-01], [-5.848202e+00, 6.905085e-01, 2.677183e+00] ] ),
                ( 73, [ [-2.032986e+01, 4.624018e+01,-6.817056e+01], [-4.638831e-01, 4.266529e+00,-8.255257e-02], [-6.181004e+00,-2.768130e+00,-8.292221e-01], [-4.226606e+00,-6.605820e-01, 2.799524e+00] ] ),
                ( 74, [ [-2.053314e+01, 4.977990e+01,-6.813399e+01], [ 5.870025e-02, 2.800244e+00, 1.559377e-01], [-6.298019e+00, 4.140666e-01,-9.347363e-01], [-3.863928e+00, 3.693588e-02, 2.225765e+00] ] ),
                ( 75, [ [-2.032928e+01, 5.181531e+01,-6.792738e+01], [ 3.426253e-01, 1.247297e+00, 2.525687e-01], [-6.589253e+00, 2.932485e+00,-1.081270e+00], [-3.571296e+00,-5.493098e-01, 2.560690e+00] ] ),
                ( 76, [ [-2.641363e+01, 4.306192e+01,-6.898285e+01], [-6.778149e-01, 6.742149e+00,-2.642307e-01], [-5.283135e+00,-2.201777e+00,-1.675867e+00], [-2.746796e+00,-1.249790e+00, 2.008366e+00] ] ),
                ( 77, [ [-2.692290e+01, 4.916899e+01,-6.923480e+01], [-3.405766e-01, 5.470514e+00,-2.396114e-01], [-5.956061e+00,-6.021300e-01,-1.237758e+00], [-2.675439e+00,-6.025700e-01, 3.022230e+00] ] ),
                ( 78, [ [-2.712173e+01, 5.399812e+01,-6.945858e+01], [-5.705752e-02, 4.185850e+00,-2.078545e-01], [-6.707762e+00, 9.111295e-01,-1.799721e+00], [-3.216582e+00,-5.785213e-01, 2.897012e+00] ] ),
                ( 79, [ [-3.063891e+01, 4.176539e+01,-7.113049e+01], [-2.172101e+00, 7.548354e+00, 1.349781e+00], [-5.239597e+00, 6.091480e-01,-1.355001e+00], [-5.523087e-01, 9.432259e-01, 3.509976e+00] ] ),
                ( 80, [ [-3.242428e+01, 4.858218e+01,-7.057653e+01], [-1.383520e+00, 6.032685e+00,-2.512560e-01], [-5.427864e+00,-1.324783e+00,-1.714273e+00], [ 3.472271e-01,-2.166177e-01, 4.755089e+00] ] ),
                ( 81, [ [-3.343277e+01, 5.370501e+01,-7.141772e+01], [-6.228497e-01, 4.142409e+00,-1.407153e+00], [-6.092934e+00,-2.339531e+00,-2.146373e+00], [ 7.408192e-01,-2.677938e-01, 4.903172e+00] ] ),
                ( 82, [ [-3.571183e+01, 4.445981e+01,-7.120044e+01], [-2.221727e+00, 1.491289e+00,-1.604635e+00], [-5.368380e+00,-3.702201e-01,-1.554509e+00], [-6.859796e-01, 3.424040e-01, 4.732405e+00] ] ),
                ( 83, [ [-3.760078e+01, 4.652510e+01,-7.262693e+01], [-1.481629e+00, 2.589255e+00,-1.194505e+00], [-3.910235e+00,-3.422965e+00,-1.841190e+00], [-1.030264e-02, 9.707152e-01, 5.329198e+00] ] ),
                ( 84, [ [-3.856680e+01, 4.948552e+01,-7.350499e+01], [-4.369798e-01, 3.232237e+00,-5.448675e-01], [-4.010763e+00,-5.595257e+00,-1.794914e+00], [-1.738115e-01, 9.358591e-01, 5.615618e+00] ] ),
                ( 85, [ [-2.095724e+01, 4.876668e+01,-6.559379e+01], [-1.464726e-01, 6.355197e+00,-5.478180e-02], [-5.329340e+00, 5.918505e-02,-9.033279e-01], [-6.276167e+00, 1.468087e-01, 2.076621e+00] ] ),
                ( 86, [ [-2.599185e+01, 4.404518e+01,-6.642288e+01], [-6.698228e-01, 5.174152e+00,-1.168089e-01], [-5.104395e+00,-3.198707e+00,-1.354470e+00], [-4.895504e+00,-2.199611e+00, 1.782665e+00] ] ),
                ( 87, [ [-2.600667e+01, 4.865601e+01,-6.643733e+01], [ 6.486694e-01, 3.981952e+00, 8.938885e-02], [-4.765502e+00,-2.805697e-01,-7.830711e-01], [-5.375373e+00,-9.637573e-01, 1.793135e+00] ] ),
                ( 88, [ [-2.490920e+01, 5.189351e+01,-6.627686e+01], [ 1.498699e+00, 2.416348e+00, 2.244274e-01], [-5.405153e+00, 2.503900e+00,-9.354068e-01], [-4.884241e+00,-1.728219e-02, 1.849759e+00] ] ),
                ( 89, [ [-3.043903e+01, 4.236095e+01,-6.795972e+01], [ 4.259076e-01, 6.204282e+00, 1.343793e+00], [-2.409576e+00,-1.312773e+00,-3.220570e+00], [-4.751873e+00, 7.115855e-01, 1.412026e+00] ] ),
                ( 90, [ [-3.042882e+01, 4.822974e+01,-6.715170e+01], [-4.086221e-01, 5.487638e+00, 2.623574e-01], [-3.598959e+00,-2.100647e-02,-2.437397e+00], [-4.474002e+00,-9.231402e-01, 1.402151e+00] ] ),
                ( 91, [ [-3.118463e+01, 5.323749e+01,-6.736390e+01], [-1.090154e+00, 4.475136e+00,-6.787603e-01], [-4.582122e+00, 9.719688e-01,-3.252578e+00], [-4.897244e+00,-1.385697e+00, 1.079055e+00] ] ),
                ( 92, [ [-2.704347e+01, 4.869775e+01,-6.325485e+01], [-1.083045e+00, 6.312426e+00,-1.163099e-01], [-4.021741e+00,-1.024722e+00,-8.620486e-01], [-5.051716e+00,-3.276184e-01, 2.387622e+00] ] ),
                ( 93, [ [-3.009697e+01, 4.192876e+01,-6.468329e+01], [-2.486804e+00, 6.581855e+00,-3.134274e-02], [-6.511911e+00,-2.213026e+00,-2.381379e+00], [-4.430054e+00,-1.844180e+00, 2.898646e+00] ] ),
                ( 94, [ [-3.124415e+01, 4.785401e+01,-6.456596e+01], [ 2.536364e-01, 5.106686e+00, 2.667740e-01], [-4.351451e+00,-6.555810e-01,-1.754134e+00], [-5.170928e+00,-7.722713e-01, 3.026663e+00] ] ),
                ( 95, [ [-3.006270e+01, 5.176820e+01,-6.422987e+01], [ 1.949079e+00, 2.515000e+00, 3.746182e-01], [-5.253117e+00, 2.024454e+00,-2.336767e+00], [-5.283998e+00,-6.464689e-01, 2.394059e+00] ] ),
                ( 96, [ [-3.522505e+01, 4.481750e+01,-6.630665e+01], [-1.963588e-01, 1.979892e+00,-2.428528e-01], [-5.938495e+00, 1.989866e-01, 4.214642e-01], [ 3.332209e+00,-1.411372e+00, 4.548079e+00] ] ),
                ( 97, [ [-3.562722e+01, 4.742796e+01,-6.675754e+01], [-6.074366e-01, 3.235537e+00,-6.582537e-01], [-5.530366e+00,-2.363958e+00, 1.048823e-01], [ 3.703953e+00, 7.080289e-01, 4.241669e+00] ] ),
                ( 98, [ [-3.647989e+01, 5.126514e+01,-6.765886e+01], [-1.097081e+00, 4.435497e+00,-1.143529e+00], [-5.282935e+00,-3.646672e+00,-4.447151e-01], [ 4.541907e+00, 1.298586e+00, 5.186268e+00] ] ),
                ( 99, [ [-3.723886e+01, 4.080948e+01,-7.759706e+01], [-4.995624e-01,-1.982545e-01,-1.908493e+00], [-2.649432e+00,-4.562346e+00,-4.088157e+00], [-2.096311e+00, 4.678492e-01, 3.064836e+00] ] ),
                ( 100, [ [-3.810565e+01, 4.092727e+01,-7.967215e+01], [-1.220808e+00, 4.390770e-01,-2.191220e+00], [-1.198803e+00,-5.127796e+00,-3.374940e+00], [-2.240670e+00, 1.620569e+00, 4.823362e+00] ] ),
                ( 101, [ [-3.968601e+01, 4.173791e+01,-8.186016e+01], [-1.914302e+00, 1.166596e+00,-2.155957e+00], [-5.800399e-01,-7.400540e+00,-2.796138e+00], [-2.048581e+00, 3.143089e-01, 6.970346e+00] ] ),
                ( 102, [ [-3.849219e+01, 3.558152e+01,-8.332319e+01], [-4.785020e+00, 1.194200e-01,-2.111820e+00], [ 4.212091e-01,-5.504835e+00,-3.885587e+00], [-3.507344e+00, 1.599286e+00, 9.947141e+00] ] ),
                ( 103, [ [-3.920754e+01, 4.147258e+01,-7.347469e+01], [-5.297059e-01, 1.007913e+00,-4.637259e-01], [-2.918548e+00,-4.091138e+00,-1.821173e+00], [-1.812419e+00, 8.519613e-01, 5.138047e+00] ] ),
                ( 104, [ [-3.995620e+01, 4.238006e+01,-7.406185e+01], [-9.535085e-01, 7.802074e-01,-6.982455e-01], [-1.901026e+00,-4.987183e+00,-1.064910e+00], [-1.438722e+00, 1.269310e+00, 6.350509e+00] ] ),
                ( 105, [ [-4.109110e+01, 4.297218e+01,-7.484851e+01], [-1.293210e+00, 3.969477e-01,-8.597296e-01], [-1.338304e+00,-6.716948e+00,-5.574870e-01], [-7.280222e-01, 2.149080e+00, 6.938710e+00] ] ),
                ( 106, [ [-4.121210e+01, 3.672630e+01,-7.463147e+01], [-4.694660e+00, 2.713000e-01,-3.244060e+00], [-6.008625e-01,-6.217768e+00,-7.312374e-02], [-1.927128e+00, 6.878464e-01, 7.421162e+00] ] ),
                ( 107, [ [-4.065986e+01, 4.251801e+01,-6.734039e+01], [-6.356085e-03,-9.617624e-03, 4.701374e-02], [-4.055384e+00,-4.389823e+00,-1.269758e+00], [-1.157177e+00, 3.035026e-01, 6.082182e+00] ] ),
                ( 108, [ [-4.086738e+01, 4.339549e+01,-6.703121e+01], [-3.158701e-01, 1.905018e+00,-1.151651e-01], [-3.711875e+00,-5.582133e+00,-9.662611e-01], [-1.247170e+00, 3.741272e-01, 6.789976e+00] ] ),
                ( 109, [ [-4.111271e+01, 4.596078e+01,-6.823760e+01], [-1.684599e-01, 3.108749e+00,-2.214407e+00], [-3.525677e+00,-7.496713e+00,-5.121220e-01], [-9.219320e-01, 4.109531e-01, 6.540887e+00] ] ),
                ( 110, [ [-4.247560e+01, 3.705957e+01,-6.855995e+01], [-4.947410e+00,-3.310000e-02,-2.284290e+00], [ 4.610384e-01,-6.597484e+00,-1.946030e+00], [-1.180967e+00, 5.662236e-01, 6.065690e+00] ] ),
                ( 111, [ [-3.107527e+01, 4.820321e+01,-6.096465e+01], [-2.240678e+00, 6.735907e+00,-7.313468e-01], [-5.689527e+00,-9.126160e-01, 8.864319e-01], [-4.535223e+00,-7.788537e-01, 2.815455e+00] ] ),
                ( 112, [ [-3.440949e+01, 4.064841e+01,-6.066567e+01], [-3.009120e+00, 7.617116e+00, 1.225668e+00], [-7.311831e+00,-1.140424e+00,-1.529029e-01], [-4.174933e+00, 2.904484e+00, 4.809097e+00] ] ),
                ( 113, [ [-3.602533e+01, 4.716259e+01,-6.040096e+01], [-1.411703e-01, 5.205220e+00,-7.293994e-01], [-4.192611e+00,-1.165740e+00, 2.381465e-01], [-2.002748e+00,-3.522853e-01, 4.242997e+00] ] ),
                ( 114, [ [-3.532122e+01, 5.056765e+01,-6.152977e+01], [ 1.280518e+00, 1.326395e+00,-1.263022e+00], [-5.023691e+00, 2.466624e-01,-8.009737e-01], [-3.390136e+00,-2.789028e+00, 3.906366e+00] ] ),
                ( 115, [ [-3.786389e+01, 4.468804e+01,-6.097787e+01], [-1.168653e+00, 6.353745e-02, 1.110879e+00], [-5.213370e+00, 5.626295e-01,-5.802749e-01], [-2.731682e+00, 5.566329e-01, 5.715546e+00] ] ),
                ( 116, [ [-3.943051e+01, 4.597707e+01,-6.040843e+01], [-1.381773e+00, 2.482836e+00,-5.260013e-01], [-3.324225e+00,-2.015014e+00,-9.210443e-02], [-2.213022e+00,-6.365357e-01, 5.836547e+00] ] ),
                ( 117, [ [-3.966976e+01, 4.879770e+01,-6.232600e+01], [ 8.069878e-01, 2.821749e+00,-2.956398e+00], [-3.953092e+00,-3.311090e+00,-7.247549e-01], [-2.179187e+00,-2.826661e+00, 6.406533e+00] ] ),
                ( 118, [ [-4.151471e+01, 4.211961e+01,-6.144263e+01], [-3.841254e-01, 1.432505e-01, 1.315879e+00], [-3.137275e+00,-3.679893e+00,-8.264038e-01], [-2.138037e+00,-9.721796e-01, 6.545196e+00] ] ),
                ( 119, [ [-4.240331e+01, 4.316742e+01,-6.059044e+01], [-1.069995e+00, 1.831884e+00,-7.182582e-01], [-2.448645e+00,-4.241229e+00,-1.001259e+00], [-2.066361e+00,-1.481951e+00, 5.862246e+00] ] ),
                ( 120, [ [-4.260682e+01, 4.421486e+01,-6.286564e+01], [ 5.274753e-01, 2.092442e-01,-3.048924e+00], [-2.189838e+00,-5.749231e+00,-1.518746e-01], [-1.943011e+00,-2.702306e+00, 6.662484e+00] ] ),
                ( 121, [ [-4.357013e+01, 3.785620e+01,-6.252118e+01], [-3.541510e+00, 5.118870e+00,-8.486500e-01], [ 1.099590e-01,-6.101245e+00,-2.734732e+00], [-1.208493e+00, 1.735204e+00, 6.650178e+00] ] ),
                ( 122, [ [-3.605698e+01, 4.708828e+01,-5.759312e+01], [-3.702595e-01, 6.534389e+00,-1.362164e+00], [-4.699394e+00,-1.153202e+00, 2.687329e+00], [ 9.925459e-01, 1.042292e-01, 7.024940e-01] ] ),
                ( 123, [ [-4.034850e+01, 4.594820e+01,-5.556175e+01], [-3.365630e+00, 6.497863e+00,-5.907998e-01], [-5.002012e+00,-3.244918e+00, 1.349685e+00], [ 3.554415e-01, 5.456364e-01, 3.635856e+00] ] ),
                ( 124, [ [-4.482451e+01, 4.062741e+01,-5.563817e+01], [-5.141080e+00, 6.340131e+00,-2.153529e+00], [-2.300341e+00,-5.521621e+00,-4.554053e+00], [-2.673445e+00,-3.465095e+00, 3.892903e+00] ] ),
                ( 125, [ [-3.121546e+01, 3.607329e+01,-7.564900e+01], [-1.153213e+00,-4.478280e-01,-9.494107e-01], [ 6.519669e-01,-6.051103e+00,-8.993594e-01], [-1.302733e+00,-4.531383e-01, 1.673012e+00] ] ),
                ( 126, [ [-3.231610e+01, 3.643107e+01,-7.643706e+01], [-5.715879e-01, 1.348419e+00,-2.344365e-01], [ 4.178224e-01,-2.548073e+00,-8.730026e-01], [-1.066918e+00,-5.374588e-01, 9.969980e-01] ] ),
                ( 127, [ [-3.191553e+01, 3.761264e+01,-7.595300e+01], [-5.279650e-01, 2.161835e+00, 2.816780e-01], [-2.068905e+00,-7.732084e-01,-1.696481e+00], [-2.152191e+00,-6.468383e-01,-3.847682e-01] ] ),
                ( 128, [ [-3.389443e+01, 3.977724e+01,-7.636566e+01], [-3.131047e+00, 1.978556e+00,-1.010563e+00], [-1.476535e+00,-1.964725e-01,-9.415442e-01], [-2.051396e-01,-1.970202e+00,-3.141636e-01] ] ),
                ( 129, [ [-3.087853e+01, 3.294614e+01,-7.611378e+01], [-1.204917e+00, 1.688541e-01,-1.229770e+00], [ 2.189311e-02,-2.031966e-01,-3.020057e-02], [-2.059253e+00, 6.542061e-01, 1.532505e+00] ] ),
                ( 130, [ [-3.216135e+01, 3.293804e+01,-7.741630e+01], [-1.240800e+00, 4.230130e+00,-2.890068e-01], [-1.352673e+00,-1.861847e-01,-1.367065e+00], [-2.294986e+00, 1.309871e+00, 1.110790e+00] ] ),
                ( 131, [ [-3.358316e+01, 3.665512e+01,-7.758382e+01], [-1.596326e+00, 3.181871e+00,-4.451572e-02], [-1.237161e+00,-1.130912e+00,-1.541220e+00], [-1.201399e+00,-7.635079e-01, 6.128864e-01] ] ),
                ( 132, [ [-3.525472e+01, 3.929376e+01,-7.753006e+01], [-1.727747e+00, 2.072560e+00, 1.503824e-01], [-1.203020e+00,-7.650287e-01,-1.361096e+00], [ 1.444090e-01,-1.357447e+00,-4.157790e-03] ] ),
                ( 133, [ [-3.356689e+01, 3.255750e+01,-7.883008e+01], [-3.555154e-01, 2.832919e+00,-1.691992e-01], [-1.197124e+00,-3.185860e-01,-1.614149e+00], [-2.049427e+00, 1.987389e+00, 1.203619e+00] ] ),
                ( 134, [ [-3.440927e+01, 3.544684e+01,-7.896998e+01], [-1.323391e+00, 2.899153e+00,-1.078319e-01], [-1.016743e+00,-9.388040e-01,-1.543156e+00], [-1.386390e+00, 6.333526e-02, 1.372461e+00] ] ),
                ( 135, [ [-3.621979e+01, 3.825579e+01,-7.903850e+01], [-2.270295e+00, 2.686370e+00,-2.884395e-02], [-7.906717e-01,-9.943469e-01,-1.475594e+00], [ 1.962460e-01,-1.059912e+00, 7.328896e-01] ] ),
                ( 136, [ [-3.452567e+01, 3.230884e+01,-8.060494e+01], [-9.600622e-01, 2.525665e+00,-9.672786e-02], [-8.868929e-01,-2.141992e-01,-1.828135e+00], [-2.389465e+00, 2.548544e+00, 2.000046e+00] ] ),
                ( 137, [ [-3.558671e+01, 3.482706e+01,-8.061819e+01], [-1.160611e+00, 2.507080e+00, 7.036098e-02], [-1.056154e+00,-5.888825e-01,-1.592971e+00], [-1.128214e+00, 4.595204e-01, 1.924217e+00] ] ),
                ( 138, [ [-3.684547e+01, 3.731497e+01,-8.046260e+01], [-1.355047e+00, 2.465352e+00, 2.404873e-01], [-6.816578e-01,-9.278770e-01,-1.550921e+00], [ 1.300699e-01,-8.128497e-01, 1.339287e+00] ] ),
                ( 139, [ [-3.533584e+01, 3.213039e+01,-8.247777e+01], [-1.243492e+00, 2.129207e+00, 5.009066e-01], [-6.703348e-01, 2.673140e-02,-1.709763e+00], [-2.959296e+00, 3.116249e+00, 2.635335e+00] ] ),
                ( 140, [ [-3.652272e+01, 3.427268e+01,-8.214289e+01], [-1.126299e+00, 2.148614e+00, 1.672494e-01], [-6.491441e-01,-6.203080e-01,-1.669048e+00], [-1.395913e+00, 1.590543e+00, 1.935645e+00] ] ),
                ( 141, [ [-3.758244e+01, 3.641201e+01,-8.213875e+01], [-9.896524e-01, 2.122539e+00,-1.583994e-01], [-5.424919e-01,-1.100676e+00,-1.504497e+00], [-6.653229e-02,-1.222666e-01, 1.508071e+00] ] ),
                ( 142, [ [-3.587041e+01, 3.231857e+01,-8.399451e+01], [-9.214449e-01, 1.138007e+00,-6.799505e-02], [-3.942183e-01, 3.456148e-01,-1.308535e+00], [-2.573424e+00, 1.566113e+00, 6.460009e-01] ] ),
                ( 143, [ [-3.685500e+01, 3.360864e+01,-8.389593e+01], [-1.040788e+00, 1.433554e+00, 2.656599e-01], [-1.513339e-02,-6.941901e-01,-1.801777e+00], [-1.973998e+00, 1.622097e+00, 1.010555e+00] ] ),
                ( 144, [ [-3.793164e+01, 3.517087e+01,-8.343785e+01], [-1.107686e+00, 1.683583e+00, 6.476853e-01], [-1.529711e-01,-1.355486e+00,-1.073039e+00], [-1.016908e+00, 3.866312e-01, 6.853624e-01] ] ),
                ( 145, [ [-3.306414e+01, 3.576473e+01,-7.404843e+01], [-8.178052e-01, 1.109174e-01,-1.586927e+00], [-2.792600e-01,-3.089362e+00,-9.169267e-01], [-2.358794e+00,-1.515177e-01, 1.482110e+00] ] ),
                ( 146, [ [-3.377535e+01, 3.621150e+01,-7.528776e+01], [-5.599486e-01, 7.765646e-01,-8.050592e-01], [-7.969015e-01,-2.074261e+00,-7.949621e-01], [-1.811721e+00, 1.183987e-01, 1.264353e+00] ] ),
                ( 147, [ [-3.412238e+01, 3.704141e+01,-7.564662e+01], [-3.934372e-01, 7.976267e-01,-3.153507e-01], [-9.448924e-01,-1.111866e+00,-9.020752e-01], [-2.115305e+00,-4.516804e-01, 1.023666e+00] ] ),
                ( 148, [ [-3.455003e+01, 3.779190e+01,-7.591499e+01], [-4.602009e-01, 7.008224e-01,-2.205927e-01], [-1.047412e+00, 6.334768e-02,-8.802043e-01], [-1.077789e+00,-1.728958e+00, 1.258800e+00] ] ),
                ( 149, [ [-3.324684e+01, 3.374358e+01,-7.464831e+01], [-1.271002e+00, 1.025827e+00,-1.650964e+00], [-8.613997e-02,-9.529381e-01,-2.828333e-01], [-2.667555e+00, 9.375565e-01, 1.391133e+00] ] ),
                ( 150, [ [-3.448152e+01, 3.440677e+01,-7.624704e+01], [-5.721290e-01, 1.799661e+00,-4.064622e-01], [-1.179538e+00, 2.853629e-01,-1.522050e+00], [-2.342713e+00, 1.626082e+00, 1.226457e+00] ] ),
                ( 151, [ [-3.503657e+01, 3.611511e+01,-7.661036e+01], [-5.378931e-01, 1.616774e+00,-3.201225e-01], [-8.761709e-01,-7.321240e-01,-1.018420e+00], [-1.662776e+00,-2.894207e-01, 1.312285e+00] ] ),
                ( 152, [ [-3.555568e+01, 3.763975e+01,-7.688988e+01], [-5.002308e-01, 1.432231e+00,-2.388716e-01], [-9.437153e-01,-3.688678e-01,-1.052623e+00], [-7.661275e-01,-1.764466e+00, 1.285088e+00] ] ),
                ( 153, [ [-3.555847e+01, 3.436699e+01,-7.763216e+01], [-1.815247e-01, 1.038868e+00, 1.187566e-01], [-1.098390e+00, 6.631036e-03,-1.369925e+00], [-1.931877e+00, 1.629791e+00, 1.191126e+00] ] ),
                ( 154, [ [-3.585805e+01, 3.557253e+01,-7.765278e+01], [-4.153109e-01, 1.358910e+00,-1.615173e-01], [-9.136002e-01,-4.376470e-01,-1.205045e+00], [-1.508587e+00, 1.879229e-01, 1.259389e+00] ] ),
                ( 155, [ [-3.639985e+01, 3.705330e+01,-7.798777e+01], [-6.644626e-01, 1.593454e+00,-5.055513e-01], [-7.957090e-01,-5.941194e-01,-1.123318e+00], [-5.660769e-01,-1.292602e+00, 1.332286e+00] ] ),
                ( 156, [ [-3.667468e+01, 3.441986e+01,-7.898251e+01], [-1.190362e-01, 6.890713e-01, 1.319975e-02], [-1.123441e+00, 1.111266e-01,-1.397254e+00], [-1.904719e+00, 1.669408e+00, 1.241596e+00] ] ),
                ( 157, [ [-3.685001e+01, 3.527483e+01,-7.901014e+01], [-2.313879e-01, 1.019503e+00,-6.848591e-02], [-1.044143e+00,-8.057244e-02,-1.432745e+00], [-1.383430e+00, 4.299228e-01, 1.266381e+00] ] ),
                ( 158, [ [-3.714389e+01, 3.645434e+01,-7.913106e+01], [-3.561254e-01, 1.338589e+00,-1.732341e-01], [-8.223428e-01,-4.587873e-01,-1.332594e+00], [-7.335471e-01,-8.669132e-01, 1.255413e+00] ] ),
                ( 159, [ [-3.779338e+01, 3.459090e+01,-8.041365e+01], [-1.398791e-01, 8.801090e-01,-2.858043e-02], [-8.943581e-01,-1.753947e-01,-2.037241e+00], [-1.953988e+00, 1.802888e+00, 1.491305e+00] ] ),
                ( 160, [ [-3.792220e+01, 3.542963e+01,-8.048543e+01], [-1.174894e-01, 7.956428e-01,-1.149241e-01], [-9.401532e-01,-1.383006e-01,-1.848537e+00], [-1.387188e+00, 7.052670e-01, 1.357276e+00] ] ),
                ( 161, [ [-3.802838e+01, 3.617921e+01,-8.063848e+01], [-9.462599e-02, 7.016881e-01,-1.906810e-01], [-9.123103e-01,-4.695246e-01,-1.676574e+00], [-8.224793e-01,-3.380465e-01, 1.427295e+00] ] ),
                ( 162, [ [-3.818550e+01, 3.395709e+01,-8.290032e+01], [-4.477456e-01, 1.191694e+00, 3.231333e-01], [ 1.059656e-01,-1.050983e+00,-2.825221e+00], [-2.004785e+00, 1.679300e+00, 1.529326e+00] ] ),
                ( 163, [ [-3.860657e+01, 3.493467e+01,-8.262946e+01], [-3.936061e-01, 7.613816e-01, 2.180245e-01], [-4.187863e-01,-8.321476e-01,-2.383766e+00], [-1.495665e+00, 1.002464e+00, 1.505262e+00] ] ),
                ( 164, [ [-3.894419e+01, 3.548836e+01,-8.246538e+01], [-2.791197e-01, 3.428781e-01, 1.091462e-01], [-9.154659e-01,-9.083557e-01,-1.968937e+00], [-9.863831e-01, 2.400600e-01, 1.244890e+00] ] ),
                ( 165, [ [-3.589691e+01, 3.582017e+01,-7.281756e+01], [ 2.373357e-02, 8.447979e-01,-1.050447e+00], [-4.937504e-01,-1.581750e+00,-8.855236e-01], [-3.261568e+00, 2.588128e-01, 9.662461e-01] ] ),
                ( 166, [ [-3.587014e+01, 3.677305e+01,-7.400240e+01], [ 2.980643e-02, 1.060962e+00,-1.319233e+00], [-1.057835e+00,-6.625690e-01,-6.692367e-01], [-1.303457e+00,-8.031032e-02, 2.138823e+00] ] ),
                ( 167, [ [-3.620751e+01, 3.482515e+01,-7.337461e+01], [-5.815097e-01, 1.288475e+00,-1.517043e+00], [-1.274496e-01,-4.082902e-01,-2.285764e-01], [-3.244258e+00, 1.221995e+00, 1.152882e+00] ] ),
                ( 168, [ [-3.682042e+01, 3.618320e+01,-7.497357e+01], [-6.443103e-01, 1.427625e+00,-1.680877e+00], [-8.075407e-01,-4.950933e-01,-1.250844e+00], [-1.876674e+00, 4.192891e-01, 1.932209e+00] ] ),
                ( 169, [ [-3.742147e+01, 3.582269e+01,-7.645658e+01], [ 8.709247e-02, 7.630485e-01,-2.475882e-03], [-7.237295e-01,-2.649254e-01,-1.566228e+00], [-1.615343e+00, 3.118354e-01, 1.130973e+00] ] ),
                ( 170, [ [-3.826921e+01, 3.566997e+01,-7.808671e+01], [ 6.381504e-02, 8.804557e-01, 1.235703e-02], [-8.836113e-01,-2.234920e-02,-1.505464e+00], [-1.421948e+00, 3.521785e-01, 5.673045e-01] ] ),
                ( 171, [ [-3.917115e+01, 3.576421e+01,-7.945775e+01], [-1.802015e-01, 1.487967e+00, 5.274541e-02], [-7.779048e-01,-2.804270e-02,-1.470242e+00], [-1.067990e+00,-3.471600e-02, 6.712377e-01] ] ),
                ( 172, [ [-3.980794e+01, 3.561176e+01,-8.100213e+01], [-5.025888e-01, 1.336645e+00, 1.907227e-01], [-4.910499e-01,-2.742901e-01,-1.603444e+00], [-8.818993e-01, 3.419371e-01, 1.700848e+00] ] )

            ]

            # The number of the elements in the left mouse lung
            elementsCount1 = 2
            elementsCount2 = 4
            elementsCount3 = 4

            # The number of the elements in the diaphragmatic animal lung
            diaphragmaticElementsCount1 = 3
            diaphragmaticElementsCount2 = 5
            diaphragmaticElementsCount3 = 2

            # Create nodes
            nodeIndex = 0
            nodeIdentifier = 1
            leftNodeIds = []
            lowerRightNodeIds = []
            upperRightNodeIds = []
            diaphragmaticNodeIds = []

            # Left lung nodes
            d1 = [0.5, 0.0, 0.0]
            d2 = [0.0, 0.5, 0.0]
            d3 = [0.0, 0.0, 1.0]
            for n3 in range(elementsCount3 + 1):
                leftNodeIds.append([])
                for n2 in range(elementsCount2 + 1):
                    leftNodeIds[n3].append([])
                    for n1 in range(elementsCount1 + 1):
                        leftNodeIds[n3][n2].append(None)
                        if n3 < elementsCount3:
                            if (n1 == 0) and ((n2 == 0) or (n2 == elementsCount2)):
                                continue
                        else:
                            if (n2 == 0) or (n2 == elementsCount2) or (n1 == 0):
                                continue
                        node = nodes.createNode(nodeIdentifier, nodetemplate)
                        cache.setNode(node)
                        if generateParameters:
                            x = [0.5 * (n1 - 1), 0.5 * (n2 - 1), 1.0 * n3]
                        else:
                            nodeParameters = nodeFieldParameters[nodeIndex]
                            nodeIndex += 1
                            assert nodeIdentifier == nodeParameters[0]
                            x, d1, d2, d3 = nodeParameters[1]
                        coordinates.setNodeParameters(cache, -1, Node.VALUE_LABEL_VALUE, 1, x)
                        coordinates.setNodeParameters(cache, -1, Node.VALUE_LABEL_D_DS1, 1, d1)
                        coordinates.setNodeParameters(cache, -1, Node.VALUE_LABEL_D_DS2, 1, d2)
                        coordinates.setNodeParameters(cache, -1, Node.VALUE_LABEL_D_DS3, 1, d3)
                        leftNodeIds[n3][n2][n1] = nodeIdentifier
                        nodeIdentifier += 1

            # Right lung nodes
            nodeIndex, nodeIdentifier = getLungNodes(rightLung, cache, coordinates, generateParameters,
                                                     nodes, nodetemplate, nodeFieldParameters,
                                                     lElementsCount1, lElementsCount2, lElementsCount3,
                                                     uElementsCount1, uElementsCount2, uElementsCount3,
                                                     lowerRightNodeIds, upperRightNodeIds, nodeIndex, nodeIdentifier)

            # Diaphragm lung nodes
            nodeIndex, nodeIdentifier = getDiaphragmaticLungNodes(cache, coordinates, generateParameters,
                                      nodes, nodetemplate, nodeFieldParameters,
                                      diaphragmaticElementsCount1, diaphragmaticElementsCount2,
                                      diaphragmaticElementsCount3,
                                      diaphragmaticNodeIds, nodeIndex, nodeIdentifier)

            # Create elements
            elementIdentifier = 1

            # Left lung elements
            for e3 in range(elementsCount3):
                for e2 in range(elementsCount2):
                    for e1 in range(elementsCount1):
                        eft = eftRegular
                        nodeIdentifiers = [
                            leftNodeIds[e3][e2][e1], leftNodeIds[e3][e2][e1 + 1], leftNodeIds[e3][e2 + 1][e1],
                            leftNodeIds[e3][e2 + 1][e1 + 1],
                            leftNodeIds[e3 + 1][e2][e1], leftNodeIds[e3 + 1][e2][e1 + 1],
                            leftNodeIds[e3 + 1][e2 + 1][e1], leftNodeIds[e3 + 1][e2 + 1][e1 + 1]]

                        if (e3 < elementsCount3 - 1):
                            if (e2 == 0) and (e1 == 0):
                                # Back wedge elements
                                nodeIdentifiers.pop(4)
                                nodeIdentifiers.pop(0)
                                eft = eftWedgeCollapseXi1_15
                            elif (e2 == elementsCount2 - 1) and (e1 == 0):
                                # Front wedge elements
                                nodeIdentifiers.pop(6)
                                nodeIdentifiers.pop(2)
                                eft = eftWedgeCollapseXi1_37
                        else:
                            if (e2 == 0) and (e1 == 1):
                                # Top back wedge elements
                                nodeIdentifiers.pop(5)
                                nodeIdentifiers.pop(4)
                                eft = eftWedgeCollapseXi2_56
                            elif (e2 == elementsCount2 - 1) and (e1 == 1):
                                # Top front wedge elements
                                nodeIdentifiers.pop(7)
                                nodeIdentifiers.pop(6)
                                eft = eftWedgeCollapseXi2_78
                            elif ((0 < e2 < (elementsCount2 - 1))) and (e1 == 0):
                                # Top middle back wedge element
                                nodeIdentifiers.pop(6)
                                nodeIdentifiers.pop(4)
                                eft = eftWedgeCollapseXi1_57
                            elif (e2 == 0) and (e1 == 0):
                                # Top back tetrahedron element
                                nodeIdentifiers.pop(6)
                                nodeIdentifiers.pop(5)
                                nodeIdentifiers.pop(4)
                                nodeIdentifiers.pop(0)
                                eft = eftTetCollapseXi1Xi2_82
                            elif (e2 == elementsCount2 - 1) and (e1 == 0):
                                # Top front tetrahedron element
                                nodeIdentifiers.pop(7)
                                nodeIdentifiers.pop(6)
                                nodeIdentifiers.pop(4)
                                nodeIdentifiers.pop(2)
                                eft = eftTetCollapseXi1Xi2_63

                        if eft is eftRegular:
                            element = mesh.createElement(elementIdentifier, elementtemplateRegular)
                        else:
                            elementtemplateCustom.defineField(coordinates, -1, eft)
                            element = mesh.createElement(elementIdentifier, elementtemplateCustom)
                        element.setNodesByIdentifier(eft, nodeIdentifiers)
                        if eft.getNumberOfLocalScaleFactors() == 1:
                            element.setScaleFactors(eft, [-1.0])
                        elementIdentifier += 1
                        leftLungMeshGroup.addElement(element)
                        lungMeshGroup.addElement(element)

            # Right lung elements
            elementIdentifier = getLungElements(coordinates, eftfactory, eftRegular, elementtemplateRegular,
                                                elementtemplateCustom, mesh, lungMeshGroup,
                                                rightLungMeshGroup, lowerRightLungMeshGroup, middleRightLungMeshGroup,
                                                upperRightLungMeshGroup,
                                                lElementsCount1, lElementsCount2, lElementsCount3,
                                                uElementsCount1, uElementsCount2, uElementsCount3,
                                                lowerRightNodeIds, upperRightNodeIds, elementIdentifier)

            # Diaphragm lung elements
            getDiaphragmaticLungElements(coordinates, eftfactory, eftRegular, elementtemplateRegular,
                elementtemplateCustom, mesh, lungMeshGroup,
                rightLungMeshGroup, diaphragmaticLungMeshGroup,
                diaphragmaticElementsCount1, diaphragmaticElementsCount2, diaphragmaticElementsCount3,
                diaphragmaticNodeIds, elementIdentifier)

            # Marker points
            idx = elementsCount1 * elementsCount2 * (elementsCount3 - 1) + elementsCount1 * (elementsCount2 // 2)
            element1 = mesh.findElementByIdentifier(idx)
            markerPoint = markerPoints.createNode(nodeIdentifier, markerTemplateInternal)
            nodeIdentifier += 1
            cache.setNode(markerPoint)
            markerName.assignString(cache, 'apex of left lung')
            markerLocation.assignMeshLocation(cache, element1, [1.0, 1.0, 1.0])

            idx = elementsCount1 * elementsCount2
            element1 = mesh.findElementByIdentifier(idx)
            markerPoint = markerPoints.createNode(nodeIdentifier, markerTemplateInternal)
            nodeIdentifier += 1
            cache.setNode(markerPoint)
            markerName.assignString(cache, 'ventral base of left lung')
            markerLocation.assignMeshLocation(cache, element1, [1.0, 1.0, 0.0])

            idx = elementsCount1 // 2
            element1 = mesh.findElementByIdentifier(idx)
            markerPoint = markerPoints.createNode(nodeIdentifier, markerTemplateInternal)
            nodeIdentifier += 1
            cache.setNode(markerPoint)
            markerName.assignString(cache, 'dorsal base of left lung')
            markerLocation.assignMeshLocation(cache, element1, [0.0, 0.0, 0.0])

            lowerRightLungElementsCount = lElementsCount1 * lElementsCount2 * lElementsCount3
            upperRightLungElementsCount = uElementsCount1 * uElementsCount2 * (uElementsCount3 - 2)
            leftLungElementsCount = elementsCount1 * elementsCount2 * elementsCount3

            idx = leftLungElementsCount + lowerRightLungElementsCount + upperRightLungElementsCount + (uElementsCount1 // 2)
            element1 = mesh.findElementByIdentifier(idx)
            markerPoint = markerPoints.createNode(nodeIdentifier, markerTemplateInternal)
            nodeIdentifier += 1
            cache.setNode(markerPoint)
            markerName.assignString(cache, 'apex of right lung')
            markerLocation.assignMeshLocation(cache, element1, [0.0, 1.0, 1.0])

            lowerRightLungElementsCount = lElementsCount1 * lElementsCount2 * lElementsCount3

            idx = leftLungElementsCount + lowerRightLungElementsCount - (lElementsCount1 // 2)
            element1 = mesh.findElementByIdentifier(idx)
            markerPoint = markerPoints.createNode(nodeIdentifier, markerTemplateInternal)
            nodeIdentifier += 1
            cache.setNode(markerPoint)
            markerName.assignString(cache, 'ventral base of right lung')
            markerLocation.assignMeshLocation(cache, element1, [1.0, 1.0, 0.0])

            idx = leftLungElementsCount + (lElementsCount1 // 2)
            element1 = mesh.findElementByIdentifier(idx)
            markerPoint = markerPoints.createNode(nodeIdentifier, markerTemplateInternal)
            nodeIdentifier += 1
            cache.setNode(markerPoint)
            markerName.assignString(cache, 'dorsal base of right lung')
            markerLocation.assignMeshLocation(cache, element1, [0.0, 0.0, 0.0])

            upperRightLungElementsCount = (uElementsCount1 - 1) * uElementsCount2 * (uElementsCount3 + 1)
            rightLungElementsCount = lowerRightLungElementsCount + upperRightLungElementsCount

            idx_1 = diaphragmaticElementsCount1 * (diaphragmaticElementsCount2 - 1) * (diaphragmaticElementsCount3 - 1)
            idx = rightLungElementsCount + leftLungElementsCount + idx_1
            element1 = mesh.findElementByIdentifier(idx)
            markerPoint = markerPoints.createNode(nodeIdentifier, markerTemplateInternal)
            nodeIdentifier += 1
            cache.setNode(markerPoint)
            markerName.assignString(cache, 'apex of accessory lung')
            markerLocation.assignMeshLocation(cache, element1, [0.0, 0.0, 1.0])

            idx_1 = diaphragmaticElementsCount1 * (diaphragmaticElementsCount2 - 1) * (
                        diaphragmaticElementsCount3 - 1) - 1
            idx = rightLungElementsCount + leftLungElementsCount + idx_1
            element1 = mesh.findElementByIdentifier(idx)
            markerPoint = markerPoints.createNode(nodeIdentifier, markerTemplateInternal)
            nodeIdentifier += 1
            cache.setNode(markerPoint)
            markerName.assignString(cache, 'ventral base of accessory lung')
            markerLocation.assignMeshLocation(cache, element1, [1.0, 1.0, 0.0])

            idx = rightLungElementsCount + leftLungElementsCount + diaphragmaticElementsCount1
            element1 = mesh.findElementByIdentifier(idx)
            markerPoint = markerPoints.createNode(nodeIdentifier, markerTemplateInternal)
            nodeIdentifier += 1
            cache.setNode(markerPoint)
            markerName.assignString(cache, 'dorsal base of accessory lung')
            markerLocation.assignMeshLocation(cache, element1, [1.0, 0.0, 0.0])

        return annotationGroups

    @classmethod
    def refineMesh(cls, meshrefinement, options):
        """
        Refine source mesh into separate region, with change of basis.
        :param meshrefinement: MeshRefinement, which knows source and target region.
        :param options: Dict containing options. See getDefaultOptions().
        """
        assert isinstance(meshrefinement, MeshRefinement)
        refineElementsCount = options['Refine number of elements']
        meshrefinement.refineAllElementsCubeStandard3d(refineElementsCount, refineElementsCount, refineElementsCount)

def getLungNodes(lungSide, cache, coordinates, generateParameters, nodes, nodetemplate, nodeFieldParameters,
                 lElementsCount1, lElementsCount2, lElementsCount3,
                 uElementsCount1, uElementsCount2, uElementsCount3,
                 lowerNodeIds, upperNodeIds, nodeIndex, nodeIdentifier):
    """
    :param lowerNodeIds: nodeIdentifier array in the lower lobe filled by this function
        including indexing by [lElementsCount3 + 1][lElementsCount2 + 1][lElementsCount1 + 1]
    :param upperNodeIds: nodeIdentifier array in the upper lobe filled by this function
        including indexing by [uElementsCount3 + 1][uElementsCount2 + 1][uElementsCount1 + 1]
    :return: nodeIndex, nodeIdentifier
    """
    leftLung = 0

    # Initialise parameters
    d1 = [1.0, 0.0, 0.0]
    d2 = [0.0, 1.0, 0.0]
    d3 = [0.0, 0.0, 1.0]

    # Offset
    xMirror = 0 if lungSide == leftLung else 150

    # Lower lobe nodes
    for n3 in range(lElementsCount3 + 1):
        lowerNodeIds.append([])
        for n2 in range(lElementsCount2 + 1):
            lowerNodeIds[n3].append([])
            for n1 in range(lElementsCount1 + 1):
                lowerNodeIds[n3][n2].append(None)
                if ((n1 == 0) or (n1 == lElementsCount1)) and (n2 == 0):
                    continue
                if (n3 > (lElementsCount3 - 2)) and (n2 > (lElementsCount2 - 2)):
                    continue
                node = nodes.createNode(nodeIdentifier, nodetemplate)
                cache.setNode(node)
                if generateParameters:
                    x = [1.0 * (n1 - 1) + xMirror, 1.0 * (n2 - 1), 1.0 * n3]
                else:
                    nodeParameters = nodeFieldParameters[nodeIndex]
                    nodeIndex += 1
                    assert nodeIdentifier == nodeParameters[0]
                    x, d1, d2, d3 = nodeParameters[1]
                coordinates.setNodeParameters(cache, -1, Node.VALUE_LABEL_VALUE, 1, x)
                coordinates.setNodeParameters(cache, -1, Node.VALUE_LABEL_D_DS1, 1, d1)
                coordinates.setNodeParameters(cache, -1, Node.VALUE_LABEL_D_DS2, 1, d2)
                coordinates.setNodeParameters(cache, -1, Node.VALUE_LABEL_D_DS3, 1, d3)
                lowerNodeIds[n3][n2][n1] = nodeIdentifier
                nodeIdentifier += 1

    # Upper lobe nodes
    for n3 in range(uElementsCount3 + 1):
        upperNodeIds.append([])
        for n2 in range(uElementsCount2 + 1):
            upperNodeIds[n3].append([])
            for n1 in range(uElementsCount1 + 1):
                upperNodeIds[n3][n2].append(None)
                if ((n1 == 0) or (n1 == uElementsCount1)) and ((n2 == 0) or (n2 == uElementsCount2)):
                    continue
                if (n2 < (uElementsCount2 - 2)) and (n3 < (uElementsCount3 - 2)):
                    continue
                if ((n2 == 0) or (n2 == uElementsCount2)) and (n3 == uElementsCount3):
                    continue
                if ((n1 == 0) or (n1 == uElementsCount1)) and (n3 == uElementsCount3):
                    continue

                # Oblique fissure nodes
                if (n2 == (uElementsCount2 - 2)) and (n3 < (uElementsCount3 - 2)):
                    upperNodeIds[n3][n2][n1] = lowerNodeIds[n3][lElementsCount2][n1]
                    continue
                elif (n2 < (uElementsCount2 - 1)) and (n3 == (uElementsCount3 - 2)):
                    upperNodeIds[n3][n2][n1] = lowerNodeIds[lElementsCount3][n2][n1]
                    continue

                node = nodes.createNode(nodeIdentifier, nodetemplate)
                cache.setNode(node)
                if generateParameters:
                    x = [1.0 * (n1 - 1) + xMirror, 1.0 * (n2 - 1) + 2.5, 1.0 * n3 + 2.0]
                else:
                    nodeParameters = nodeFieldParameters[nodeIndex]
                    nodeIndex += 1
                    assert nodeIdentifier == nodeParameters[0]
                    x, d1, d2, d3 = nodeParameters[1]
                coordinates.setNodeParameters(cache, -1, Node.VALUE_LABEL_VALUE, 1, x)
                coordinates.setNodeParameters(cache, -1, Node.VALUE_LABEL_D_DS1, 1, d1)
                coordinates.setNodeParameters(cache, -1, Node.VALUE_LABEL_D_DS2, 1, d2)
                coordinates.setNodeParameters(cache, -1, Node.VALUE_LABEL_D_DS3, 1, d3)
                upperNodeIds[n3][n2][n1] = nodeIdentifier
                nodeIdentifier += 1

    return nodeIndex, nodeIdentifier

def getLungElements(coordinates, eftfactory, eftRegular, elementtemplateRegular, elementtemplateCustom, mesh,
                    lungMeshGroup, lungSideMeshGroup, lowerLobeMeshGroup, middleLobeMeshGroup, upperLobeMeshGroup,
                    lElementsCount1, lElementsCount2, lElementsCount3,
                    uElementsCount1, uElementsCount2, uElementsCount3,
                    lowerNodeIds, upperNodeIds, elementIdentifier):
    """
    :param lowerNodeIds: Indexing by [lElementsCount3 + 1][lElementsCount2 + 1][lElementsCount1 + 1]
    :param upperNodeIds: Indexing by [uElementsCount3 + 1][uElementsCount2 + 1][uElementsCount1 + 1]
    :return: elementIdentifier
    """

    eftWedgeCollapseXi1_15 = eftfactory.createEftWedgeCollapseXi1Quadrant([1, 5])
    eftWedgeCollapseXi1_26 = eftfactory.createEftWedgeCollapseXi1Quadrant([2, 6])
    eftWedgeCollapseXi1_57 = eftfactory.createEftWedgeCollapseXi1Quadrant([5, 7])
    eftWedgeCollapseXi1_68 = eftfactory.createEftWedgeCollapseXi1Quadrant([6, 8])
    eftWedgeCollapseXi2_78 = eftfactory.createEftWedgeCollapseXi2Quadrant([7, 8])
    eftTetCollapseXi1Xi2_71 = eftfactory.createEftTetrahedronCollapseXi1Xi2Quadrant(7, 1)
    eftTetCollapseXi1Xi2_82 = eftfactory.createEftTetrahedronCollapseXi1Xi2Quadrant(8, 2)

    # Lower lobe elements
    for e3 in range(lElementsCount3):
        for e2 in range(lElementsCount2):
            for e1 in range(lElementsCount1):
                eft = eftRegular
                nodeIdentifiers = [
                    lowerNodeIds[e3][e2][e1], lowerNodeIds[e3][e2][e1 + 1], lowerNodeIds[e3][e2 + 1][e1],
                    lowerNodeIds[e3][e2 + 1][e1 + 1],
                    lowerNodeIds[e3 + 1][e2][e1], lowerNodeIds[e3 + 1][e2][e1 + 1],
                    lowerNodeIds[e3 + 1][e2 + 1][e1], lowerNodeIds[e3 + 1][e2 + 1][e1 + 1]]

                if (e2 == 0) and (e1 == 0):
                    # Back wedge elements
                    nodeIdentifiers.pop(4)
                    nodeIdentifiers.pop(0)
                    eft = eftWedgeCollapseXi1_15
                elif (e2 == 0) and (e1 == (lElementsCount1 - 1)):
                    # Back wedge elements
                    nodeIdentifiers.pop(5)
                    nodeIdentifiers.pop(1)
                    eft = eftWedgeCollapseXi1_26
                elif (e3 == 1) and (e2 == (lElementsCount2 - 2)):
                    # Middle wedge
                    nodeIdentifiers.pop(7)
                    nodeIdentifiers.pop(6)
                    eft = eftWedgeCollapseXi2_78
                elif (e3 == (lElementsCount3 - 1)) and (e2 == (lElementsCount2 - 3)):
                    # Remapped cube element 1
                    eft = eftfactory.createEftBasic()
                    setEftScaleFactorIds(eft, [1], [])
                    remapEftNodeValueLabel(eft, [7, 8], Node.VALUE_LABEL_D_DS2, [(Node.VALUE_LABEL_D_DS3, [1])])
                    remapEftNodeValueLabel(eft, [7, 8], Node.VALUE_LABEL_D_DS3, [(Node.VALUE_LABEL_D_DS2, [])])
                elif (e3 == (lElementsCount3 - 1)) and (e2 == (lElementsCount2 - 2)):
                    # Remapped cube element 2
                    nodeIdentifiers[2] = lowerNodeIds[e3 - 1][e2 + 1][e1]
                    nodeIdentifiers[3] = lowerNodeIds[e3 - 1][e2 + 1][e1 + 1]
                    nodeIdentifiers[6] = lowerNodeIds[e3 - 1][e2 + 2][e1]
                    nodeIdentifiers[7] = lowerNodeIds[e3 - 1][e2 + 2][e1 + 1]
                    eft = eftfactory.createEftBasic()
                    setEftScaleFactorIds(eft, [1], [])
                    remapEftNodeValueLabel(eft, [5, 6], Node.VALUE_LABEL_D_DS2, [(Node.VALUE_LABEL_D_DS3, [1])])
                    remapEftNodeValueLabel(eft, [5, 6], Node.VALUE_LABEL_D_DS3, [(Node.VALUE_LABEL_D_DS2, [])])
                    remapEftNodeValueLabel(eft, [3, 4, 7, 8], Node.VALUE_LABEL_D_DS2,
                                           [(Node.VALUE_LABEL_D_DS3, [1])])
                    remapEftNodeValueLabel(eft, [3, 4, 7, 8], Node.VALUE_LABEL_D_DS3,
                                           [(Node.VALUE_LABEL_D_DS2, [])])
                elif None in nodeIdentifiers:
                    continue

                if eft is eftRegular:
                    element = mesh.createElement(elementIdentifier, elementtemplateRegular)
                else:
                    elementtemplateCustom.defineField(coordinates, -1, eft)
                    element = mesh.createElement(elementIdentifier, elementtemplateCustom)
                element.setNodesByIdentifier(eft, nodeIdentifiers)
                if eft.getNumberOfLocalScaleFactors() == 1:
                    element.setScaleFactors(eft, [-1.0])
                elementIdentifier += 1

                # Annotation
                lungMeshGroup.addElement(element)
                lungSideMeshGroup.addElement(element)
                if lowerLobeMeshGroup:
                    lowerLobeMeshGroup.addElement(element)

    # Upper lobe elements
    for e3 in range(uElementsCount3):
        for e2 in range(uElementsCount2):
            for e1 in range(uElementsCount1):
                eft = eftRegular
                nodeIdentifiers = [
                    upperNodeIds[e3][e2][e1], upperNodeIds[e3][e2][e1 + 1], upperNodeIds[e3][e2 + 1][e1],
                    upperNodeIds[e3][e2 + 1][e1 + 1],
                    upperNodeIds[e3 + 1][e2][e1], upperNodeIds[e3 + 1][e2][e1 + 1],
                    upperNodeIds[e3 + 1][e2 + 1][e1], upperNodeIds[e3 + 1][e2 + 1][e1 + 1]]

                if (e3 < (uElementsCount3 - 1)) and (e2 == (uElementsCount2 - 1)) and (e1 == 0):
                    # Distal-front wedge elements
                    nodeIdentifiers.pop(6)
                    nodeIdentifiers.pop(2)
                    eft = eftfactory.createEftBasic()
                    setEftScaleFactorIds(eft, [1], [])
                    nodes = [3, 4, 7, 8]
                    collapseNodes = [3, 7]
                    remapEftNodeValueLabel(eft, nodes, Node.VALUE_LABEL_D_DS1, [])
                    remapEftNodeValueLabel(eft, collapseNodes, Node.VALUE_LABEL_D_DS2,
                                           [(Node.VALUE_LABEL_D_DS1, []), (Node.VALUE_LABEL_D_DS2, [])])
                    ln_map = [1, 2, 3, 3, 4, 5, 6, 6]
                    remapEftLocalNodes(eft, 6, ln_map)

                elif (e3 < (uElementsCount3 - 1)) and (e2 == (uElementsCount2 - 1)) and (
                        e1 == (uElementsCount1 - 1)):
                    # Distal-back wedge elements
                    nodeIdentifiers.pop(7)
                    nodeIdentifiers.pop(3)
                    eft = eftfactory.createEftBasic()
                    setEftScaleFactorIds(eft, [1], [])
                    nodes = [3, 4, 7, 8]
                    collapseNodes = [4, 8]
                    remapEftNodeValueLabel(eft, collapseNodes, Node.VALUE_LABEL_D_DS2,
                                           [(Node.VALUE_LABEL_D_DS1, [1]), (Node.VALUE_LABEL_D_DS2, [])])
                    remapEftNodeValueLabel(eft, nodes, Node.VALUE_LABEL_D_DS1, [])
                    ln_map = [1, 2, 3, 3, 4, 5, 6, 6]
                    remapEftLocalNodes(eft, 6, ln_map)

                elif (e3 == (uElementsCount3 - 2)) and (e2 == 0) and (e1 == 0):
                    # Medial-front wedge elements
                    nodeIdentifiers.pop(4)
                    nodeIdentifiers.pop(0)
                    eft = eftWedgeCollapseXi1_15
                elif (e3 == (uElementsCount3 - 2)) and (e2 == 0) and (e1 == (uElementsCount1 - 1)):
                    # Medial-back wedge elements
                    nodeIdentifiers.pop(5)
                    nodeIdentifiers.pop(1)
                    eft = eftWedgeCollapseXi1_26
                elif (e3 == (uElementsCount3 - 1)) and (0 < e2 < (uElementsCount2 - 1)) and (e1 == 0):
                    # Top-front wedge elements
                    nodeIdentifiers.pop(6)
                    nodeIdentifiers.pop(4)
                    eft = eftWedgeCollapseXi1_57
                elif (e3 == (uElementsCount3 - 1)) and (0 < e2 < (uElementsCount2 - 1)) and (
                        e1 == (uElementsCount1 - 1)):
                    # Top-back wedge elements
                    nodeIdentifiers.pop(7)
                    nodeIdentifiers.pop(5)
                    eft = eftWedgeCollapseXi1_68
                elif (e3 == (uElementsCount3 - 1)) and (e2 == 0) and (e1 == 0):
                    # Top-front-medial tetrahedron wedge elements
                    nodeIdentifiers.pop(6)
                    nodeIdentifiers.pop(5)
                    nodeIdentifiers.pop(4)
                    nodeIdentifiers.pop(0)
                    eft = eftTetCollapseXi1Xi2_82
                elif (e3 == (uElementsCount3 - 1)) and (e2 == 0) and (e1 == (uElementsCount1 - 1)):
                    # Top-back-medial tetrahedron wedge elements
                    nodeIdentifiers.pop(7)
                    nodeIdentifiers.pop(5)
                    nodeIdentifiers.pop(4)
                    nodeIdentifiers.pop(1)
                    eft = eftTetCollapseXi1Xi2_71
                elif (e3 == (uElementsCount3 - 1)) and (e2 == (uElementsCount2 - 1)) and (e1 == 0):
                    # Top-front-distal tetrahedron wedge elements
                    nodeIdentifiers.pop(7)
                    nodeIdentifiers.pop(6)
                    nodeIdentifiers.pop(4)
                    nodeIdentifiers.pop(2)
                    eft = eftfactory.createEftBasic()
                    setEftScaleFactorIds(eft, [1], [])
                    nodes = [5, 6, 7, 8]
                    # remap parameters on xi3 = 1 before collapsing nodes
                    remapEftNodeValueLabel(eft, nodes, Node.VALUE_LABEL_D_DS1, [])
                    remapEftNodeValueLabel(eft, nodes, Node.VALUE_LABEL_D_DS2, [])
                    remapEftNodeValueLabel(eft, [7, 8], Node.VALUE_LABEL_D_DS3, [(Node.VALUE_LABEL_D_DS2, [1])])
                    remapEftNodeValueLabel(eft, [5], Node.VALUE_LABEL_D_DS3, [(Node.VALUE_LABEL_D_DS1, [])])
                    remapEftNodeValueLabel(eft, [3, 4], Node.VALUE_LABEL_D_DS1, [])
                    remapEftNodeValueLabel(eft, [3], Node.VALUE_LABEL_D_DS2,
                                           [(Node.VALUE_LABEL_D_DS1, []), (Node.VALUE_LABEL_D_DS2, [])])
                    ln_map = [1, 2, 3, 3, 4, 4, 4, 4]
                    remapEftLocalNodes(eft, 4, ln_map)

                elif (e3 == (uElementsCount3 - 1)) and (e2 == (uElementsCount2 - 1)) and (
                        e1 == (uElementsCount1 - 1)):
                    # Top-front-distal tetrahedron wedge elements
                    nodeIdentifiers.pop(7)
                    nodeIdentifiers.pop(6)
                    nodeIdentifiers.pop(5)
                    nodeIdentifiers.pop(3)
                    eft = eftfactory.createEftBasic()
                    setEftScaleFactorIds(eft, [1], [])
                    nodes = [5, 6, 7, 8]
                    # remap parameters on xi3 = 1 before collapsing nodes
                    remapEftNodeValueLabel(eft, nodes, Node.VALUE_LABEL_D_DS1, [])
                    remapEftNodeValueLabel(eft, nodes, Node.VALUE_LABEL_D_DS2, [])
                    remapEftNodeValueLabel(eft, [7, 8], Node.VALUE_LABEL_D_DS3, [(Node.VALUE_LABEL_D_DS2, [1])])
                    remapEftNodeValueLabel(eft, [6], Node.VALUE_LABEL_D_DS3, [(Node.VALUE_LABEL_D_DS1, [1])])
                    remapEftNodeValueLabel(eft, [3, 4], Node.VALUE_LABEL_D_DS1, [])
                    remapEftNodeValueLabel(eft, [4], Node.VALUE_LABEL_D_DS2,
                                           [(Node.VALUE_LABEL_D_DS1, [1]), (Node.VALUE_LABEL_D_DS2, [])])
                    ln_map = [1, 2, 3, 3, 4, 4, 4, 4]
                    remapEftLocalNodes(eft, 4, ln_map)

                elif (e3 == (uElementsCount3 - 2)) and (e2 == (uElementsCount2 - 3)):
                    # Remapped cube element 1
                    eft = eftfactory.createEftBasic()
                    setEftScaleFactorIds(eft, [1], [])
                    remapEftNodeValueLabel(eft, [3, 4], Node.VALUE_LABEL_D_DS2, [(Node.VALUE_LABEL_D_DS3, [1])])
                    remapEftNodeValueLabel(eft, [3, 4], Node.VALUE_LABEL_D_DS3,
                                           [(Node.VALUE_LABEL_D_DS2, []), (Node.VALUE_LABEL_D_DS3, [])])
                elif (e3 == (uElementsCount3 - 2)) and (e2 == (uElementsCount2 - 2)):
                    # Remapped cube element 2
                    eft = eftfactory.createEftBasic()
                    setEftScaleFactorIds(eft, [1], [])
                    remapEftNodeValueLabel(eft, [1, 2], Node.VALUE_LABEL_D_DS3,
                                           [(Node.VALUE_LABEL_D_DS2, []), (Node.VALUE_LABEL_D_DS3, [])])
                elif None in nodeIdentifiers:
                    continue

                if eft is eftRegular:
                    element = mesh.createElement(elementIdentifier, elementtemplateRegular)
                else:
                    elementtemplateCustom.defineField(coordinates, -1, eft)
                    element = mesh.createElement(elementIdentifier, elementtemplateCustom)
                element.setNodesByIdentifier(eft, nodeIdentifiers)
                if eft.getNumberOfLocalScaleFactors() == 1:
                    element.setScaleFactors(eft, [-1.0])
                elementIdentifier += 1
                lungMeshGroup.addElement(element)
                lungSideMeshGroup.addElement(element)
                if middleLobeMeshGroup and (e3 < (uElementsCount3 - 2)):
                    middleLobeMeshGroup.addElement(element)
                elif upperLobeMeshGroup:
                    upperLobeMeshGroup.addElement(element)

    return elementIdentifier

def getDiaphragmaticLungNodes(cache, coordinates, generateParameters, nodes, nodetemplate, nodeFieldParameters,
                 elementsCount1, elementsCount2, elementsCount3,
                 nodeIds, nodeIndex, nodeIdentifier):
    """
    :parameter:
    :return: nodeIndex, nodeIdentifier
    """

    # Initialise parameters
    d1 = [1.0, 0.0, 0.0]
    d2 = [0.0, 1.0, 0.0]
    d3 = [0.0, 0.0, 1.0]

    # Offset
    xMirror = 75

    # Diaphragmatic lobe nodes
    for n3 in range(elementsCount3 + 1):
        nodeIds.append([])
        for n2 in range(elementsCount2 + 1):
            nodeIds[n3].append([])
            for n1 in range(elementsCount1 + 1):
                nodeIds[n3][n2].append(None)
                if ((n1 == elementsCount1) or (n1 == 1)) and (n3 == elementsCount3):
                    continue
                if (n2 > 1) and (n1 == 0):
                    continue
                node = nodes.createNode(nodeIdentifier, nodetemplate)
                cache.setNode(node)
                if generateParameters:
                    if n1 == 0:
                        # The side boxes node
                        x = [1.0 * (n1 - 1) + xMirror, 1.0 * (n2 - 1), 1.0 * n3 + 0.5]
                    elif n3 == (elementsCount3 - 1):
                        # Middle row
                        x = [0.5 * (n1 - 1) + 0.5 + xMirror, 1.0 * (n2 - 1), 1.0 * n3]
                    else:
                        x = [1.0 * (n1 - 1) + xMirror, 1.0 * (n2 - 1), 1.0 * n3]
                else:
                    nodeParameters = nodeFieldParameters[nodeIndex]
                    nodeIndex += 1
                    assert nodeIdentifier == nodeParameters[0]
                    x, d1, d2, d3 = nodeParameters[1]
                coordinates.setNodeParameters(cache, -1, Node.VALUE_LABEL_VALUE, 1, x)
                coordinates.setNodeParameters(cache, -1, Node.VALUE_LABEL_D_DS1, 1, d1)
                coordinates.setNodeParameters(cache, -1, Node.VALUE_LABEL_D_DS2, 1, d2)
                coordinates.setNodeParameters(cache, -1, Node.VALUE_LABEL_D_DS3, 1, d3)
                nodeIds[n3][n2][n1] = nodeIdentifier
                nodeIdentifier += 1

    return nodeIndex, nodeIdentifier

def getDiaphragmaticLungElements(coordinates, eftfactory, eftRegular, elementtemplateRegular, elementtemplateCustom,
                    mesh, lungMeshGroup, lungSideMeshGroup, diaphragmaticLobeMeshGroup,
                    elementsCount1, elementsCount2, elementsCount3,
                    NodeIds, elementIdentifier):
    """
    :parameter:
    :return: elementIdentifier
    """

    # Diaphragmatic lobe elements
    for e3 in range(elementsCount3):
        for e2 in range(elementsCount2):
            for e1 in range(elementsCount1):
                eft = eftRegular
                nodeIdentifiers = [
                    NodeIds[e3][e2][e1], NodeIds[e3][e2][e1 + 1], NodeIds[e3][e2 + 1][e1],
                    NodeIds[e3][e2 + 1][e1 + 1],
                    NodeIds[e3 + 1][e2][e1], NodeIds[e3 + 1][e2][e1 + 1],
                    NodeIds[e3 + 1][e2 + 1][e1], NodeIds[e3 + 1][e2 + 1][e1 + 1]]

                if (e1 == 1) and (e3 == (elementsCount3 - 1)):
                    nodeIdentifiers.pop(6)
                    nodeIdentifiers.pop(4)
                    eft = eftfactory.createEftBasic()
                    setEftScaleFactorIds(eft, [1], [])
                    nodes = [5, 6, 7, 8]
                    collapseNodes = [5, 7]
                    remapEftNodeValueLabel(eft, nodes, Node.VALUE_LABEL_D_DS1, [])
                    remapEftNodeValueLabel(eft, collapseNodes, Node.VALUE_LABEL_D_DS3,
                                           [(Node.VALUE_LABEL_D_DS1, []), (Node.VALUE_LABEL_D_DS3, [])])
                    if e2 == 0:
                        # Remapping the element
                        remapEftNodeValueLabel(eft, [3], Node.VALUE_LABEL_D_DS2,
                                               [(Node.VALUE_LABEL_D_DS2, []), (Node.VALUE_LABEL_D_DS1, [1])])
                    ln_map = [1, 2, 3, 4, 5, 5, 6, 6]
                    remapEftLocalNodes(eft, 6, ln_map)

                elif (e1 == 1) and (e2 == 0) and (e3 < (elementsCount3 - 1)):
                    # Remapping the elements
                    eft = eftfactory.createEftBasic()
                    setEftScaleFactorIds(eft, [1], [])
                    remapEftNodeValueLabel(eft, [3, 7], Node.VALUE_LABEL_D_DS2,
                                           [(Node.VALUE_LABEL_D_DS2, []), (Node.VALUE_LABEL_D_DS1, [1])])

                elif (e1 == elementsCount1 - 1) and (e3 == (elementsCount3 - 1)):
                    nodeIdentifiers.pop(7)
                    nodeIdentifiers.pop(5)
                    eft = eftfactory.createEftBasic()
                    setEftScaleFactorIds(eft, [1], [])
                    nodes = [5, 6, 7, 8]
                    collapseNodes = [6, 8]
                    remapEftNodeValueLabel(eft, collapseNodes, Node.VALUE_LABEL_D_DS3,
                                           [(Node.VALUE_LABEL_D_DS1, [1]), (Node.VALUE_LABEL_D_DS3, [])])
                    remapEftNodeValueLabel(eft, nodes, Node.VALUE_LABEL_D_DS1, [])
                    ln_map = [1, 2, 3, 4, 5, 5, 6, 6]
                    remapEftLocalNodes(eft, 6, ln_map)

                elif (e1 == 0) and (e2 == 0):
                    # Remapping the elements
                    if e3 == 0:
                        eft = eftfactory.createEftBasic()
                        setEftScaleFactorIds(eft, [1], [])
                        remapEftNodeValueLabel(eft, [4, 8], Node.VALUE_LABEL_D_DS2,
                                               [(Node.VALUE_LABEL_D_DS2, []), (Node.VALUE_LABEL_D_DS1, [1])])
                        remapEftNodeValueLabel(eft, [4, 8], Node.VALUE_LABEL_D_DS1,
                                               [(Node.VALUE_LABEL_D_DS2, [])])
                    elif (e3 == (elementsCount3 - 1)):
                        nodeIdentifiers[7] = NodeIds[e3 + 1][e2 + 1][e1 + 2]
                        nodeIdentifiers[5] = NodeIds[e3 + 1][e2][e1 + 2]
                        eft = eftfactory.createEftBasic()
                        setEftScaleFactorIds(eft, [1], [])
                        collapseNodes = [6, 8]
                        remapEftNodeValueLabel(eft, collapseNodes, Node.VALUE_LABEL_D_DS3,
                                               [(Node.VALUE_LABEL_D_DS1, []), (Node.VALUE_LABEL_D_DS3, [])])
                        remapEftNodeValueLabel(eft, [4], Node.VALUE_LABEL_D_DS2,
                                               [(Node.VALUE_LABEL_D_DS2, []), (Node.VALUE_LABEL_D_DS1, [1])])
                        remapEftNodeValueLabel(eft, [4], Node.VALUE_LABEL_D_DS1,
                                               [(Node.VALUE_LABEL_D_DS2, [])])

                elif None in nodeIdentifiers:
                    continue

                if eft is eftRegular:
                    element = mesh.createElement(elementIdentifier, elementtemplateRegular)
                else:
                    elementtemplateCustom.defineField(coordinates, -1, eft)
                    element = mesh.createElement(elementIdentifier, elementtemplateCustom)
                element.setNodesByIdentifier(eft, nodeIdentifiers)
                if eft.getNumberOfLocalScaleFactors() == 1:
                    element.setScaleFactors(eft, [-1.0])
                elementIdentifier += 1

                # Annotation
                lungMeshGroup.addElement(element)
                diaphragmaticLobeMeshGroup.addElement(element)
                lungSideMeshGroup.addElement(element)

    return elementIdentifier
