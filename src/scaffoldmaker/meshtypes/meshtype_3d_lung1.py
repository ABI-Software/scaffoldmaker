'''
Generates 3D lung surface mesh.
'''

from scaffoldmaker.annotation.annotationgroup import AnnotationGroup
from scaffoldmaker.annotation.lung_terms import get_lung_term
from scaffoldmaker.meshtypes.scaffold_base import Scaffold_base
from scaffoldmaker.utils.eft_utils import remapEftLocalNodes, remapEftNodeValueLabel, setEftScaleFactorIds
from scaffoldmaker.utils.eftfactory_tricubichermite import eftfactory_tricubichermite
from scaffoldmaker.utils.meshrefinement import MeshRefinement
from opencmiss.utils.zinc.field import findOrCreateFieldCoordinates, findOrCreateFieldGroup, \
    findOrCreateFieldNodeGroup, findOrCreateFieldStoredMeshLocation, findOrCreateFieldStoredString
from opencmiss.zinc.element import Element
from opencmiss.zinc.field import Field
from opencmiss.zinc.node import Node


class MeshType_3d_lung1(Scaffold_base):
    '''
    3D lung scaffold.
    '''

    @staticmethod
    def getName():
        return '3D Lung 1'

    @staticmethod
    def getParameterSetNames():
        return [
            'Default',
            'Human 1',
            'Mouse 1']

    @classmethod
    def getDefaultOptions(cls, parameterSetName='Default'):
        options = {}
        if parameterSetName == 'Default':
            parameterSetName = 'Mouse 1'
        options['Base parameter set'] = parameterSetName
        options['Refine'] = False
        options['Refine number of elements'] = 4
        return options

    @staticmethod
    def getOrderedOptionNames():
        optionNames = [
            'Refine',
            'Refine number of elements'
            ]
        return optionNames

    @classmethod
    def checkOptions(cls, options):
        '''
        :return:  True if dependent options changed, otherwise False.
        '''
        dependentChanges = False
        for key in [
            'Refine number of elements']:
            if options[key] < 1:
                options[key] = 1
        return dependentChanges

    @classmethod
    def generateBaseMesh(cls, region, options):
        '''
        Generate the base tricubic Hermite mesh. See also generateMesh().
        :param region: Zinc region to define model in. Must be empty.
        :param options: Dict containing options. See getDefaultOptions().
        :return: annotationGroups
        '''
        parameterSetName = options['Base parameter set']
        isMouse = 'Mouse' in parameterSetName
        isHuman = 'Human' in parameterSetName

        fm = region.getFieldmodule()
        coordinates = findOrCreateFieldCoordinates(fm)

        nodes = fm.findNodesetByFieldDomainType(Field.DOMAIN_TYPE_NODES)
        nodetemplate = nodes.createNodetemplate()
        nodetemplate.defineField(coordinates)
        nodetemplate.setValueNumberOfVersions(coordinates, -1, Node.VALUE_LABEL_VALUE, 1)
        nodetemplate.setValueNumberOfVersions(coordinates, -1, Node.VALUE_LABEL_D_DS1, 1)
        nodetemplate.setValueNumberOfVersions(coordinates, -1, Node.VALUE_LABEL_D_DS2, 1)
        nodetemplate.setValueNumberOfVersions(coordinates, -1, Node.VALUE_LABEL_D_DS3, 1)

        mesh = fm.findMeshByDimension(3)

        eftfactory = eftfactory_tricubichermite(mesh, None)
        eftRegular = eftfactory.createEftBasic()

        elementtemplateRegular = mesh.createElementtemplate()
        elementtemplateRegular.setElementShapeType(Element.SHAPE_TYPE_CUBE)
        elementtemplateRegular.defineField(coordinates, -1, eftRegular)

        elementtemplateCustom = mesh.createElementtemplate()
        elementtemplateCustom.setElementShapeType(Element.SHAPE_TYPE_CUBE)

        lungGroup = AnnotationGroup(region, get_lung_term("lung"))
        leftLungGroup = AnnotationGroup(region, get_lung_term("left lung"))
        annotationGroups = [leftLungGroup, lungGroup]

        lungMeshGroup = lungGroup.getMeshGroup(mesh)
        leftLungMeshGroup = leftLungGroup.getMeshGroup(mesh)
        rightLungGroup = AnnotationGroup(region, get_lung_term("right lung"))
        rightLungMeshGroup = rightLungGroup.getMeshGroup(mesh)
        annotationGroups.append(rightLungGroup)
        lowerRightLungGroup = AnnotationGroup(region, get_lung_term("lower lobe of right lung"))
        lowerRightLungMeshGroup = lowerRightLungGroup.getMeshGroup(mesh)
        annotationGroups.append(lowerRightLungGroup)
        upperRightLungGroup = AnnotationGroup(region, get_lung_term("upper lobe of right lung"))
        upperRightLungMeshGroup = upperRightLungGroup.getMeshGroup(mesh)
        annotationGroups.append(upperRightLungGroup)
        middleRightLungGroup = AnnotationGroup(region, get_lung_term("middle lobe of right lung"))
        middleRightLungMeshGroup = middleRightLungGroup.getMeshGroup(mesh)
        annotationGroups.append(middleRightLungGroup)

        if isHuman:
            lowerLeftLungGroup = AnnotationGroup(region, get_lung_term("lower lobe of left lung"))
            lowerLeftLungMeshGroup = lowerLeftLungGroup.getMeshGroup(mesh)
            annotationGroups.append(lowerLeftLungGroup)
            upperLeftLungGroup = AnnotationGroup(region, get_lung_term("upper lobe of left lung"))
            upperLeftLungMeshGroup = upperLeftLungGroup.getMeshGroup(mesh)
            annotationGroups.append(upperLeftLungGroup)
        elif isMouse:
            diapLungGroup = AnnotationGroup(region, get_lung_term("right lung accessory lobe"))
            diapLungMeshGroup = diapLungGroup.getMeshGroup(mesh)
            annotationGroups.append(diapLungGroup)


        # Annotation fiducial point
        markerGroup = findOrCreateFieldGroup(fm, "marker")
        markerName = findOrCreateFieldStoredString(fm, name="marker_name")
        markerLocation = findOrCreateFieldStoredMeshLocation(fm, mesh, name="marker_location")

        nodes = fm.findNodesetByFieldDomainType(Field.DOMAIN_TYPE_NODES)
        markerPoints = findOrCreateFieldNodeGroup(markerGroup, nodes).getNodesetGroup()
        markerTemplateInternal = nodes.createNodetemplate()
        markerTemplateInternal.defineField(markerName)
        markerTemplateInternal.defineField(markerLocation)

        cache = fm.createFieldcache()

        # common element field templates
        eftWedgeCollapseXi1_15 = eftfactory.createEftWedgeCollapseXi1Quadrant([1, 5])
        eftWedgeCollapseXi1_37 = eftfactory.createEftWedgeCollapseXi1Quadrant([3, 7])
        eftWedgeCollapseXi1_57 = eftfactory.createEftWedgeCollapseXi1Quadrant([5, 7])
        eftWedgeCollapseXi2_56 = eftfactory.createEftWedgeCollapseXi2Quadrant([5, 6])
        eftWedgeCollapseXi2_78 = eftfactory.createEftWedgeCollapseXi2Quadrant([7, 8])
        eftTetCollapseXi1Xi2_82 = eftfactory.createEftTetrahedronCollapseXi1Xi2Quadrant(8, 2)
        eftTetCollapseXi1Xi2_63 = eftfactory.createEftTetrahedronCollapseXi1Xi2Quadrant(6, 3)

        # common parameters in species
        generateParameters = False

        leftLung = 0
        rightLung = 1
        diaphragmaticLung = 2

        #These element counts below can be in the node and element functions (getLungElements)
        lElementsCount1 = 2
        lElementsCount2 = 4
        lElementsCount3 = 3

        uElementsCount1 = 2
        uElementsCount2 = 4
        uElementsCount3 = 4

        if isHuman:
            #valueLabels = [ Node.VALUE_LABEL_VALUE, Node.VALUE_LABEL_D_DS1, Node.VALUE_LABEL_D_DS2, Node.VALUE_LABEL_D_DS3 ]
            nodeFieldParameters = [
                (   1, [ [ 204.214, 217.387,-341.252], [ -62.947, -35.911,   0.688], [  25.814, -29.305,  29.820], [  -4.512,  17.903,  91.032] ] ),
                (   2, [ [ 269.306, 209.072,-354.889], [ -20.103,  -4.908,  79.411], [  47.047, -49.139,  -2.543], [   0.175,  15.720,  89.961] ] ),
                (   3, [ [ 223.341, 188.444,-308.232], [ -60.426, -24.274,  -1.081], [  20.503, -36.477,  21.902], [   3.351,  18.019,  52.584] ] ),
                (   4, [ [ 175.176, 162.285,-317.267], [ -27.384, -29.319, -26.704], [   9.020, -29.937,  61.149], [   2.480,  21.158,  82.660] ] ),
                (   5, [ [ 292.990, 153.587,-341.674], [ -10.831,  26.074,  66.575], [ -10.247, -58.090,  17.240], [  10.595,  29.035,  61.452] ] ),
                (   6, [ [ 241.787, 149.543,-291.578], [ -78.934, -21.344,  11.789], [  22.813, -35.233,  12.622], [  -6.632,  28.612,  43.054] ] ),
                (   7, [ [ 155.702, 126.322,-273.198], [ -89.521, -38.973,  20.606], [  16.492, -32.096,   4.354], [  14.895,  29.074,  37.867] ] ),
                (   8, [ [ 279.346,  98.455,-327.717], [ -21.666,  16.370,  35.485], [ -18.452, -43.354,   8.934], [  18.541,  53.843,  54.860] ] ),
                (   9, [ [ 251.887, 110.979,-294.259], [ -46.884,  -0.667,  13.029], [  -6.640, -34.923,  -9.542], [  -1.793,  34.831,  57.261] ] ),
                (  10, [ [ 203.263, 108.034,-281.647], [ -46.333, -22.115,  13.236], [  35.945, -18.664,  -6.836], [   5.249,  39.630,  30.209] ] ),
                (  11, [ [ 256.412,  71.152,-323.525], [ -14.537,  11.023,  15.628], [  -7.850, -10.251,  25.280], [  35.613,  35.978,  71.913] ] ),
                (  12, [ [ 243.935,  80.999,-302.872], [ -16.394,   8.598,  18.165], [  -8.074, -19.651,  -6.343], [  10.839,  34.046,  66.123] ] ),
                (  13, [ [ 226.628,  91.702,-285.892], [ -23.230,  -0.285,  15.358], [   7.839, -18.769, -11.448], [   6.974,  29.647,  42.160] ] ),
                (  14, [ [ 217.057, 233.615,-251.001], [ -56.387, -12.798,  -2.074], [   6.551, -32.468,   4.928], [   7.180,   7.996,  92.202] ] ),
                (  15, [ [ 267.567, 218.538,-268.608], [ -31.271, -28.559,  17.780], [  28.703, -41.920, -22.876], [  -2.499,   2.835,  82.368] ] ),
                (  16, [ [ 227.626, 202.773,-250.316], [ -46.421,  -9.158,  11.317], [   7.297, -31.033,   0.920], [  -0.016,   8.237,  63.668] ] ),
                (  17, [ [ 178.210, 194.840,-246.533], [ -50.393,  -5.414,  -8.376], [ -22.308, -44.954,  12.222], [   3.296,  11.647,  70.649] ] ),
                (  18, [ [ 296.250, 178.154,-283.773], [ -52.959,  -4.397,  27.035], [  10.998, -43.061,  -0.027], [  -2.037,   9.722,  56.957] ] ),
                (  19, [ [ 240.706, 174.731,-251.298], [ -65.503, -16.663,  18.653], [  12.413, -26.875,   3.862], [  -0.209,   7.605,  43.189] ] ),
                (  20, [ [ 170.036, 151.299,-240.510], [ -77.888, -18.667,   9.104], [  21.815, -36.197,   2.313], [  11.396,  18.147,  30.385] ] ),
                (  21, [ [ 297.502, 143.355,-275.679], [ -48.044,   9.944,  32.993], [  -5.929, -36.823,  16.652], [  -0.988,  42.077,  47.842] ] ),
                (  22, [ [ 250.978, 148.431,-247.195], [ -50.687,   1.846,   9.041], [   9.032, -28.662,   9.417], [  -4.776,  32.784,  41.932] ] ),
                (  23, [ [ 204.680, 141.636,-246.513], [ -35.493, -20.244,  16.094], [  31.013, -11.624,   3.008], [ -11.195,  25.677,  39.181] ] ),
                (  24, [ [ 287.464, 106.726,-251.655], [ -25.621,   6.219,  23.134], [ -19.294, -29.795,  27.926], [  17.692,  37.852,  69.883] ] ),
                (  25, [ [ 257.922, 116.607,-238.393], [ -31.830,   9.651,   4.808], [  -9.432, -33.031,   3.881], [ -10.300,  42.470,  62.047] ] ),
                (  26, [ [ 228.110, 129.472,-238.391], [ -30.191,   5.166,  -9.731], [  19.291, -27.684,   5.002], [ -37.186,  41.031,  47.384] ] ),
                (  27, [ [ 219.598, 234.911,-158.376], [ -59.865, -18.569, -15.474], [   6.365, -34.542, -21.886], [  -2.376,  -5.948,  82.683] ] ),
                (  28, [ [ 271.479, 212.598,-191.075], [ -45.292, -11.794,   7.859], [  30.495, -31.862, -46.294], [   1.874, -12.175,  77.537] ] ),
                (  29, [ [ 226.886, 201.943,-182.154], [ -46.036,  -0.006,   5.281], [   5.759, -30.320, -27.476], [   4.237, -12.188,  64.641] ] ),
                (  30, [ [ 176.812, 202.108,-180.833], [ -45.198,  -1.262,   0.548], [  -3.376, -48.006, -27.616], [  -1.725,  -4.852,  66.277] ] ),
                (  31, [ [ 291.428, 178.268,-232.360], [ -43.644, -20.853,  24.989], [   9.889, -35.193, -43.486], [   4.353, -16.910,  50.697] ] ),
                (  32, [ [ 237.268, 175.712,-212.165], [ -56.954, -16.756,  10.424], [  13.032, -26.067, -32.916], [   0.506, -11.344,  40.699] ] ),
                (  33, [ [ 175.732, 160.132,-211.466], [ -60.962, -16.488,  -9.264], [  19.400, -26.292, -38.189], [   2.855,   9.850,  36.322] ] ),
                (  34, [ [ 219.695, 225.898, -85.992], [ -73.383,  -7.270,   0.075], [   9.466, -34.972, -20.253], [  -0.443, -16.457,  58.378] ] ),
                (  35, [ [ 276.870, 199.241,-113.455], [ -50.589,  -4.004,   2.780], [  27.986, -43.217, -64.463], [  -2.551, -14.345,  71.169] ] ),
                (  36, [ [ 228.512, 190.564,-119.932], [ -48.632,  -2.241,   2.901], [  10.553, -37.072, -44.027], [  -7.211, -10.078,  60.219] ] ),
                (  37, [ [ 177.143, 186.587,-116.041], [ -45.024, -10.633,   6.490], [  36.691, -40.359, -41.741], [  -7.404, -14.171,  56.958] ] ),
                (  38, [ [ 294.618, 150.473,-187.485], [ -61.912,   3.854,  13.211], [  -7.435, -61.052,  31.811], [   4.313,  46.520,  70.475] ] ),
                (  39, [ [ 237.513, 155.974,-176.526], [ -52.879,   5.296,   5.774], [  -7.421, -52.768,   1.120], [  -9.440,  39.508,  59.010] ] ),
                (  40, [ [ 185.657, 157.799,-171.994], [ -42.801,   6.979,   3.264], [  17.078, -26.547,   0.836], [  -6.732,  20.365,  70.432] ] ),
                (  41, [ [ 246.491,  63.880,-307.113], [  -7.559,   4.781,   7.258], [ -10.994,  -7.365,  11.231], [  30.221,  28.933,  71.221] ] ),
                (  42, [ [ 239.325,  70.695,-300.571], [  -8.415,   6.741,   6.479], [  -7.094,  -9.314,   3.351], [  10.779,  13.380,  72.272] ] ),
                (  43, [ [ 231.513,  77.178,-292.656], [ -12.525,   4.255,   3.319], [  -0.928, -16.243,  -4.197], [  11.706,  13.532,  59.617] ] ),
                (  44, [ [ 230.978,  62.444,-297.245], [  -9.805,   9.975,   8.601], [  -8.962,  -8.354,   1.170], [  -5.556,   2.237,  55.703] ] ),
                (  45, [ [ 258.329,  78.766,-234.210], [  -8.603,   4.498,   0.874], [ -37.867, -20.422,   2.056], [   3.424,   4.618,  67.449] ] ),
                (  46, [ [ 248.799,  84.344,-233.104], [ -10.725,   6.321,   0.445], [ -24.858, -21.841,  -4.453], [ -12.855,  -3.519,  64.769] ] ),
                (  47, [ [ 238.275,  93.157,-232.136], [ -12.861,   7.971,  -1.034], [  -9.789, -33.602, -12.451], [  -9.411,  14.946,  61.906] ] ),
                (  48, [ [ 223.573,  66.187,-240.080], [ -17.027,  20.665,  -0.831], [ -28.759,  -7.073,  -9.354], [ -34.523,   0.750,  50.708] ] ),
                (  49, [ [ 254.223,  82.226,-174.237], [ -21.821,  14.346,  -0.313], [ -70.819, -36.828,  -4.473], [  -6.474,   1.765,  58.654] ] ),
                (  50, [ [ 232.669,  96.602,-174.812], [ -20.714,  13.936,   0.272], [ -45.067, -35.411,  -8.030], [ -18.872,  10.884,  54.020] ] ),
                (  51, [ [ 211.888, 109.358,-175.186], [ -20.256,  12.504,   0.821], [ -16.313, -50.413, -13.321], [ -35.462,  14.924,  45.481] ] ),
                (  52, [ [ 187.821,  69.713,-187.140], [ -17.219,  27.275,   2.313], [ -45.037, -16.749, -14.126], [ -30.897,   6.798,  50.061] ] ),
                (  53, [ [ 213.425, 207.382, -42.148], [ -56.500,   0.342,  -5.827], [   6.048, -18.275, -16.938], [  -5.756, -22.958,  37.324] ] ),
                (  54, [ [ 258.130, 182.777, -53.571], [ -32.759,  -3.828,  -5.952], [  46.842, -36.257, -14.249], [ -42.970, -18.327,  45.780] ] ),
                (  55, [ [ 221.272, 179.757, -61.791], [ -41.743,  -3.435,  -5.875], [  10.486, -36.897, -21.690], [  -5.754, -11.017,  49.078] ] ),
                (  56, [ [ 175.167, 176.300, -67.698], [ -50.920,  -3.892,   0.663], [  -2.971, -33.698, -41.085], [  -2.018, -13.036,  51.511] ] ),
                (  57, [ [ 270.017, 129.272, -88.096], [ -48.699,  18.376,  -7.516], [ -17.418, -51.841, -36.718], [ -50.518, -29.109,  80.611] ] ),
                (  58, [ [ 224.626, 141.720, -98.406], [ -43.872,   3.149,  -4.298], [  -5.587, -42.256, -31.773], [   2.711, -18.020,  68.031] ] ),
                (  59, [ [ 185.274, 147.077,-102.145], [ -35.411,  -3.106,  -4.228], [  15.191, -29.940, -31.756], [ -14.714,  -1.454,  64.340] ] ),
                (  60, [ [ 236.417,  87.160,-119.825], [ -26.717,  14.046,  -6.516], [ -56.297, -42.646, -20.424], [ -33.135,   2.045,  67.489] ] ),
                (  61, [ [ 209.605, 101.124,-126.121], [ -27.728,  12.727,  -4.885], [ -42.756, -25.066, -21.644], [ -36.638,   1.272,  45.800] ] ),
                (  62, [ [ 181.792, 113.536,-131.292], [ -27.851,  13.168,  -2.607], [  -7.595, -34.516,  -8.836], [ -30.082,  -2.456,  33.978] ] ),
                (  63, [ [ 161.721,  78.671,-141.179], [ -21.726,  42.029, -15.240], [ -51.129, -20.611, -10.957], [  -8.563,  21.673,  52.565] ] ),
                (  64, [ [ 203.028, 174.619, -25.286], [ -60.155,  -2.415,  -3.955], [ -17.934, -44.396,   2.254], [  -5.864,   0.361,  32.179] ] ),
                (  65, [ [ 189.729, 132.313, -57.386], [ -66.731,  15.839, -24.611], [  -7.400, -14.578, -13.799], [ -31.717,   2.116,  31.478] ] ),
                (  66, [ [ 162.058, 109.623, -84.659], [ -29.742,  25.246, -50.572], [ -39.636, -28.589, -27.407], [ -49.298,   7.984,  46.787] ] ),
                (  67, [ [ 112.805, 220.636,-344.408], [ -57.668,  31.639, -21.158], [ -27.490,  -7.728,  31.544], [  -7.261,  25.118,  94.160] ] ),
                (  68, [ [ 138.804, 176.487,-317.842], [ -42.283,  17.815,  25.150], [  35.114, -29.696,  45.703], [ -14.588,  30.925,  88.491] ] ),
                (  69, [ [  91.579, 200.374,-316.049], [ -54.312,  26.071, -18.610], [ -21.624, -23.063,  24.318], [   4.200,  -7.127,  69.610] ] ),
                (  70, [ [  45.375, 218.344,-353.416], [ -33.266,   4.881, -54.504], [ -61.732, -41.224,   6.887], [   0.041,  11.357,  87.726] ] ),
                (  71, [ [ 157.132, 141.529,-272.796], [ -81.449,  61.031, -11.075], [ -12.618, -42.064,  37.035], [  -3.164,  13.541,  40.904] ] ),
                (  72, [ [  74.446, 172.925,-295.847], [ -76.526,   2.015, -34.054], [ -12.428, -38.556,  16.527], [   4.041,  -7.852,  55.914] ] ),
                (  73, [ [  19.591, 150.815,-334.755], [  -3.346, -58.150, -34.776], [  -2.241, -66.932,  16.771], [ -37.214,  32.111,  65.155] ] ),
                (  74, [ [ 110.041, 132.222,-267.112], [ -38.045,  -0.257,   4.674], [ -17.685, -35.955,   7.777], [  13.262,   5.765,  25.693] ] ),
                (  75, [ [  69.151, 126.208,-283.827], [ -43.252, -15.831, -25.640], [   5.343, -46.939,   6.574], [  -2.573,   8.979,  43.158] ] ),
                (  76, [ [  36.295,  94.586,-323.318], [ -23.915, -46.011, -46.866], [  28.030, -41.990,  18.732], [ -35.404,  53.450,  65.721] ] ),
                (  77, [ [ 102.468,  96.616,-272.124], [ -19.736, -13.518,  -6.858], [   7.724, -16.668,   0.398], [   8.984,  23.773,  34.657] ] ),
                (  78, [ [  83.599,  83.999,-282.740], [ -14.132, -14.812, -15.431], [  32.211, -10.811,   2.136], [ -23.147,  18.638,  18.839] ] ),
                (  79, [ [  67.542,  71.106,-298.778], [ -14.808, -11.987, -18.636], [  32.574, -12.596,  14.591], [ -50.592,  24.213,  13.600] ] ),
                (  80, [ [ 109.300, 234.171,-248.531], [ -52.302,  25.979, -18.010], [ -19.303, -36.966,   0.740], [  -4.582,   1.836,  96.421] ] ),
                (  81, [ [ 135.331, 190.757,-238.135], [ -39.821,   0.430,  -4.178], [  22.077, -42.173,   7.556], [  -3.889,   9.995,  73.763] ] ),
                (  82, [ [  91.699, 199.576,-247.800], [ -46.192,  17.407, -15.151], [ -16.031, -32.155,   0.697], [  -3.291,   2.421,  66.468] ] ),
                (  83, [ [  46.055, 227.254,-268.328], [ -44.924,  35.895, -26.293], [ -53.545, -36.498, -12.333], [   1.708,   5.118,  82.513] ] ),
                (  84, [ [ 152.423, 152.232,-233.455], [ -80.326,  24.447,  -7.950], [  -7.571, -34.911,  -1.433], [  -4.926,  12.512,  36.525] ] ),
                (  85, [ [  77.265, 169.881,-247.131], [ -69.352,  10.546, -19.469], [ -10.609, -28.577,   2.252], [   1.874,   0.636,  41.232] ] ),
                (  86, [ [  14.896, 174.390,-270.710], [ -54.454,  -2.347, -27.972], [ -12.870, -45.688,   3.505], [  -0.893,  15.664,  55.197] ] ),
                (  87, [ [ 128.461, 142.532,-236.966], [ -58.190,   0.601,   0.855], [ -23.184, -13.581,  -4.697], [  19.504,  21.536,  33.741] ] ),
                (  88, [ [  70.179, 142.990,-243.592], [ -57.694,   0.305, -14.313], [  -4.787, -27.614,   2.693], [   4.708,  24.314,  36.010] ] ),
                (  89, [ [  14.153, 142.929,-264.777], [ -53.191,  -0.026, -29.220], [   3.625, -31.174,   8.060], [   4.661,  44.056,  51.260] ] ),
                (  90, [ [ 112.858, 122.968,-231.669], [ -45.051, -10.899,  -8.599], [ -10.735, -28.480,   2.607], [  14.630,  28.758,  45.554] ] ),
                (  91, [ [  67.804, 115.230,-241.806], [ -44.888,  -4.537, -11.644], [   7.971, -30.404,   4.318], [  -6.116,  42.327,  60.537] ] ),
                (  92, [ [  23.424, 113.892,-254.850], [ -43.703,   1.854, -14.388], [  21.699, -35.829,  12.761], [ -29.770,  57.684,  72.277] ] ),
                (  93, [ [ 104.207, 234.698,-152.733], [ -57.745,  26.895,  -7.074], [ -25.137, -25.018, -30.805], [   0.558,  -2.469,  77.755] ] ),
                (  94, [ [ 135.749, 192.199,-173.993], [ -57.597,   9.559, -12.340], [  21.057, -36.953, -26.041], [   2.245,  -7.457,  61.353] ] ),
                (  95, [ [  84.928, 206.459,-183.823], [ -43.517,  18.872,  -7.207], [ -13.067, -31.107, -30.940], [   0.766,  -1.586,  66.478] ] ),
                (  96, [ [  49.256, 228.018,-188.624], [ -27.295,  23.783,  -2.350], [ -46.031, -28.715, -40.634], [   2.797,  -2.517,  77.864] ] ),
                (  97, [ [ 146.834, 163.963,-199.827], [ -73.680,   9.289, -14.410], [  -1.766, -30.206, -31.659], [ -15.120,   1.557,  27.005] ] ),
                (  98, [ [  78.264, 173.394,-213.785], [ -63.451,   9.570, -13.504], [  -7.411, -31.806, -29.975], [   1.456,  -1.298,  43.628] ] ),
                (  99, [ [  19.915, 182.976,-226.748], [ -53.236,   9.593, -12.420], [ -16.164, -43.819, -39.572], [   3.936,   4.415,  60.578] ] ),
                ( 100, [ [ 108.125, 230.310, -93.528], [ -60.591,  28.132,   1.067], [ -13.931, -33.044, -12.007], [   4.596, -12.946,  57.694] ] ),
                ( 101, [ [ 141.968, 177.527,-116.980], [ -50.186,  17.132,  -3.637], [  13.607, -45.829, -52.443], [   9.726, -10.010,  55.555] ] ),
                ( 102, [ [  93.588, 196.028,-117.204], [ -45.032,  22.969,   1.979], [ -14.635, -34.317, -34.909], [   8.867, -14.370,  62.135] ] ),
                ( 103, [ [  51.988, 222.000,-112.818], [ -38.646,  27.605,   7.146], [ -48.820, -28.128, -36.207], [   1.902,  -5.868,  69.749] ] ),
                ( 104, [ [ 133.055, 155.147,-183.014], [ -50.398,   9.084,  23.516], [  -9.198, -33.156,  20.315], [  12.146,  20.340,  62.470] ] ),
                ( 105, [ [  80.120, 164.701,-163.613], [ -55.883,  12.515,  11.024], [   5.477, -51.428,  35.601], [  13.858,  40.686,  62.263] ] ),
                ( 106, [ [  22.839, 178.915,-159.278], [ -58.296,  15.237,  -1.951], [ -15.341, -83.376,  10.208], [  25.833,  57.492,  69.483] ] ),
                ( 107, [ [ 113.145,  88.046,-272.215], [  -9.350,  -8.812,  -7.836], [  13.248,  -7.657,  -1.039], [  -0.655,   3.227,  25.179] ] ),
                ( 108, [ [ 104.281,  79.019,-281.413], [  -8.550,  -9.748,  -9.808], [  22.001,   2.416,   6.648], [ -24.411,   8.417,  37.367] ] ),
                ( 109, [ [  94.545,  69.272,-290.944], [  -5.290, -12.555, -10.931], [  29.050,   6.005,  16.206], [ -30.419,   6.714,  45.052] ] ),
                ( 110, [ [ 126.005,  78.321,-270.120], [  -1.523,  -8.676,  -5.124], [  23.157,  -2.063,  11.752], [  14.097, -10.214,  23.163] ] ),
                ( 111, [ [ 110.779,  90.715,-234.929], [ -20.626,  -3.554,   0.196], [  25.282, -19.816,  -8.626], [  -7.947,   4.073,  48.804] ] ),
                ( 112, [ [  87.111,  87.499,-235.179], [ -25.846,  -6.325,  -4.452], [  34.640, -25.610,   1.322], [ -10.371,   9.996,  53.349] ] ),
                ( 113, [ [  60.277,  76.353,-242.362], [ -29.944,  -9.378, -10.303], [  59.866, -22.816,  11.218], [ -24.802,  14.723,  58.770] ] ),
                ( 114, [ [ 134.247,  72.870,-242.126], [  -0.240, -10.729,   1.399], [  58.738,   2.608,   2.449], [   2.955,  -0.060,  31.056] ] ),
                ( 115, [ [ 120.546, 104.051,-176.461], [ -29.942,  -7.987,   0.166], [   1.555, -50.037, -14.328], [  26.018,   2.579,  44.916] ] ),
                ( 116, [ [  86.014,  97.683,-176.263], [ -39.074,  -4.278,   0.229], [  32.793, -54.376, -24.428], [  11.840,   5.546,  52.991] ] ),
                ( 117, [ [  42.944,  92.427,-176.508], [ -47.600,   1.553,   0.293], [  65.220, -66.919, -26.935], [   7.926,   7.876,  68.237] ] ),
                ( 118, [ [ 131.420,  72.412,-210.024], [  -0.226, -19.168,   1.863], [  53.830,  -1.229, -27.395], [  -0.892,  -2.235,  47.338] ] ),
                ( 119, [ [ 113.261, 209.394, -39.187], [ -58.015,  16.946,   3.696], [  -7.484, -28.183, -16.526], [   8.287, -32.069,  37.482] ] ),
                ( 120, [ [ 153.826, 168.085, -64.529], [ -56.165,  -3.576,   3.482], [   4.306, -46.196, -41.906], [ -10.396,  -1.517,  54.580] ] ),
                ( 121, [ [ 102.498, 178.383, -60.042], [ -46.388,  16.516,   4.961], [ -14.042, -33.069, -26.005], [  16.284, -10.358,  47.201] ] ),
                ( 122, [ [  64.189, 202.493, -54.339], [ -28.979,  30.763,   5.289], [ -43.499, -29.808, -24.779], [  33.688, -24.925,  55.097] ] ),
                ( 123, [ [ 123.540, 138.168,-101.485], [ -34.841,  -0.986,   9.056], [  -6.374, -36.724, -42.407], [  -7.235, -12.421,  65.846] ] ),
                ( 124, [ [  85.021, 144.013, -90.695], [ -43.409,   7.248,   9.410], [  -0.486, -43.000, -39.187], [  23.904, -17.493,  55.956] ] ),
                ( 125, [ [  37.909, 155.369, -80.880], [ -50.463,  16.948,   9.056], [   0.425, -61.681, -36.664], [  34.615, -21.375,  78.761] ] ),
                ( 126, [ [ 141.972, 106.508,-140.392], [ -33.103,  -6.698,   5.569], [  24.138, -37.596, -25.097], [  17.276,  -3.374,  47.967] ] ),
                ( 127, [ [ 107.369,  98.979,-132.633], [ -36.268,  -6.344,  10.645], [  42.344, -39.637, -37.346], [  30.705,   0.158,  44.660] ] ),
                ( 128, [ [  70.498,  93.229,-117.454], [ -37.708,  -2.027,  19.331], [  68.482, -57.114, -32.013], [  58.629, -15.041,  46.951] ] ),
                ( 129, [ [ 163.749,  72.265,-157.014], [  -9.560, -38.172,  14.941], [  64.175, -23.344,   7.170], [ -12.951,  22.136,  66.011] ] ),
                ( 130, [ [ 121.257, 174.979, -23.486], [ -61.541,  10.197,  19.011], [  -3.863, -47.244,  -6.568], [  14.695,  -1.216,  28.119] ] ),
                ( 131, [ [ 117.057, 132.479, -55.764], [ -61.489,   4.844,  37.672], [  11.585, -39.956, -35.077], [  34.195,  -6.085,  11.996] ] ),
                ( 132, [ [ 146.435, 101.417, -88.480], [ -12.117, -28.636,  11.354], [  25.548, -28.865, -55.831], [  50.980,  -2.219,  39.663] ] )
                ]

            # Create nodes
            nodeIndex = 0
            nodeIdentifier = 1
            lowerLeftNodeIds = []
            upperLeftNodeIds = []
            lowerRightNodeIds = []
            upperRightNodeIds = []

            # Left lung nodes
            nodeIndex, nodeIdentifier = getLungNodes(leftLung, cache, coordinates, generateParameters,
                nodes, nodetemplate, nodeFieldParameters,
                lElementsCount1, lElementsCount2, lElementsCount3,
                uElementsCount1, uElementsCount2, uElementsCount3,
                lowerLeftNodeIds, upperLeftNodeIds, nodeIndex, nodeIdentifier)

            # Right lung nodes
            getLungNodes(rightLung, cache, coordinates, generateParameters,
                nodes, nodetemplate, nodeFieldParameters,
                lElementsCount1, lElementsCount2, lElementsCount3,
                uElementsCount1, uElementsCount2, uElementsCount3,
                lowerRightNodeIds, upperRightNodeIds, nodeIndex, nodeIdentifier)

            # Create elements
            elementIdentifier = 1

            # Left lung elements
            elementIdentifier = getLungElements(leftLung, coordinates, eftfactory, eftRegular, elementtemplateRegular,
                elementtemplateCustom, mesh, lungMeshGroup,
                leftLungMeshGroup, lowerLeftLungMeshGroup, upperLeftLungMeshGroup, None,
                lElementsCount1, lElementsCount2, lElementsCount3,
                uElementsCount1, uElementsCount2, uElementsCount3,
                lowerLeftNodeIds, upperLeftNodeIds, elementIdentifier)

            # Right lung elements
            getLungElements(rightLung, coordinates, eftfactory, eftRegular, elementtemplateRegular,
                elementtemplateCustom, mesh, lungMeshGroup,
                rightLungMeshGroup, lowerRightLungMeshGroup, upperRightLungMeshGroup, middleRightLungMeshGroup,
                lElementsCount1, lElementsCount2, lElementsCount3,
                uElementsCount1, uElementsCount2, uElementsCount3,
                lowerRightNodeIds, upperRightNodeIds, elementIdentifier)

        elif isMouse:
            # valueLabels = [ Node.VALUE_LABEL_VALUE, Node.VALUE_LABEL_D_DS1, Node.VALUE_LABEL_D_DS2, Node.VALUE_LABEL_D_DS3 ]
            nodeFieldParameters = [
                (   1, [ [  -0.065,  -9.796,   3.325], [   0.937,   0.967,   2.475], [  -1.729,  -0.557,   0.279], [  -1.975,  -3.883,   3.531] ] ),
                (   2, [ [  -0.005,  -9.228,   5.766], [  -0.740,   0.153,   2.178], [  -1.517,   0.368,  -0.214], [  -0.719,  -2.105,   2.416] ] ),
                (   3, [ [  -1.875, -11.056,   1.286], [  -0.219,   0.917,   2.499], [  -2.399,  -0.369,  -1.067], [  -2.613,  -2.519,   4.948] ] ),
                (   4, [ [  -1.934, -10.002,   3.652], [   0.102,   1.186,   2.220], [  -1.962,   0.159,   0.368], [  -1.824,  -2.135,   2.949] ] ),
                (   5, [ [  -1.682,  -8.709,   5.704], [   0.400,   1.392,   1.871], [  -1.822,   0.667,   0.092], [  -0.588,  -0.212,   2.945] ] ),
                (   6, [ [  -3.994, -10.671,   1.239], [  -0.010,   0.980,   3.198], [  -2.147,   0.894,   0.422], [  -1.854,  -1.870,   4.958] ] ),
                (   7, [ [  -3.898,  -9.454,   4.045], [   0.201,   1.443,   2.382], [  -1.940,   0.835,   0.331], [  -0.945,  -0.588,   3.061] ] ),
                (   8, [ [  -3.619,  -7.886,   5.979], [   0.351,   1.663,   1.459], [  -1.917,   1.039,   0.160], [  -0.239,   0.306,   2.676] ] ),
                (   9, [ [  -5.866,  -9.333,   2.127], [   0.017,   0.599,   2.310], [  -1.708,   1.801,   1.548], [  -1.046,  -0.547,   4.429] ] ),
                (  10, [ [  -5.760,  -8.340,   4.302], [   0.195,   1.375,   1.988], [  -1.605,   1.163,   0.135], [  -0.133,   0.325,   2.991] ] ),
                (  11, [ [  -5.482,  -6.636,   6.015], [   0.352,   1.990,   1.408], [  -1.659,   1.259,  -0.051], [   0.253,   0.264,   2.502] ] ),
                (  12, [ [  -7.104,  -7.175,   4.334], [  -0.447,   2.068,   1.949], [  -1.075,   1.156,  -0.070], [  -0.356,   0.079,   2.650] ] ),
                (  13, [ [  -6.937,  -5.392,   5.891], [   0.734,   1.407,   1.093], [  -1.245,   1.224,  -0.197], [   0.686,   1.130,   2.179] ] ),
                (  14, [ [  -1.552, -12.419,   7.122], [   1.890,   1.231,   1.523], [  -1.810,   0.921,   0.019], [  -0.917,  -1.202,   3.916] ] ),
                (  15, [ [  -0.546, -10.443,   8.761], [   0.110,   2.462,   1.588], [  -1.254,   2.168,   0.009], [  -0.304,  -0.154,   3.377] ] ),
                (  16, [ [  -3.845, -12.690,   6.040], [   0.312,   0.908,   0.873], [  -2.164,   0.541,  -0.593], [  -1.284,  -0.707,   4.477] ] ),
                (  17, [ [  -3.226, -11.203,   7.180], [   0.923,   2.056,   1.399], [  -1.508,   1.494,   0.097], [  -0.631,  -0.117,   3.898] ] ),
                (  18, [ [  -1.959,  -8.562,   8.761], [   1.608,   3.222,   1.760], [  -1.559,   1.573,  -0.009], [   0.043,   0.510,   3.119] ] ),
                (  19, [ [  -5.486, -11.634,   5.936], [   1.002,   2.174,   1.353], [  -1.537,   1.706,   0.088], [  -1.097,  -0.022,   4.344] ] ),
                (  20, [ [  -4.513,  -9.465,   7.315], [   0.943,   2.164,   1.405], [  -1.275,   1.729,   0.067], [  -0.257,   0.585,   3.386] ] ),
                (  21, [ [  -3.600,  -7.306,   8.745], [   0.884,   2.152,   1.455], [  -1.541,   1.296,  -0.079], [   0.279,   0.850,   2.824] ] ),
                (  22, [ [  -6.643,  -9.354,   6.259], [   0.932,   1.511,   0.937], [  -0.875,   2.494,   0.585], [  -0.498,   0.512,   3.784] ] ),
                (  23, [ [  -5.771,  -7.752,   7.316], [   0.811,   1.689,   1.173], [  -1.374,   1.364,  -0.120], [   0.112,   0.848,   3.019] ] ),
                (  24, [ [  -5.034,  -5.983,   8.607], [   0.661,   1.847,   1.407], [  -1.280,   1.582,  -0.264], [   0.640,   1.039,   2.644] ] ),
                (  25, [ [  -7.173,  -6.742,   7.102], [   0.256,   2.728,   1.025], [  -1.394,   0.639,  -0.300], [   0.226,   0.785,   2.837] ] ),
                (  26, [ [  -6.099,  -4.175,   8.215], [   1.805,   2.297,   1.148], [  -0.840,   2.005,  -0.513], [   0.989,   1.302,   2.468] ] ),
                (  27, [ [  -1.931, -12.436,  10.559], [   2.490,   1.685,   1.183], [  -1.152,   2.239,   0.691], [  -0.543,   0.325,   3.559] ] ),
                (  28, [ [  -0.562,  -9.479,  12.042], [   0.224,   3.805,   1.603], [  -0.781,   1.894,  -0.160], [  -0.446,   0.306,   3.165] ] ),
                (  29, [ [  -4.520, -12.656,   9.956], [   1.306,   2.320,   0.989], [  -2.411,   0.929,  -0.484], [  -0.467,   0.650,   3.646] ] ),
                (  30, [ [  -3.133, -10.254,  10.923], [   1.468,   2.485,   0.944], [  -1.240,   2.100,   0.029], [  -0.185,   0.740,   3.422] ] ),
                (  31, [ [  -1.582,  -7.688,  11.839], [   1.633,   2.646,   0.889], [  -1.252,   1.666,  -0.243], [  -0.062,   0.201,   3.114] ] ),
                (  32, [ [  -6.197, -10.924,   9.694], [   2.066,   2.908,   0.945], [  -1.256,   2.209,  -0.192], [  -0.237,   1.123,   3.544] ] ),
                (  33, [ [  -4.378,  -8.282,  10.639], [   1.571,   2.373,   0.945], [  -1.205,   1.806,  -0.312], [   0.082,   0.790,   3.195] ] ),
                (  34, [ [  -3.045,  -6.183,  11.560], [   1.094,   1.823,   0.895], [  -1.311,   1.582,  -0.316], [   0.413,   0.449,   2.911] ] ),
                (  35, [ [  -6.889,  -8.424,   9.594], [   1.358,   1.619,   0.616], [  -0.247,   2.735,   0.102], [   0.264,   1.110,   3.223] ] ),
                (  36, [ [  -5.532,  -6.643,  10.306], [   1.352,   1.940,   0.807], [  -1.150,   1.335,  -0.377], [   0.460,   0.901,   2.979] ] ),
                (  37, [ [  -4.198,  -4.543,  11.211], [   1.314,   2.256,   1.003], [  -0.956,   1.708,  -0.379], [   0.818,   0.651,   2.723] ] ),
                (  38, [ [  -6.631,  -5.598,   9.911], [   0.947,   2.938,   0.608], [  -1.035,   0.745,  -0.407], [   0.985,   1.066,   2.934] ] ),
                (  39, [ [  -4.952,  -2.795,  10.809], [   2.344,   2.594,   1.154], [  -0.547,   1.775,  -0.422], [   1.204,   0.559,   2.597] ] ),
                (  40, [ [  -2.633, -11.754,  14.139], [   2.071,   1.010,   1.013], [  -0.945,   2.132,  -0.110], [  -1.195,   1.290,   2.629] ] ),
                (  41, [ [  -1.347,  -9.763,  14.882], [   0.433,   2.566,   0.409], [  -0.678,   1.574,  -0.009], [  -0.854,   0.074,   2.621] ] ),
                (  42, [ [  -4.784, -11.502,  13.197], [   1.124,   1.885,   0.742], [  -1.931,   1.317,  -0.715], [   0.333,   1.243,   2.917] ] ),
                (  43, [ [  -3.534,  -9.710,  13.960], [   1.372,   1.693,   0.782], [  -0.855,   1.954,  -0.249], [  -0.469,  -0.153,   2.453] ] ),
                (  44, [ [  -2.048,  -8.127,  14.755], [   1.594,   1.469,   0.806], [  -0.723,   1.694,  -0.246], [  -0.314,  -0.890,   2.712] ] ),
                (  45, [ [  -5.996,  -9.475,  12.892], [   1.702,   1.707,   0.766], [  -0.700,   2.261,  -0.310], [   0.836,   1.574,   3.010] ] ),
                (  46, [ [  -4.343,  -7.849,  13.649], [   1.605,   1.545,   0.746], [  -0.666,   1.885,  -0.362], [  -0.139,   0.174,   2.483] ] ),
                (  47, [ [  -2.788,  -6.384,  14.384], [   1.505,   1.385,   0.724], [  -0.708,   1.748,  -0.467], [   0.535,  -0.432,   3.006] ] ),
                (  48, [ [  -6.144,  -7.177,  12.602], [   1.219,   1.178,   0.664], [   0.378,   2.505,  -0.032], [   1.156,   1.371,   2.634] ] ),
                (  49, [ [  -4.864,  -5.953,  13.240], [   1.342,   1.270,   0.612], [  -0.419,   1.595,  -0.398], [   0.399,   0.411,   2.262] ] ),
                (  50, [ [  -3.461,  -4.637,  13.823], [   1.464,   1.360,   0.553], [  -0.507,   1.711,  -0.609], [   0.851,  -0.093,   2.334] ] ),
                (  51, [ [  -5.189,  -4.659,  12.873], [   1.226,   2.118,   0.297], [  -0.230,   0.991,  -0.337], [   1.027,  -0.315,   2.688] ] ),
                (  52, [ [  -3.809,  -2.979,  13.175], [   1.496,   1.213,   0.301], [  -0.188,   1.598,  -0.682], [   1.263,  -0.911,   2.643] ] ),
                (  53, [ [  -3.970, -10.258,  15.671], [   1.390,   1.095,   2.043], [  -1.079,   2.178,   0.784], [  -0.360,  -0.842,   0.865] ] ),
                (  54, [ [  -2.210,  -9.388,  17.161], [   2.018,   0.610,   0.889], [  -0.386,   1.792,   1.714], [  -0.009,  -1.596,   2.053] ] ),
                (  55, [ [  -4.580,  -7.856,  15.569], [   2.111,   1.246,   2.395], [  -0.347,   2.323,  -0.475], [  -0.329,  -0.186,   1.335] ] ),
                (  56, [ [  -1.947,  -7.070,  17.506], [   3.031,   0.314,   1.422], [  -0.144,   2.644,  -0.635], [   1.140,  -0.933,   3.217] ] ),
                (  57, [ [  -4.667,  -5.752,  14.788], [   1.900,   1.261,   1.657], [  -0.329,   1.750,  -1.462], [  -0.006,  -0.009,   0.819] ] ),
                (  58, [ [  -2.541,  -4.727,  15.862], [   2.251,   0.755,   0.471], [  -0.939,   2.148,  -2.206], [   0.983,  -0.085,   1.736] ] ),
                (  59, [ [   3.210, -14.400,   2.610], [   2.450,  -0.855,   0.015], [   0.344,   2.190,   1.230], [   0.004,  -0.802,   2.520] ] ),
                (  60, [ [   0.882, -11.400,   2.590], [   2.060,  -0.299,   1.500], [  -1.230,   2.970,   0.753], [  -0.220,  -1.370,   1.920] ] ),
                (  61, [ [   3.470, -12.000,   3.890], [   3.070,  -1.430,   0.643], [   0.575,   1.720,   2.000], [   0.020,  -1.120,   1.700] ] ),
                (  62, [ [   6.560, -14.000,   3.580], [   2.970,  -2.530,  -1.240], [   3.130,   1.390,   1.620], [  -0.067,  -0.640,   2.480] ] ),
                (  63, [ [   0.777, -10.500,   6.790], [   3.070,  -0.427,  -0.519], [   1.100,   0.841,   2.570], [  -1.040,  -1.140,   1.950] ] ),
                (  64, [ [   4.140, -11.000,   6.270], [   4.180,  -0.534,  -0.582], [   0.534,   1.270,   2.350], [  -0.111,  -0.234,   1.970] ] ),
                (  65, [ [   8.840, -11.700,   5.540], [   5.220,  -0.852,  -0.881], [   2.290,   3.240,   2.570], [  -0.402,  -0.682,   1.530] ] ),
                (  66, [ [   1.690,  -9.410,   9.460], [   1.740,   0.272,  -0.649], [  -0.329,   0.888,   2.230], [  -0.551,  -1.140,   0.636] ] ),
                (  67, [ [   4.490,  -9.400,   8.570], [   3.820,   0.492,  -0.796], [   0.082,   2.480,   2.400], [  -0.025,  -0.138,   0.935] ] ),
                (  68, [ [   9.350,  -8.580,   8.030], [   3.280,   1.257,   0.505], [  -0.550,   2.580,   1.570], [  -0.334,  -1.540,   0.450] ] ),
                (  69, [ [   1.020,  -8.070,  11.900], [   2.340,   2.470,  -1.510], [  -0.991,   3.000,   1.340], [   0.189,  -0.826,   1.250] ] ),
                (  70, [ [   4.180,  -6.030,  10.700], [   3.390,   1.340,  -1.050], [  -1.250,   3.110,   1.170], [   0.224,  -1.860,   0.435] ] ),
                (  71, [ [   7.920,  -5.440,   9.890], [   3.645,   0.557,  -0.598], [  -0.833,   1.420,   0.607], [   0.646,  -1.310,   0.800] ] ),
                (  72, [ [   3.310, -15.100,   5.270], [   2.590,  -0.536,  -0.027], [   0.154,   2.250,   0.508], [   0.265,  -0.376,   3.060] ] ),
                (  73, [ [   0.919, -13.400,   6.670], [   2.531,   0.435,   0.042], [  -1.550,   1.750,   2.170], [   0.170,  -0.555,   3.210] ] ),
                (  74, [ [   3.660, -13.079,   6.592], [   2.929,  -0.582,  -0.174], [   0.440,   1.980,   1.540], [   0.280,  -0.799,   2.900] ] ),
                (  75, [ [   6.470, -14.300,   6.160], [   2.660,  -2.230,  -0.029], [   1.750,   1.430,   0.968], [   0.246,   0.206,   2.690] ] ),
                (  76, [ [  -0.197, -11.600,   8.900], [   4.380,   0.933,  -0.405], [   1.030,   0.731,   1.200], [  -0.254,  -0.215,   2.420] ] ),
                (  77, [ [   4.194, -11.285,   8.315], [   4.413,  -0.561,  -0.896], [   0.433,   1.590,   1.780], [   0.159,  -0.278,   2.030] ] ),
                (  78, [ [   8.290, -12.300,   7.110], [   2.565,  -1.430,  -0.763], [   1.030,   1.970,   0.913], [  -0.404,  -0.279,   1.460] ] ),
                (  79, [ [   0.903, -10.800,  10.400], [   2.720,   1.160,  -0.463], [   0.467,   1.340,   2.460], [  -0.941,  -1.123,   0.973] ] ),
                (  80, [ [   4.533,  -9.714,   9.976], [   4.488,   0.066,  -1.130], [   0.190,   1.690,   1.540], [  -0.015,  -1.180,   1.140] ] ),
                (  81, [ [   9.030, -10.100,   8.410], [   2.042,  -1.075,  -1.056], [   0.086,   1.440,   1.870], [  -0.526,  -1.730,   0.704] ] ),
                (  82, [ [   1.402,  -9.183,  13.231], [   2.301,   1.118,  -1.690], [   0.899,   1.610,   1.220], [  -0.216,  -1.290,   1.830] ] ),
                (  83, [ [   4.540,  -7.870,  11.300], [   3.581,   1.060,  -0.761], [  -0.319,   2.310,   1.229], [   0.480,  -1.810,   0.715] ] ),
                (  84, [ [   8.330,  -6.820,  10.600], [   4.011,   1.104,  -0.404], [  -0.974,   2.100,   1.310], [   0.308,  -2.360,   1.310] ] ),
                (  85, [ [   3.670, -15.200,   8.430], [   3.660,  -0.199,   0.119], [   0.444,   1.710,   1.590], [   0.169,   0.359,   2.690] ] ),
                (  86, [ [   1.240, -13.700,  10.100], [   2.300,   0.534,   0.147], [  -1.130,   0.957,   1.010], [   0.380,  -0.158,   3.000] ] ),
                (  87, [ [   4.040, -13.400,   9.710], [   2.780,   0.108,  -0.901], [   0.444,   1.850,   0.914], [   0.631,   0.425,   3.050] ] ),
                (  88, [ [   6.820, -13.900,   8.870], [   2.890,  -0.778,  -0.241], [   2.120,   1.570,   0.272], [   0.388,   0.649,   2.080] ] ),
                (  89, [ [  -0.215, -11.896,  11.604], [   3.400,   0.100,  -1.146], [   1.058,   1.238,  -1.219], [   0.219,  -0.021,   1.929] ] ),
                (  90, [ [   4.460, -11.500,  10.300], [   4.100,   0.284,  -1.230], [   0.231,   1.930,   0.058], [   0.342,   0.088,   1.669] ] ),
                (  91, [ [   8.430, -11.600,   9.040], [   2.103,  -0.397,  -0.462], [   0.832,   1.390,  -0.626], [   0.424,   1.620,   2.110] ] ),
                (  92, [ [   4.071, -14.598,  11.204], [   2.312,   0.617,  -0.270], [   0.659,   1.603,   0.607], [   0.408,   0.677,   3.130] ] ),
                (  93, [ [   1.600, -13.500,  13.300], [   3.152,   0.713,  -1.535], [  -0.989,   1.189,   1.047], [   0.671,   0.452,   2.110] ] ),
                (  94, [ [   4.610, -12.800,  11.900], [   2.439,   0.412,  -0.573], [   0.519,   2.150,   0.568], [  -0.405,  -0.009,   1.837] ] ),
                (  95, [ [   7.180, -13.000,  11.100], [   1.249,  -0.681,  -0.509], [   1.620,   2.250,   0.547], [  -0.201,   0.761,   2.900] ] ),
                (  96, [ [   0.195, -11.600,  14.400], [   4.670,   1.970,  -2.390], [   0.528,   0.717,   1.760], [  -0.160,  -0.521,   0.391] ] ),
                (  97, [ [   4.953,  -9.852,  12.345], [   4.342,   0.689,  -0.966], [   0.313,   1.530,   2.230], [   0.196,  -2.320,   0.499] ] ),
                (  98, [ [   8.577,  -9.273,  11.710], [   1.676,   0.010,  -0.415], [  -0.589,   1.410,   2.690], [  -0.523,  -3.640,   0.342] ] ),
                (  99, [ [   0.175,  -4.790,  11.400], [   2.190,   1.070,  -0.477], [  -1.170,   3.240,  -0.420], [   2.950,  -1.420,   2.270] ] ),
                ( 100, [ [   2.420,  -3.620,  11.000], [   2.290,   1.280,  -0.458], [  -2.620,   2.340,   0.246], [   1.850,  -0.531,   1.670] ] ),
                ( 101, [ [   4.360,  -1.840,  10.700], [   2.080,   1.650,  -0.356], [  -4.710,   2.200,   0.651], [   1.870,  -0.623,   1.670] ] ),
                ( 102, [ [  -1.020,  -1.690,  11.000], [   0.774,   1.810,  -0.267], [  -1.410,   0.430,   0.197], [   0.910,   1.900,   2.730] ] ),
                ( 103, [ [   2.502,  -6.103,  13.803], [   1.328,   1.436,  -0.840], [   0.266,   3.660,   0.883], [   1.030,  -1.590,   2.470] ] ),
                ( 104, [ [   3.883,  -4.549,  12.895], [   1.710,   1.650,  -0.785], [  -1.790,   3.190,   1.460], [   0.708,  -1.360,   1.723] ] ),
                ( 105, [ [   6.060,  -2.900,  12.400], [   1.026,   0.453,  -0.088], [  -3.100,   2.210,   1.630], [   0.950,  -1.100,   1.620] ] ),
                ( 106, [ [   1.070,  -1.860,  14.100], [   0.560,   2.900,   0.592], [  -3.000,   0.210,   1.580], [   0.701,  -0.980,   1.709] ] ),
                ( 107, [ [   2.370,  -7.490,  15.900], [   1.757,   1.170,  -0.777], [   0.632,   3.398,  -0.013], [  -0.580,  -1.140,   2.100] ] ),
                ( 108, [ [   4.350,  -6.180,  15.000], [   2.030,   1.570,  -1.030], [  -1.980,   3.340,   2.010], [  -0.071,  -1.660,   2.170] ] ),
                ( 109, [ [   6.580,  -4.520,  13.900], [   0.636,   1.385,  -0.175], [  -1.880,   1.910,   1.250], [  -0.635,  -1.920,   2.680] ] ),
                ( 110, [ [   1.860,  -3.310,  16.000], [   0.375,   2.651,   1.043], [  -2.620,   0.834,   0.855], [  -0.157,  -1.090,   1.660] ] ),
                ( 111, [ [   4.420, -13.700,  14.200], [   2.330,   0.716,   0.007], [  -0.224,   0.741,   0.293], [   0.140,   1.050,   1.940] ] ),
                ( 112, [ [   2.640, -12.700,  15.300], [   0.949,  -0.200,  -0.352], [  -1.440,   1.350,   1.270], [   1.140,   0.586,   1.280] ] ),
                ( 113, [ [   4.270, -12.700,  14.600], [   2.094,   0.410,  -0.447], [  -0.310,   1.480,   0.663], [   0.048,   0.242,   1.175] ] ),
                ( 114, [ [   6.770, -12.200,  14.000], [   1.140,   0.378,   0.299], [   1.210,   1.530,   0.270], [  -1.190,   0.027,   1.810] ] ),
                ( 115, [ [   1.070, -10.900,  16.800], [   2.552,   0.179,  -1.115], [  -0.668,   2.400,   1.380], [   1.790,   0.158,   1.910] ] ),
                ( 116, [ [   3.870, -10.700,  15.600], [   3.162,   0.521,  -1.116], [  -0.108,   2.703,   1.433], [  -0.509,  -0.458,   2.860] ] ),
                ( 117, [ [   7.330, -10.100,  14.400], [   3.170,   0.056,   0.014], [  -0.096,   3.070,   1.140], [  -2.590,  -0.763,   3.560] ] ),
                ( 118, [ [   1.340,  -8.280,  17.800], [   2.522,   0.578,  -0.726], [   0.321,   2.860,   0.625], [   0.361,  -0.635,   1.890] ] ),
                ( 119, [ [   3.760,  -7.780,  17.100], [   2.180,   0.818,  -0.176], [  -1.050,   2.810,   1.590], [  -0.923,  -0.821,   1.773] ] ),
                ( 120, [ [   5.600,  -6.960,  17.000], [   1.520,   0.932,   0.134], [  -2.950,   2.550,   2.230], [  -1.900,  -2.200,   2.720] ] ),
                ( 121, [ [   1.730,  -5.150,  18.500], [   2.920,   1.230,   0.966], [  -2.870,   2.350,   1.050], [   0.358,  -2.130,   1.390] ] ),
                ( 122, [ [   4.230, -12.400,  16.000], [   2.260,  -0.315,  -0.717], [  -0.406,   1.320,   1.510], [   0.025,   0.140,   1.425] ] ),
                ( 123, [ [   3.870, -10.700,  17.600], [   3.790,   0.421,  -0.940], [  -0.811,   1.930,   1.480], [   0.441,   0.350,   1.010] ] ),
                ( 124, [ [   2.990,  -8.500,  18.900], [   2.710,   0.490,  -0.172], [  -1.570,   3.810,   1.440], [  -0.143,  -0.361,   1.173] ] ),
                ( 125, [ [  -5.256,  -3.615,   9.678], [   1.431,  -0.218,   0.244], [  -0.034,   0.840,   0.482], [  -0.034,  -1.861,  -1.109] ] ), 
                ( 126, [ [  -3.163,  -3.753,  10.024], [   1.998,  -0.125,   0.554], [  -0.352,   1.366,   0.314], [   0.381,  -1.931,  -0.427] ] ),
                ( 127, [ [  -1.308,  -3.634,  10.605], [   1.570,  -0.279,   0.426], [  -0.874,   0.635,   0.140], [   0.696,  -0.188,   0.160] ] ),
                ( 128, [ [  -4.923,  -2.328,  10.244], [   2.127,   0.088,  -0.017], [   0.120,   0.863,   0.204], [   0.193,  -0.231,   0.330] ] ),
                ( 129, [ [  -3.248,  -2.232,  10.480], [   1.347,  -0.474,   0.205], [   0.717,   1.641,   0.244], [  -1.194,  -1.202,   0.882] ] ),
                ( 130, [ [  -2.279,  -2.640,  10.767], [   0.501,  -0.456,   0.334], [  -0.569,   1.667,   0.071], [  -1.156,  -1.339,   0.302] ] ),
                ( 131, [ [  -2.155,  -0.594,  10.693], [   2.227,  -1.304,   0.914], [   1.390,   1.635,   0.318], [  -2.814,  -0.709,   1.442] ] ),
                ( 132, [ [  -4.248,  -6.639,   8.394], [   1.740,   0.901,   0.661], [  -1.024,   2.887,   2.404], [   0.805,  -1.416,  -0.969] ] ),
                ( 133, [ [  -2.172,  -5.656,   9.565], [   2.350,   1.212,   1.300], [  -1.733,   1.182,   1.871], [   1.581,  -1.776,  -0.469] ] ),
                ( 134, [ [   0.325,  -3.970,  11.100], [   2.837,   2.077,   1.504], [  -2.675,  -1.748,  -0.026], [   2.814,  -0.800,   0.290] ] ),
                ( 135, [ [  -4.552,  -3.507,  11.117], [   1.150,  -1.012,   0.013], [   0.371,   0.542,   1.370], [   1.194,  -1.736,   0.592] ] ),
                ( 136, [ [  -3.520,  -4.359,  11.205], [   1.102,  -0.573,   0.133], [  -0.942,   1.397,   1.386], [   0.685,  -2.651,   0.560] ] ),
                ( 137, [ [  -2.478,  -4.664,  11.376], [   0.692,  -0.116,   0.329], [  -2.539,   1.258,  -0.040], [   0.843,  -2.519,   0.926] ] ),
                ( 138, [ [  -4.094,  -2.981,  12.308], [   0.997,  -0.374,   0.956], [  -0.200,   1.319,   0.795], [  -0.230,  -3.855,   1.360] ] ),
                ( 139, [ [   0.706, -10.261,   6.981], [   0.891,  -0.068,   0.670], [   1.668,   2.355,   2.534], [  -0.274,  -0.437,   0.614] ] ),
                ( 140, [ [  -0.537,  -9.314,   6.394], [   1.508,   1.987,   4.352], [  -1.916,   0.966,   0.453], [   0.116,  -0.575,   3.118] ] ),
                ( 141, [ [   1.917,  -8.106,   9.174], [   2.635,   0.521,   1.531], [  -0.916,   2.565,   0.895], [  -1.186,  -2.263,   0.937] ] ),
                ( 142, [ [   3.926,  -8.451,   9.489], [   0.856,  -0.482,  -0.630], [   1.606,   2.963,   1.790], [  -1.888,  -0.400,   0.338] ] ),
                ( 143, [ [  -2.632,  -8.214,   7.057], [   1.737,   0.904,   2.177], [  -0.283,   1.961,   4.421], [   1.419,  -0.935,  -0.947] ] ),
                ( 144, [ [  -0.042,  -7.111,   9.129], [   3.302,   1.317,   2.034], [  -2.036,   0.357,   2.247], [   2.121,  -1.261,  -0.190] ] ),
                ( 145, [ [   4.028,  -5.514,  10.763], [   4.795,   1.624,   1.441], [  -5.082,  -1.456,   1.660], [   1.975,  -2.983,  -1.138] ] ),
                ( 146, [ [  -2.421,  -6.826,  10.792], [   0.848,  -0.018,   0.166], [   0.614,   0.094,   2.384], [   1.609,  -1.911,   0.293] ] ),
                ( 147, [ [  -1.566,  -6.895,  11.199], [   1.276,   0.144,   0.696], [  -0.992,   0.072,   1.871], [   1.778,  -2.011,   0.248] ] ),
                ( 148, [ [  -0.122,  -6.439,  12.018], [   1.596,   0.328,   1.282], [  -3.131,  -0.600,   0.878], [   1.627,  -1.965,   0.572] ] ),
                ( 149, [ [  -1.811,  -6.762,  12.880], [   1.133,   0.169,   0.548], [  -0.100,  -0.123,   1.175], [   2.070,  -2.929,   0.705] ] ),
                ( 150, [ [   0.017, -11.207,   8.875], [   1.255,  -0.564,   0.831], [   0.403,   1.515,   1.074], [  -0.155,  -0.386,   1.543] ] ),
                ( 151, [ [  -0.445, -10.136,   9.691], [   1.086,   0.399,  -0.026], [  -0.192,   0.575,   0.919], [  -0.170,  -1.828,   0.725] ] ),
                ( 152, [ [   0.304,  -9.999,   9.785], [   1.135,  -0.172,   0.431], [   0.102,   0.996,   1.196], [  -1.040,  -1.581,   0.537] ] ),
                ( 153, [ [   1.093, -10.129,  10.234], [   0.594,  -0.411,   0.299], [   0.392,   0.978,   1.034], [  -0.705,  -1.344,   0.382] ] ),
                ( 154, [ [  -0.583,  -9.584,  10.513], [   0.621,   0.254,  -0.170], [  -0.101,   0.436,   0.929], [   0.361,  -2.487,   2.315] ] ),
                ( 155, [ [   0.229,  -9.308,  10.848], [   1.293,   0.050,   0.474], [  -0.464,   0.873,   0.868], [  -0.497,  -2.273,   1.391] ] ),
                ( 156, [ [   1.213,  -8.823,  11.262], [   1.097,   0.750,   0.467], [  -0.100,   0.515,   0.964], [  -0.940,  -2.472,   1.063] ] ),
                ( 157, [ [  -0.605,  -9.152,  11.461], [   0.323,   0.663,  -0.103], [   0.043,   0.120,   1.270], [   0.440,  -0.934,   0.871] ] ),
                ( 158, [ [  -0.094,  -8.342,  11.590], [   0.956,   0.236,   0.510], [  -0.140,   0.322,   1.598], [   0.819,  -2.283,   1.204] ] ),
                ( 159, [ [   0.719,  -8.293,  12.439], [   0.723,  -0.208,   1.127], [  -0.976,  -0.110,   1.098], [  -0.017,  -2.270,   1.180] ] ),
                ( 160, [ [  -0.424,  -8.973,  13.536], [   1.884,   0.741,   0.640], [  -0.340,   0.054,   2.028], [   0.180,  -1.710,   0.280] ] ),
                ( 161, [ [  -0.041, -11.317,  10.265], [   1.470,  -0.646,   0.759], [  -0.223,  -0.152,   1.643], [  -0.545,  -0.997,   0.230] ] ),
                ( 162, [ [  -0.299, -11.500,  12.242], [   2.594,  -0.384,   1.420], [  -0.131,   0.132,   1.148], [  -0.686,  -2.070,   0.936] ] ),
                ( 163, [ [  -0.197, -10.867,  13.471], [   2.043,   0.482,   0.933], [  -0.483,   1.188,   0.895], [  -0.567,  -1.789,   2.920] ] )
            ]

            elementsCount1 = 2
            elementsCount2 = 4
            elementsCount3 = 4

            # Create nodes
            nodeIndex = 0
            nodeIdentifier = 1
            leftNodeIds = []
            lowerRightNodeIds = []
            upperRightNodeIds = []
            diaphragmaticNodeIds = []

            # Left lung nodes
            d1 = [0.5, 0.0, 0.0]
            d2 = [0.0, 0.5, 0.0]
            d3 = [0.0, 0.0, 1.0]
            for n3 in range(elementsCount3 + 1):
                leftNodeIds.append([])
                for n2 in range(elementsCount2 + 1):
                    leftNodeIds[n3].append([])
                    for n1 in range(elementsCount1 + 1):
                        leftNodeIds[n3][n2].append(None)
                        if n3 < elementsCount3:
                            if (n1 == 0) and ((n2 == 0) or (n2 == elementsCount2)):
                                continue
                        else:
                            if (n2 == 0) or (n2 == elementsCount2) or (n1 == 0):
                                continue
                        node = nodes.createNode(nodeIdentifier, nodetemplate)
                        cache.setNode(node)
                        if generateParameters:
                            x = [0.5 * (n1 - 1), 0.5 * (n2 - 1), 1.0 * n3]
                        else:
                            nodeParameters = nodeFieldParameters[nodeIndex]
                            nodeIndex += 1
                            assert nodeIdentifier == nodeParameters[0]
                            x, d1, d2, d3 = nodeParameters[1]
                        coordinates.setNodeParameters(cache, -1, Node.VALUE_LABEL_VALUE, 1, x)
                        coordinates.setNodeParameters(cache, -1, Node.VALUE_LABEL_D_DS1, 1, d1)
                        coordinates.setNodeParameters(cache, -1, Node.VALUE_LABEL_D_DS2, 1, d2)
                        coordinates.setNodeParameters(cache, -1, Node.VALUE_LABEL_D_DS3, 1, d3)
                        leftNodeIds[n3][n2][n1] = nodeIdentifier
                        nodeIdentifier += 1

            # Right lung nodes
            nodeIndex, nodeIdentifier = getLungNodes(rightLung, cache, coordinates, generateParameters,
                 nodes, nodetemplate, nodeFieldParameters,
                 lElementsCount1, lElementsCount2, lElementsCount3,
                 uElementsCount1, uElementsCount2, uElementsCount3,
                 lowerRightNodeIds, upperRightNodeIds, nodeIndex, nodeIdentifier)

            # Diaphragm lung nodes
            getLungNodes(diaphragmaticLung, cache, coordinates, generateParameters,
                 nodes, nodetemplate, nodeFieldParameters,
                 lElementsCount1, lElementsCount2, lElementsCount3,
                 uElementsCount1, uElementsCount2, uElementsCount3,
                 None, diaphragmaticNodeIds, nodeIndex, nodeIdentifier)

            # Create elements
            elementIdentifier = 1

            # Left lung elements
            for e3 in range(elementsCount3):
                for e2 in range(elementsCount2):
                    for e1 in range(elementsCount1):
                        eft = eftRegular
                        nodeIdentifiers = [
                            leftNodeIds[e3    ][e2][e1], leftNodeIds[e3    ][e2][e1 + 1], leftNodeIds[e3    ][e2 + 1][e1], leftNodeIds[e3    ][e2 + 1][e1 + 1],
                            leftNodeIds[e3 + 1][e2][e1], leftNodeIds[e3 + 1][e2][e1 + 1], leftNodeIds[e3 + 1][e2 + 1][e1], leftNodeIds[e3 + 1][e2 + 1][e1 + 1]]

                        if (e3 < elementsCount3 - 1):
                            if (e2 == 0) and (e1 == 0):
                                # Back wedge elements
                                nodeIdentifiers.pop(4)
                                nodeIdentifiers.pop(0)
                                eft = eftWedgeCollapseXi1_15
                            elif (e2 == elementsCount2 - 1) and (e1 == 0):
                                # Front wedge elements
                                nodeIdentifiers.pop(6)
                                nodeIdentifiers.pop(2)
                                eft = eftWedgeCollapseXi1_37
                        else:
                            if (e2 == 0) and (e1 == 1):
                                # Top back wedge elements
                                nodeIdentifiers.pop(5)
                                nodeIdentifiers.pop(4)
                                eft = eftWedgeCollapseXi2_56
                            elif (e2 == elementsCount2 - 1) and (e1 == 1):
                                # Top front wedge elements
                                nodeIdentifiers.pop(7)
                                nodeIdentifiers.pop(6)
                                eft = eftWedgeCollapseXi2_78
                            elif ((0 < e2 < (elementsCount2 - 1))) and (e1 == 0):
                                # Top middle back wedge element
                                nodeIdentifiers.pop(6)
                                nodeIdentifiers.pop(4)
                                eft = eftWedgeCollapseXi1_57
                            elif (e2 == 0) and (e1 == 0):
                                # Top back tetrahedron element
                                nodeIdentifiers.pop(6)
                                nodeIdentifiers.pop(5)
                                nodeIdentifiers.pop(4)
                                nodeIdentifiers.pop(0)
                                eft = eftTetCollapseXi1Xi2_82
                            elif (e2 == elementsCount2 - 1) and (e1 == 0):
                                # Top front tetrahedron element
                                nodeIdentifiers.pop(7)
                                nodeIdentifiers.pop(6)
                                nodeIdentifiers.pop(4)
                                nodeIdentifiers.pop(2)
                                eft = eftTetCollapseXi1Xi2_63

                        if eft is eftRegular:
                            element = mesh.createElement(elementIdentifier, elementtemplateRegular)
                        else:
                            elementtemplateCustom.defineField(coordinates, -1, eft)
                            element = mesh.createElement(elementIdentifier, elementtemplateCustom)
                        element.setNodesByIdentifier(eft, nodeIdentifiers)
                        if eft.getNumberOfLocalScaleFactors() == 1:
                            element.setScaleFactors(eft, [-1.0])
                        elementIdentifier += 1
                        leftLungMeshGroup.addElement(element)
                        lungMeshGroup.addElement(element)

            # Apex annotation point
            idx = elementsCount1 * elementsCount2 * (elementsCount3 - 1) + elementsCount1 * (elementsCount2 // 2)
            element1 = mesh.findElementByIdentifier(idx)
            markerPoint = markerPoints.createNode(nodeIdentifier, markerTemplateInternal)
            nodeIdentifier += 1
            cache.setNode(markerPoint)
            markerName.assignString(cache, 'apex of left lung')
            markerLocation.assignMeshLocation(cache, element1, [1.0, 1.0, 1.0])

            # Right lung elements
            elementIdentifier = getLungElements(rightLung, coordinates, eftfactory, eftRegular, elementtemplateRegular,
                elementtemplateCustom, mesh, lungMeshGroup,
                rightLungMeshGroup, lowerRightLungMeshGroup, upperRightLungMeshGroup, middleRightLungMeshGroup,
                lElementsCount1, lElementsCount2, lElementsCount3,
                uElementsCount1, uElementsCount2, uElementsCount3,
                lowerRightNodeIds, upperRightNodeIds, elementIdentifier)

            # Diaphragm lung elements
            getLungElements(diaphragmaticLung, coordinates, eftfactory, eftRegular, elementtemplateRegular,
                elementtemplateCustom, mesh, lungMeshGroup,
                rightLungMeshGroup, None, diapLungMeshGroup, None,
                lElementsCount1, lElementsCount2, lElementsCount3,
                uElementsCount1, uElementsCount2, uElementsCount3,
                None, diaphragmaticNodeIds, elementIdentifier)

        return annotationGroups

    @classmethod
    def refineMesh(cls, meshrefinement, options):
        """
        Refine source mesh into separate region, with change of basis.
        :param meshrefinement: MeshRefinement, which knows source and target region.
        :param options: Dict containing options. See getDefaultOptions().
        """
        assert isinstance(meshrefinement, MeshRefinement)
        refineElementsCount = options['Refine number of elements']
        meshrefinement.refineAllElementsCubeStandard3d(refineElementsCount, refineElementsCount, refineElementsCount)

def getLungNodes(lungSide, cache, coordinates, generateParameters, nodes, nodetemplate, nodeFieldParameters,
                 lElementsCount1, lElementsCount2, lElementsCount3,
                 uElementsCount1, uElementsCount2, uElementsCount3,
                 lowerNodeIds, upperNodeIds, nodeIndex, nodeIdentifier):
    """
    :parameter:
    :return: nodeIndex, nodeIdentifier
    """
    leftLung = 0
    diaphramgaticLung = 2

    # Initialise parameters
    d1 = [1.0, 0.0, 0.0]
    d2 = [0.0, 1.0, 0.0]
    d3 = [0.0, 0.0, 1.0]

    # Offset
    xMirror = 0 if lungSide == leftLung else 150

    if lungSide == diaphramgaticLung:
        xMirror = 75

    if lungSide != diaphramgaticLung:
        # Lower lobe nodes
        for n3 in range(lElementsCount3 + 1):
            lowerNodeIds.append([])
            for n2 in range(lElementsCount2 + 1):
                lowerNodeIds[n3].append([])
                for n1 in range(lElementsCount1 + 1):
                    lowerNodeIds[n3][n2].append(None)
                    if ((n1 == 0) or (n1 == lElementsCount1)) and (n2 == 0):
                        continue
                    if (n3 > (lElementsCount3 - 2)) and (n2 > (lElementsCount2 - 2)):
                        continue
                    node = nodes.createNode(nodeIdentifier, nodetemplate)
                    cache.setNode(node)
                    if generateParameters:
                        x = [1.0 * (n1 - 1) + xMirror, 1.0 * (n2 - 1), 1.0 * n3]
                    else:
                        nodeParameters = nodeFieldParameters[nodeIndex]
                        nodeIndex += 1
                        assert nodeIdentifier == nodeParameters[0]
                        x, d1, d2, d3 = nodeParameters[1]
                    coordinates.setNodeParameters(cache, -1, Node.VALUE_LABEL_VALUE, 1, x)
                    coordinates.setNodeParameters(cache, -1, Node.VALUE_LABEL_D_DS1, 1, d1)
                    coordinates.setNodeParameters(cache, -1, Node.VALUE_LABEL_D_DS2, 1, d2)
                    coordinates.setNodeParameters(cache, -1, Node.VALUE_LABEL_D_DS3, 1, d3)
                    lowerNodeIds[n3][n2][n1] = nodeIdentifier
                    nodeIdentifier += 1

    # Upper lobe nodes
    for n3 in range(uElementsCount3 + 1):
        upperNodeIds.append([])
        for n2 in range(uElementsCount2 + 1):
            upperNodeIds[n3].append([])
            for n1 in range(uElementsCount1 + 1):
                upperNodeIds[n3][n2].append(None)
                if ((n1 == 0) or (n1 == uElementsCount1)) and ((n2 == 0) or (n2 == uElementsCount2)):
                    continue
                if (n2 < (uElementsCount2 - 2)) and (n3 < (uElementsCount3 - 2)):
                    continue
                if ((n2 == 0) or (n2 == uElementsCount2)) and (n3 == uElementsCount3):
                    continue
                if ((n1 == 0) or (n1 == uElementsCount1)) and (n3 == uElementsCount3):
                    continue

                if lungSide != diaphramgaticLung:
                    # Oblique fissure nodes
                    if (n2 == (uElementsCount2 - 2)) and (n3 < (uElementsCount3 - 2)):
                        upperNodeIds[n3][n2][n1] = lowerNodeIds[n3][lElementsCount2][n1]
                        continue
                    elif (n2 < (uElementsCount2 - 1)) and (n3 == (uElementsCount3 - 2)):
                        upperNodeIds[n3][n2][n1] = lowerNodeIds[lElementsCount3][n2][n1]
                        continue

                node = nodes.createNode(nodeIdentifier, nodetemplate)
                cache.setNode(node)
                if generateParameters:
                    x = [1.0 * (n1 - 1) + xMirror, 1.0 * (n2 - 1) + 2.5, 1.0 * n3 + 2.0]
                else:
                    nodeParameters = nodeFieldParameters[nodeIndex]
                    nodeIndex += 1
                    assert nodeIdentifier == nodeParameters[0]
                    x, d1, d2, d3 = nodeParameters[1]
                coordinates.setNodeParameters(cache, -1, Node.VALUE_LABEL_VALUE, 1, x)
                coordinates.setNodeParameters(cache, -1, Node.VALUE_LABEL_D_DS1, 1, d1)
                coordinates.setNodeParameters(cache, -1, Node.VALUE_LABEL_D_DS2, 1, d2)
                coordinates.setNodeParameters(cache, -1, Node.VALUE_LABEL_D_DS3, 1, d3)
                upperNodeIds[n3][n2][n1] = nodeIdentifier
                nodeIdentifier += 1

    return nodeIndex, nodeIdentifier

def getLungElements(lungSide, coordinates, eftfactory, eftRegular, elementtemplateRegular, elementtemplateCustom, mesh,
                    lungMeshGroup, lungSideMeshGroup, lowerLungMeshGroup, upperLungMeshGroup, middleRightLungMeshGroup,
                    lElementsCount1, lElementsCount2, lElementsCount3,
                    uElementsCount1, uElementsCount2, uElementsCount3,
                    lowerNodeIds, upperNodeIds, elementIdentifier):
    """
    :parameter:
    :return: elementIdentifier
    """
    leftLung = 0
    diaphramgaticLung = 2

    # Check inputs
    if lungSide == leftLung:
        assert middleRightLungMeshGroup == None, "Existing the middle lobe in the left lobe"

    eftWedgeCollapseXi1_15 = eftfactory.createEftWedgeCollapseXi1Quadrant([1, 5])
    eftWedgeCollapseXi1_26 = eftfactory.createEftWedgeCollapseXi1Quadrant([2, 6])
    eftWedgeCollapseXi1_57 = eftfactory.createEftWedgeCollapseXi1Quadrant([5, 7])
    eftWedgeCollapseXi1_68 = eftfactory.createEftWedgeCollapseXi1Quadrant([6, 8])
    eftWedgeCollapseXi2_78 = eftfactory.createEftWedgeCollapseXi2Quadrant([7, 8])
    eftTetCollapseXi1Xi2_71 = eftfactory.createEftTetrahedronCollapseXi1Xi2Quadrant(7, 1)
    eftTetCollapseXi1Xi2_82 = eftfactory.createEftTetrahedronCollapseXi1Xi2Quadrant(8, 2)

    if lungSide != diaphramgaticLung:
        # Lower lobe elements
        for e3 in range(lElementsCount3):
            for e2 in range(lElementsCount2):
                for e1 in range(lElementsCount1):
                    eft = eftRegular
                    nodeIdentifiers = [
                        lowerNodeIds[e3][e2][e1], lowerNodeIds[e3][e2][e1 + 1], lowerNodeIds[e3][e2 + 1][e1],
                        lowerNodeIds[e3][e2 + 1][e1 + 1],
                        lowerNodeIds[e3 + 1][e2][e1], lowerNodeIds[e3 + 1][e2][e1 + 1],
                        lowerNodeIds[e3 + 1][e2 + 1][e1], lowerNodeIds[e3 + 1][e2 + 1][e1 + 1]]

                    if (e2 == 0) and (e1 == 0):
                        # Back wedge elements
                        nodeIdentifiers.pop(4)
                        nodeIdentifiers.pop(0)
                        eft = eftWedgeCollapseXi1_15
                    elif (e2 == 0) and (e1 == (lElementsCount1 - 1)):
                        # Back wedge elements
                        nodeIdentifiers.pop(5)
                        nodeIdentifiers.pop(1)
                        eft = eftWedgeCollapseXi1_26
                    elif (e3 == 1) and (e2 == (lElementsCount2 - 2)):
                        # Middle wedge
                        nodeIdentifiers.pop(7)
                        nodeIdentifiers.pop(6)
                        eft = eftWedgeCollapseXi2_78
                    elif (e3 == (lElementsCount3 - 1)) and (e2 == (lElementsCount2 - 3)):
                        # Remapped cube element 1
                        eft = eftfactory.createEftBasic()
                        setEftScaleFactorIds(eft, [1], [])
                        remapEftNodeValueLabel(eft, [7, 8], Node.VALUE_LABEL_D_DS2, [(Node.VALUE_LABEL_D_DS3, [1])])
                        remapEftNodeValueLabel(eft, [7, 8], Node.VALUE_LABEL_D_DS3, [(Node.VALUE_LABEL_D_DS2, [])])
                    elif (e3 == (lElementsCount3 - 1)) and (e2 == (lElementsCount2 - 2)):
                        # Remapped cube element 2
                        nodeIdentifiers[2] = lowerNodeIds[e3 - 1][e2 + 1][e1]
                        nodeIdentifiers[3] = lowerNodeIds[e3 - 1][e2 + 1][e1 + 1]
                        nodeIdentifiers[6] = lowerNodeIds[e3 - 1][e2 + 2][e1]
                        nodeIdentifiers[7] = lowerNodeIds[e3 - 1][e2 + 2][e1 + 1]
                        eft = eftfactory.createEftBasic()
                        setEftScaleFactorIds(eft, [1], [])
                        remapEftNodeValueLabel(eft, [5, 6], Node.VALUE_LABEL_D_DS2, [(Node.VALUE_LABEL_D_DS3, [1])])
                        remapEftNodeValueLabel(eft, [5, 6], Node.VALUE_LABEL_D_DS3, [(Node.VALUE_LABEL_D_DS2, [])])
                        remapEftNodeValueLabel(eft, [3, 4, 7, 8], Node.VALUE_LABEL_D_DS2,
                                               [(Node.VALUE_LABEL_D_DS3, [1])])
                        remapEftNodeValueLabel(eft, [3, 4, 7, 8], Node.VALUE_LABEL_D_DS3,
                                               [(Node.VALUE_LABEL_D_DS2, [])])
                    elif None in nodeIdentifiers:
                        continue

                    if eft is eftRegular:
                        element = mesh.createElement(elementIdentifier, elementtemplateRegular)
                    else:
                        elementtemplateCustom.defineField(coordinates, -1, eft)
                        element = mesh.createElement(elementIdentifier, elementtemplateCustom)
                    element.setNodesByIdentifier(eft, nodeIdentifiers)
                    if eft.getNumberOfLocalScaleFactors() == 1:
                        element.setScaleFactors(eft, [-1.0])
                    elementIdentifier += 1

                    # Annotation
                    lungMeshGroup.addElement(element)
                    lowerLungMeshGroup.addElement(element)
                    lungSideMeshGroup.addElement(element)

    # Upper lobe elements
    for e3 in range(uElementsCount3):
        for e2 in range(uElementsCount2):
            for e1 in range(uElementsCount1):
                eft = eftRegular
                nodeIdentifiers = [
                    upperNodeIds[e3][e2][e1], upperNodeIds[e3][e2][e1 + 1], upperNodeIds[e3][e2 + 1][e1],
                    upperNodeIds[e3][e2 + 1][e1 + 1],
                    upperNodeIds[e3 + 1][e2][e1], upperNodeIds[e3 + 1][e2][e1 + 1],
                    upperNodeIds[e3 + 1][e2 + 1][e1], upperNodeIds[e3 + 1][e2 + 1][e1 + 1]]

                if (e3 < (uElementsCount3 - 1)) and (e2 == (uElementsCount2 - 1)) and (e1 == 0):
                    # Distal-front wedge elements
                    nodeIdentifiers.pop(6)
                    nodeIdentifiers.pop(2)
                    eft = eftfactory.createEftBasic()
                    setEftScaleFactorIds(eft, [1], [])
                    nodes = [3, 4, 7, 8]
                    collapseNodes = [3, 7]
                    remapEftNodeValueLabel(eft, nodes, Node.VALUE_LABEL_D_DS1, [])
                    remapEftNodeValueLabel(eft, collapseNodes, Node.VALUE_LABEL_D_DS2,
                                           [(Node.VALUE_LABEL_D_DS1, []), (Node.VALUE_LABEL_D_DS2, [])])
                    ln_map = [1, 2, 3, 3, 4, 5, 6, 6]
                    remapEftLocalNodes(eft, 6, ln_map)

                elif (e3 < (uElementsCount3 - 1)) and (e2 == (uElementsCount2 - 1)) and (
                        e1 == (uElementsCount1 - 1)):
                    # Distal-back wedge elements
                    nodeIdentifiers.pop(7)
                    nodeIdentifiers.pop(3)
                    eft = eftfactory.createEftBasic()
                    setEftScaleFactorIds(eft, [1], [])
                    nodes = [3, 4, 7, 8]
                    collapseNodes = [4, 8]
                    remapEftNodeValueLabel(eft, collapseNodes, Node.VALUE_LABEL_D_DS2,
                                           [(Node.VALUE_LABEL_D_DS1, [1]), (Node.VALUE_LABEL_D_DS2, [])])
                    remapEftNodeValueLabel(eft, nodes, Node.VALUE_LABEL_D_DS1, [])
                    ln_map = [1, 2, 3, 3, 4, 5, 6, 6]
                    remapEftLocalNodes(eft, 6, ln_map)

                elif (e3 == (uElementsCount3 - 2)) and (e2 == 0) and (e1 == 0):
                    # Medial-front wedge elements
                    nodeIdentifiers.pop(4)
                    nodeIdentifiers.pop(0)
                    eft = eftWedgeCollapseXi1_15
                elif (e3 == (uElementsCount3 - 2)) and (e2 == 0) and (e1 == (uElementsCount1 - 1)):
                    # Medial-back wedge elements
                    nodeIdentifiers.pop(5)
                    nodeIdentifiers.pop(1)
                    eft = eftWedgeCollapseXi1_26
                elif (e3 == (uElementsCount3 - 1)) and (0 < e2 < (uElementsCount2 - 1)) and (e1 == 0):
                    # Top-front wedge elements
                    nodeIdentifiers.pop(6)
                    nodeIdentifiers.pop(4)
                    eft = eftWedgeCollapseXi1_57
                elif (e3 == (uElementsCount3 - 1)) and (0 < e2 < (uElementsCount2 - 1)) and (
                        e1 == (uElementsCount1 - 1)):
                    # Top-back wedge elements
                    nodeIdentifiers.pop(7)
                    nodeIdentifiers.pop(5)
                    eft = eftWedgeCollapseXi1_68
                elif (e3 == (uElementsCount3 - 1)) and (e2 == 0) and (e1 == 0):
                    # Top-front-medial tetrahedron wedge elements
                    nodeIdentifiers.pop(6)
                    nodeIdentifiers.pop(5)
                    nodeIdentifiers.pop(4)
                    nodeIdentifiers.pop(0)
                    eft = eftTetCollapseXi1Xi2_82
                elif (e3 == (uElementsCount3 - 1)) and (e2 == 0) and (e1 == (uElementsCount1 - 1)):
                    # Top-back-medial tetrahedron wedge elements
                    nodeIdentifiers.pop(7)
                    nodeIdentifiers.pop(5)
                    nodeIdentifiers.pop(4)
                    nodeIdentifiers.pop(1)
                    eft = eftTetCollapseXi1Xi2_71
                elif (e3 == (uElementsCount3 - 1)) and (e2 == (uElementsCount2 - 1)) and (e1 == 0):
                    # Top-front-distal tetrahedron wedge elements
                    nodeIdentifiers.pop(7)
                    nodeIdentifiers.pop(6)
                    nodeIdentifiers.pop(4)
                    nodeIdentifiers.pop(2)
                    eft = eftfactory.createEftBasic()
                    setEftScaleFactorIds(eft, [1], [])
                    nodes = [5, 6, 7, 8]
                    # remap parameters on xi3 = 1 before collapsing nodes
                    remapEftNodeValueLabel(eft, nodes, Node.VALUE_LABEL_D_DS1, [])
                    remapEftNodeValueLabel(eft, nodes, Node.VALUE_LABEL_D_DS2, [])
                    remapEftNodeValueLabel(eft, [7, 8], Node.VALUE_LABEL_D_DS3, [(Node.VALUE_LABEL_D_DS2, [1])])
                    remapEftNodeValueLabel(eft, [5], Node.VALUE_LABEL_D_DS3, [(Node.VALUE_LABEL_D_DS1, [])])
                    remapEftNodeValueLabel(eft, [3, 4], Node.VALUE_LABEL_D_DS1, [])
                    remapEftNodeValueLabel(eft, [3], Node.VALUE_LABEL_D_DS2,
                                           [(Node.VALUE_LABEL_D_DS1, []), (Node.VALUE_LABEL_D_DS2, [])])
                    ln_map = [1, 2, 3, 3, 4, 4, 4, 4]
                    remapEftLocalNodes(eft, 4, ln_map)

                elif (e3 == (uElementsCount3 - 1)) and (e2 == (uElementsCount2 - 1)) and (
                        e1 == (uElementsCount1 - 1)):
                    # Top-front-distal tetrahedron wedge elements
                    nodeIdentifiers.pop(7)
                    nodeIdentifiers.pop(6)
                    nodeIdentifiers.pop(5)
                    nodeIdentifiers.pop(3)
                    eft = eftfactory.createEftBasic()
                    setEftScaleFactorIds(eft, [1], [])
                    nodes = [5, 6, 7, 8]
                    # remap parameters on xi3 = 1 before collapsing nodes
                    remapEftNodeValueLabel(eft, nodes, Node.VALUE_LABEL_D_DS1, [])
                    remapEftNodeValueLabel(eft, nodes, Node.VALUE_LABEL_D_DS2, [])
                    remapEftNodeValueLabel(eft, [7, 8], Node.VALUE_LABEL_D_DS3, [(Node.VALUE_LABEL_D_DS2, [1])])
                    remapEftNodeValueLabel(eft, [6], Node.VALUE_LABEL_D_DS3, [(Node.VALUE_LABEL_D_DS1, [1])])
                    remapEftNodeValueLabel(eft, [3, 4], Node.VALUE_LABEL_D_DS1, [])
                    remapEftNodeValueLabel(eft, [4], Node.VALUE_LABEL_D_DS2,
                                           [(Node.VALUE_LABEL_D_DS1, [1]), (Node.VALUE_LABEL_D_DS2, [])])
                    ln_map = [1, 2, 3, 3, 4, 4, 4, 4]
                    remapEftLocalNodes(eft, 4, ln_map)

                elif (e3 == (uElementsCount3 - 2)) and (e2 == (uElementsCount2 - 3)):
                    # Remapped cube element 1
                    eft = eftfactory.createEftBasic()
                    setEftScaleFactorIds(eft, [1], [])
                    remapEftNodeValueLabel(eft, [3, 4], Node.VALUE_LABEL_D_DS2, [(Node.VALUE_LABEL_D_DS3, [1])])
                    remapEftNodeValueLabel(eft, [3, 4], Node.VALUE_LABEL_D_DS3,
                                           [(Node.VALUE_LABEL_D_DS2, []), (Node.VALUE_LABEL_D_DS3, [])])
                elif (e3 == (uElementsCount3 - 2)) and (e2 == (uElementsCount2 - 2)):
                    # Remapped cube element 2
                    eft = eftfactory.createEftBasic()
                    setEftScaleFactorIds(eft, [1], [])
                    remapEftNodeValueLabel(eft, [1, 2], Node.VALUE_LABEL_D_DS3,
                                           [(Node.VALUE_LABEL_D_DS2, []), (Node.VALUE_LABEL_D_DS3, [])])
                elif None in nodeIdentifiers:
                    continue

                if eft is eftRegular:
                    element = mesh.createElement(elementIdentifier, elementtemplateRegular)
                else:
                    elementtemplateCustom.defineField(coordinates, -1, eft)
                    element = mesh.createElement(elementIdentifier, elementtemplateCustom)
                element.setNodesByIdentifier(eft, nodeIdentifiers)
                if eft.getNumberOfLocalScaleFactors() == 1:
                    element.setScaleFactors(eft, [-1.0])
                elementIdentifier += 1
                lungMeshGroup.addElement(element)
                if (lungSide == leftLung) or (lungSide == diaphramgaticLung):
                    lungSideMeshGroup.addElement(element)
                    upperLungMeshGroup.addElement(element)
                else:
                    lungSideMeshGroup.addElement(element)
                    if e3 < (uElementsCount3 - 2):
                        middleRightLungMeshGroup.addElement(element)
                    else:
                        upperLungMeshGroup.addElement(element)

    return elementIdentifier