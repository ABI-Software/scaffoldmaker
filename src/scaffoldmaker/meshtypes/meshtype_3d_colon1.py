"""
Generates a 3-D colon mesh along the central line, with variable
numbers of elements around, along and through wall, with
variable radius and thickness along.
"""

import copy

from cmlibs.maths.vectorops import magnitude
from cmlibs.zinc.element import Element
from cmlibs.zinc.field import Field
from cmlibs.zinc.node import Node
from scaffoldmaker.annotation.annotationgroup import AnnotationGroup, findOrCreateAnnotationGroupForTerm, \
    getAnnotationGroupForTerm
from scaffoldmaker.annotation.colon_terms import get_colon_term
from scaffoldmaker.meshtypes.meshtype_1d_network_layout1 import MeshType_1d_network_layout1
from scaffoldmaker.meshtypes.meshtype_3d_colonsegment1 import MeshType_3d_colonsegment1, \
    ColonSegmentTubeMeshOuterPoints, getTeniaColi, createFlatCoordinatesTeniaColi, createColonCoordinatesTeniaColi, \
    createNodesAndElementsTeniaColi
from scaffoldmaker.meshtypes.scaffold_base import Scaffold_base
from scaffoldmaker.scaffoldpackage import ScaffoldPackage
from scaffoldmaker.utils import interpolation as interp
from scaffoldmaker.utils import tubemesh
from scaffoldmaker.utils.zinc_utils import exnode_string_from_nodeset_field_parameters, \
    get_nodeset_path_field_parameters

def getDefaultNetworkLayoutScaffoldPackage(cls, parameterSetName):
    assert parameterSetName in cls.getParameterSetNames()  # make sure parameter set is in list of parameters of parent scaffold
    if parameterSetName in ("Default", "Human 1"):
        return ScaffoldPackage(MeshType_1d_network_layout1, {
            'scaffoldSettings': {
                    "Structure": "1-2-3-4-5-6-7-8-9"
                },
                'meshEdits': exnode_string_from_nodeset_field_parameters(
                    ['coordinates'],
                    [ Node.VALUE_LABEL_VALUE, Node.VALUE_LABEL_D_DS1, Node.VALUE_LABEL_D_DS2, Node.VALUE_LABEL_D2_DS1DS2, Node.VALUE_LABEL_D_DS3, Node.VALUE_LABEL_D2_DS1DS3], [[
                    (1, [[0.00,0.00,0.00], [-50.70,178.20,0.00], [-40.03,-10.00,-20.01], [-6.86,-11.39,-2.36], [-19.62,-4.20,41.24], [-14.00,-1.00,-12.00]]),
                    (2, [[-47.40,188.60,0.00], [-19.30,177.10,0.00], [-37.98,-6.91,-13.80], [11.23,17.36,14.31], [-13.43,-4.23,38.50], [-4.00,19.00,22.00]]),
                    (3, [[-4.40,396.50,0.00], [206.00,40.10,0.00], [-14.88,29.77,11.90], [13.54,-1.87,21.51], [-6.48,-13.39,32.07], [-6.00,0.00,51.00]]),
                    (4, [[130.00,384.10,0.00], [130.80,-40.50,0.00], [-5.75,4.60,33.36], [5.83,-8.41,8.86], [-16.41,-29.84,2.70], [0.00,1.00,24.00]]),
                    (5, [[279.40,383.00,0.00], [118.00,48.70,0.00], [-2.70,13.54,29.79], [9.30,9.73,-10.83], [13.82,-26.53,13.55], [5.00,25.00,-20.00]]),
                    (6, [[443.90,390.80,0.00], [111.30,-97.00,0.00], [15.21,25.87,9.13], [12.36,-3.74,-23.50], [-10.16,-3.25,29.50], [1.00,-6.00,-35.00]]),
                    (7, [[475.20,168.00,0.00], [-0.80,-112.40,0.00], [22.45,0.00,-22.45], [-2.41,-19.32,-15.36], [22.45,-0.00,22.45], [15.00,-1.00,-10.00]]),
                    (8, [[432.60,-32.30,0.00], [-90.50,-59.00,0.00], [10.89,-16.33,-25.41], [-9.58,-7.07,-2.37], [14.04,-21.18,19.63], [8.00,-11.00,-13.00]]),
                    (9, [[272.40,7.50,0.00], [-79.00,47.40,0.00], [1.53,-16.88,-27.61], [-7.76,6.05,-1.75], [-5.63,-28.82,13.68], [4.00,-12.00,-12.00]])
                    ]]),

                'userAnnotationGroups': [
                {
                        '_AnnotationGroup': True,
                        'dimension': 1,
                        'identifierRanges': '1-8',
                        'name': get_colon_term('colon')[0],
                        'ontId': get_colon_term('colon')[1]
                    },
                {
                    '_AnnotationGroup': True,
                    'dimension': 1,
                    'identifierRanges': '1-2',
                    'name': get_colon_term('ascending colon')[0],
                    'ontId': get_colon_term('ascending colon')[1]
                },
                {
                    '_AnnotationGroup': True,
                    'dimension': 1,
                    'identifierRanges': '3-5',
                    'name': get_colon_term('transverse colon')[0],
                    'ontId': get_colon_term('transverse colon')[1]
                },
                {
                    '_AnnotationGroup': True,
                    'dimension': 1,
                    'identifierRanges': '6-8',
                    'name': get_colon_term('descending colon')[0],
                    'ontId': get_colon_term('descending colon')[1]
                }]
            })
    elif "Human 2" in parameterSetName:
        return ScaffoldPackage(MeshType_1d_network_layout1, {
            'scaffoldSettings': {
                    "Structure": "1-2-3-4-5-6-7-8-9"
                },
                'meshEdits': exnode_string_from_nodeset_field_parameters(
                    ['coordinates'],
                    [ Node.VALUE_LABEL_VALUE, Node.VALUE_LABEL_D_DS1, Node.VALUE_LABEL_D_DS2, Node.VALUE_LABEL_D2_DS1DS2, Node.VALUE_LABEL_D_DS3, Node.VALUE_LABEL_D2_DS1DS3], [[
                    (1, [[0.00,0.00,0.00], [-56.81,105.14,-38.05], [-40.03,-10.00,-20.01], [-3.67,-11.77,-1.56], [-22.35,6.24,39.56], [-14.00,-1.00,-12.00]]),
                    (2, [[-34.50,114.00,-18.10], [-9.51,117.91,3.65], [-35.93,-6.53,-13.07], [12.13,18.49,14.99], [-13.40,-4.92,36.05], [-4.00,19.00,22.00]]),
                    (3, [[-19.10,218.50,5.50], [79.23,66.40,77.49], [-14.71,29.43,11.78], [14.61,7.18,21.72], [-24.58,-18.69,16.37], [-6.00,0.00,51.00]]),
                    (4, [[82.50,189.10,94.20], [140.70,-1.06,48.14], [-5.74,4.59,33.25], [5.75,-8.29,9.07], [12.40,-27.90,15.07], [0.00,1.00,24.00]]),
                    (5, [[226.60,218.70,85.70], [164.08,101.90,-75.52], [-2.72,13.61,29.95], [8.00,9.47,-9.25], [20.99,-22.00,12.86], [5.00,25.00,-20.00]]),
                    (6, [[325.50,381.70,-57.90], [187.36,-116.61,-173.53], [15.21,25.87,9.13], [12.05,-5.07,-23.99], [5.96,-11.86,28.42], [1.00,-6.00,-35.00]]),
                    (7, [[354.00,105.30,-24.40], [-20.59,-269.54,30.48], [22.54,0.00,-22.54], [-2.92,-19.10,-14.61], [22.47,6.25,21.72], [15.00,-1.00,-10.00]]),
                    (8, [[296.50,-121.20,-0.60], [-170.98,-102.19,-18.39], [10.95,-16.42,-25.54], [-9.48,-6.06,-2.33], [14.12,-21.29,19.73], [8.00,-11.00,-13.00]]),
                    (9, [[169.80,-73.40,-33.50], [-42.47,101.91,-24.43], [1.54,-16.94,-27.72], [-7.96,5.07,-1.75], [-18.03,-23.55,13.36], [4.00,-12.00,-12.00]])
                    ]]),

                'userAnnotationGroups': [
                    {
                        '_AnnotationGroup': True,
                        'dimension': 1,
                        'identifierRanges': '1-8',
                        'name': get_colon_term('colon')[0],
                        'ontId': get_colon_term('colon')[1]
                    },
                    {
                        '_AnnotationGroup': True,
                        'dimension': 1,
                        'identifierRanges': '1-2',
                        'name': get_colon_term('ascending colon')[0],
                        'ontId': get_colon_term('ascending colon')[1]
                    },
                    {
                        '_AnnotationGroup': True,
                        'dimension': 1,
                        'identifierRanges': '3-5',
                        'name': get_colon_term('transverse colon')[0],
                        'ontId': get_colon_term('transverse colon')[1]
                    },
                    {
                        '_AnnotationGroup': True,
                        'dimension': 1,
                        'identifierRanges': '6-8',
                        'name': get_colon_term('descending colon')[0],
                        'ontId': get_colon_term('descending colon')[1]
                    }]
            })
    elif "Human 3" in parameterSetName:
        return ScaffoldPackage(MeshType_1d_network_layout1, {
            'scaffoldSettings': {
                "Structure": "1-2-3-4-5-6-7-8-9-10-11-12-13-14-15-16-17-18-19-20-21-22-23-24-25-26-27-28-29-30-31-32-"
                             "33-34-35-36-37-38-39-40-41-42-43-44-45-46-47-48-49"
            },
            'meshEdits': exnode_string_from_nodeset_field_parameters(
                ['coordinates'],
                [Node.VALUE_LABEL_VALUE, Node.VALUE_LABEL_D_DS1, Node.VALUE_LABEL_D_DS2, Node.VALUE_LABEL_D2_DS1DS2, Node.VALUE_LABEL_D_DS3, Node.VALUE_LABEL_D2_DS1DS3], [[
                (1, [[-87.210,-111.060,890.540], [-4.750,0.410,12.390], [23.270,-3.130,7.880], [2.460,-0.390,-2.950], [3.090,24.460,0.450], [1.830,0.460,-4.310]]),
                (2, [[-89.990,-110.570,902.650], [-2.050,0.530,12.720], [24.710,-3.280,4.130], [0.070,0.140,-2.810], [3.420,25.000,-0.640], [0.430,0.100,-3.970]]),
                (3, [[-91.250,-110.010,915.920], [-0.550,0.530,13.390], [23.610,-2.820,1.080], [-1.460,0.550,-1.920], [2.850,23.610,-0.910], [-1.420,0.540,-2.130]]),
                (4, [[-91.080,-109.520,929.390], [0.130,0.650,13.470], [21.830,-2.100,-0.100], [-0.530,0.220,-1.060], [2.080,21.810,-1.180], [-0.530,0.210,-1.170]]),
                (5, [[-91.000,-108.720,942.850], [0.830,0.670,13.370], [22.560,-2.350,-1.280], [-0.880,0.270,-1.850], [2.290,22.560,-1.420], [-0.920,0.270,-2.030]]),
                (6, [[-89.430,-108.180,956.080], [2.810,0.320,13.110], [20.050,-1.510,-4.270], [-1.960,0.620,-1.350], [1.380,20.440,-0.860], [-2.000,0.620,-1.490]]),
                (7, [[-85.390,-108.090,968.920], [3.100,0.440,13.080], [18.600,-0.990,-4.380], [-0.760,0.320,0.660], [0.820,19.040,-0.910], [-0.730,0.310,0.710]]),
                (8, [[-83.240,-107.300,982.140], [2.050,0.850,13.230], [18.550,-0.800,-2.820], [-0.240,0.090,0.570], [0.620,18.710,-1.440], [-0.210,0.080,0.630]]),
                (9, [[-81.290,-106.400,995.370], [2.320,1.340,13.290], [18.150,-0.790,-3.100], [0.140,0.240,-0.110], [0.470,18.290,-2.130], [0.050,0.310,-0.570]]),
                (10, [[-78.600,-104.620,1008.650], [2.140,-1.500,13.270], [18.840,-0.250,-3.070], [-0.910,1.850,-0.220], [0.840,18.750,3.430], [-0.950,1.980,-0.150]]),
                (11, [[-77.170,-109.180,1020.820], [4.070,-9.070,9.680], [16.310,3.440,-3.630], [-2.150,4.060,0.800], [-0.010,12.030,12.600], [-1.970,3.890,1.430]]),
                (12, [[-71.190,-121.030,1025.580], [7.480,-11.420,0.490], [14.200,9.260,-1.140], [-1.270,2.690,3.170], [0.000,1.980,17.640], [-1.270,2.720,3.230]]),
                (13, [[-63.350,-130.560,1022.180], [7.990,-9.440,-3.400], [13.310,9.970,3.600], [-0.810,0.700,2.420], [0.000,-5.470,16.790], [-0.910,0.850,2.430]]),
                (14, [[-55.270,-139.840,1018.800], [8.880,-8.590,-3.550], [12.320,10.870,4.490], [-1.070,0.870,0.810], [0.000,-6.180,16.540], [-1.090,0.870,0.810]]),
                (15, [[-45.660,-147.660,1015.100], [9.900,-7.390,-3.360], [10.810,11.990,5.470], [-1.630,1.380,0.030], [-0.010,-6.690,16.290], [-1.620,1.360,0.020]]),
                (16, [[-35.520,-154.600,1012.080], [11.080,-6.080,-1.980], [8.540,14.060,4.580], [-1.990,1.150,0.250], [-0.010,-5.000,17.000], [-1.970,1.130,0.240]]),
                (17, [[-23.710,-159.680,1011.200], [11.970,-4.320,-1.790], [6.200,14.650,6.070], [-1.740,-0.440,2.510], [0.010,-6.170,16.490], [-1.790,-0.440,2.520]]),
                (18, [[-11.720,-163.200,1008.530], [12.260,-2.580,-2.060], [4.480,13.030,10.390], [-2.160,-0.110,1.440], [-0.010,-10.220,14.200], [-2.140,-0.120,1.430]]),
                (19, [[0.670,-164.820,1007.100], [12.710,-0.730,-0.480], [1.180,14.350,9.430], [-2.670,0.760,-0.810], [-0.010,-8.950,15.090], [-2.580,0.750,-0.810]]),
                (20, [[13.556,-164.739,1007.051], [12.750,0.980,0.850], [-1.700,14.800,8.530], [-1.750,0.420,-1.040], [-0.320,-8.140,15.580], [-1.710,0.430,-1.040]]),
                (21, [[26.116,-162.906,1008.217], [12.630,1.810,1.230], [-2.890,15.320,7.020], [-2.260,-0.160,-1.140], [-0.450,-6.810,16.270], [-2.230,-0.140,-1.140]]),
                (22, [[38.730,-161.010,1010.040], [11.760,4.530,2.770], [-6.960,14.450,5.880], [-3.080,-0.420,-3.340], [-0.980,-6.490,16.380], [-3.120,-0.440,-3.350]]),
                (23, [[50.563,-154.087,1013.645], [9.860,7.100,4.160], [-9.105,10.240,0.863], [-1.930,-0.520,-2.090], [-4.770,-2.540,17.360], [-1.970,-0.530,-2.090]]),
                (24, [[58.745,-146.870,1017.469], [9.340,7.750,4.350], [-9.097,10.778,0.486], [-1.820,-1.100,1.290], [-3.670,-4.330,17.260], [-1.800,-1.060,1.300]]),
                (25, [[67.501,-138.309,1022.249], [7.990,8.770,4.670], [-10.568,9.341,0.117], [-2.500,-1.970,-0.340], [-2.610,-6.250,17.940], [-2.590,-2.160,-0.410]]),
                (26, [[74.433,-129.298,1027.145], [5.080,9.970,3.830], [-13.880,7.949,-1.165], [0.030,-2.060,0.330], [-2.126,-4.930,16.625], [-1.530,-1.170,0.490]]),
                (27, [[77.560,-119.250,1030.430], [5.040,10.780,-0.510], [-14.630,6.980,2.780], [0.100,1.230,-1.770], [4.280,1.140,20.240], [0.400,1.970,-2.970]]),
                (28, [[83.860,-109.530,1026.210], [6.930,6.510,-9.450], [-16.870,11.640,-4.350], [-2.810,1.300,-3.770], [7.220,14.780,13.520], [-1.240,0.300,-4.600]]),
                (29, [[89.550,-108.420,1013.560], [3.910,0.860,-13.160], [-20.290,9.170,-5.430], [-1.850,-1.680,0.870], [8.380,20.860,4.280], [-2.140,-1.950,1.170]]),
                (30, [[91.640,-107.830,1000.370], [1.780,0.550,-13.270], [-20.930,7.770,-2.480], [-0.800,-1.120,1.760], [7.590,21.030,2.070], [-0.860,-1.120,1.920]]),
                (31, [[93.100,-107.330,987.040], [1.010,0.300,-13.420], [-22.050,6.680,-1.510], [-0.560,-0.650,1.350], [6.630,22.100,1.090], [-0.580,-0.660,1.490]]),
                (32, [[93.660,-107.240,973.550], [-0.020,1.050,-13.410], [-22.120,6.280,0.520], [0.930,-2.250,1.330], [6.310,22.050,1.910], [0.920,-2.270,1.470]]),
                (33, [[93.060,-105.250,960.320], [-0.770,2.250,-13.200], [-20.310,1.700,1.470], [0.920,-2.340,0.150], [1.920,20.030,3.650], [0.930,-2.360,0.170]]),
                (34, [[92.120,-102.740,947.160], [-0.420,2.820,-13.160], [-20.350,1.100,0.880], [0.740,-0.110,-0.850], [1.250,19.860,4.690], [0.730,-0.090,-0.940]]),
                (35, [[92.230,-99.620,934.040], [0.470,1.780,-13.240], [-18.820,1.460,-0.470], [1.010,0.010,-1.140], [1.390,18.640,2.850], [1.030,0.020,-1.270]]),
                (36, [[93.040,-99.170,920.860], [1.210,-0.740,-13.330], [-18.310,1.150,-1.730], [0.280,-0.610,0.540], [1.230,18.350,-1.000], [0.280,-0.690,-0.020]]),
                (37, [[94.650,-101.120,907.560], [-0.610,-1.620,-13.470], [-18.270,0.060,0.820], [-0.210,-1.550,3.280], [-0.050,18.160,-2.300], [-0.490,-1.710,2.070]]),
                (38, [[91.840,-102.350,894.350], [-3.470,-1.640,-11.950], [-18.620,-2.390,5.740], [0.910,-2.200,3.650], [-3.000,19.300,-1.810], [-0.730,-2.580,3.870]]),
                (39, [[87.880,-104.310,883.750], [-5.210,-2.130,-10.320], [-16.280,-4.940,9.250], [2.730,-2.870,2.500], [-6.690,20.720,-1.110], [0.460,-3.190,4.530]]),
                (40, [[81.450,-106.590,873.900], [-6.990,-2.140,-9.270], [-12.430,-8.970,11.450], [0.330,-3.150,2.690], [-6.303,19.245,1.555], [2.230,-2.670,3.370]]),
                (41, [[73.980,-108.570,865.270], [-8.310,-0.220,-8.520], [-12.268,-8.435,13.125], [-1.280,-1.760,1.510], [-6.633,18.953,4.087], [3.180,-1.460,2.050]]),
                (42, [[65.060,-106.920,857.150], [-8.970,1.810,-7.690], [-14.794,-6.343,11.919], [1.280,0.430,-0.090], [-4.396,19.311,7.084], [2.480,0.160,0.520]]),
                (43, [[56.070,-104.970,849.910], [-10.000,1.920,-6.880], [-14.078,-6.138,12.772], [2.490,5.000,1.790], [0.172,16.517,6.181], [2.280,4.690,1.100]]),
                (44, [[45.110,-103.120,843.530], [-11.000,4.810,-5.260], [-9.460,-1.100,18.780], [2.560,4.660,2.880], [6.930,18.410,4.840], [2.420,4.350,0.870]]),
                (45, [[34.860,-95.590,839.810], [-9.590,8.680,-2.670], [-6.610,-0.760,21.270], [0.940,-0.410,0.560], [12.620,13.250,3.920], [0.000,0.160,-0.540]]),
                (46, [[26.140,-85.990,838.230], [-8.260,10.160,-2.000], [-7.290,-2.000,20.040], [-0.320,-0.120,-0.850], [14.710,10.710,6.320], [-1.050,-0.470,0.410]]),
                (47, [[18.390,-75.310,835.820], [-8.420,10.080,-2.660], [-7.370,-0.990,19.530], [-0.560,0.610,0.800], [16.030,10.170,6.780], [-0.360,-0.280,1.590]]),
                (48, [[9.350,-65.880,832.920], [-11.900,13.240,-4.280], [-8.470,-0.620,21.630], [-0.850,0.480,1.280], [17.760,11.500,7.330], [-1.390,-0.780,1.040]]),
                (49, [[-5.120,-48.680,827.110], [-17.030,21.160,-7.340], [-8.980,0.200,21.430], [-0.080,1.010,-1.640], [17.760,11.500,7.330], [-1.390,-0.780,1.040]])
                ]]),

            'userAnnotationGroups': [
                {
                    '_AnnotationGroup': True,
                    'dimension': 1,
                    'identifierRanges': '1-48',
                    'name': get_colon_term('colon')[0],
                    'ontId': get_colon_term('colon')[1]
                },
                {
                    '_AnnotationGroup': True,
                    'dimension': 1,
                    'identifierRanges': '1-10',
                    'name': get_colon_term('ascending colon')[0],
                    'ontId': get_colon_term('ascending colon')[1]
                },
                {
                    '_AnnotationGroup': True,
                    'dimension': 1,
                    'identifierRanges': '11-26',
                    'name': get_colon_term('transverse colon')[0],
                    'ontId': get_colon_term('transverse colon')[1]
                },
                {
                    '_AnnotationGroup': True,
                    'dimension': 1,
                    'identifierRanges': '27-48',
                    'name': get_colon_term('descending colon')[0],
                    'ontId': get_colon_term('descending colon')[1]
                }]
        })

    elif 'Cattle 1' in parameterSetName:
        return ScaffoldPackage(MeshType_1d_network_layout1, {
            'scaffoldSettings': {
                "Structure": "1-2-3-4-5-6-7-8-9-10-11-12-13-14-15-16-17-18-19-20-21-22-23-24-25-26-27-28-29-30-31-32-"
                             "33-34-35-36-37-38-39-40-41-42-43-44-45-46-47-48-49-50-51-52-53"
            },
            'meshEdits': exnode_string_from_nodeset_field_parameters(
                ['coordinates'],
                [ Node.VALUE_LABEL_VALUE, Node.VALUE_LABEL_D_DS1, Node.VALUE_LABEL_D_DS2, Node.VALUE_LABEL_D2_DS1DS2, Node.VALUE_LABEL_D_DS3, Node.VALUE_LABEL_D2_DS1DS3 ], [[
                (1, [[-245.30,444.60,-49.10], [-267.70,-53.10,-20.20], [0.00,0.00,38.02], [0.00,0.00,-4.41], [-7.40,37.29,0.00], [0.00,0.00,-4.41]]),
                (2, [[-380.30,484.80,-45.00], [24.50,102.70,15.70], [0.00,0.00,34.49], [0.00,0.00,-2.65], [33.55,-8.00,0.00], [0.00,0.00,-2.65]]),
                (3, [[-298.10,510.40,-36.80], [73.60,9.90,-16.40], [0.00,0.00,32.36], [-12.52,-3.10,-14.34], [4.31,-32.07,0.00], [-12.52,-3.10,-14.34]]),
                (4, [[-213.10,527.90,-22.50], [-1.00,-10.80,125.60], [-29.16,-7.23,1.80], [-4.10,-6.11,-25.37], [7.07,-29.15,-2.45], [-4.10,-6.11,-25.37]]),
                (5, [[-315.50,570.20,18.90], [-107.90,9.30,21.90], [-2.95,-13.63,-23.41], [14.35,4.82,-10.40], [0.73,-23.58,13.64], [14.35,4.82,-10.40]]),
                (6, [[-417.40,555.00,14.60], [-83.00,-41.30,-0.80], [4.80,1.33,-24.41], [0.54,4.88,0.73], [11.08,-22.29,0.97], [0.54,4.88,0.73]]),
                (7, [[-497.30,488.90,13.60], [-44.60,-81.60,10.00], [-1.80,-2.76,-22.33], [-2.12,-0.60,2.13], [19.79,-10.85,-0.25], [-2.12,-0.60,2.13]]),
                (8, [[-527.00,392.50,2.70], [47.40,-82.00,-7.90], [0.00,0.00,-20.22], [0.68,1.04,1.96], [17.50,10.12,0.00], [0.68,1.04,1.96]]),
                (9, [[-461.20,345.90,-0.80], [56.90,-44.50,2.40], [0.00,0.00,-18.40], [0.00,0.00,1.09], [11.33,14.49,0.00], [0.00,0.00,1.09]]),
                (10, [[-415.60,293.80,3.90], [93.20,-62.60,3.10], [0.00,0.00,-17.93], [0.00,0.00,0.43], [9.99,14.89,0.00], [0.00,0.00,0.43]]),
                (11, [[-232.20,264.90,0.20], [140.10,58.20,-1.00], [0.00,0.00,-17.60], [0.00,0.00,0.25], [-6.75,16.25,0.00], [0.00,0.00,0.25]]),
                (12, [[-168.40,357.20,1.30], [10.10,78.60,-3.20], [0.00,0.00,-17.40], [0.00,0.00,0.15], [-17.26,2.21,0.00], [0.00,0.00,0.15]]),
                (13, [[-185.30,419.10,-0.70], [-45.10,57.10,-0.90], [0.00,0.00,-17.29], [0.00,0.00,0.13], [-13.57,-10.71,0.00], [0.00,0.00,0.13]]),
                (14, [[-253.20,466.70,-0.30], [-63.40,24.70,0.20], [0.00,0.00,-17.15], [0.00,0.00,0.13], [-6.23,-15.98,0.00], [0.00,0.00,0.13]]),
                (15, [[-323.80,482.50,0.10], [-68.20,2.90,-1.20], [0.00,0.00,-17.02], [0.00,0.00,0.12], [-0.72,-17.01,0.00], [0.00,0.00,0.12]]),
                (16, [[-387.50,485.40,-0.20], [-44.20,-17.10,-1.00], [0.00,0.00,-16.91], [0.00,0.00,0.12], [6.10,-15.77,0.00], [0.00,0.00,0.12]]),
                (17, [[-435.60,433.50,3.30], [3.40,-109.50,1.40], [0.00,0.00,-16.78], [0.00,0.00,0.14], [16.77,0.52,0.00], [0.00,0.00,0.14]]),
                (18, [[-370.60,376.30,-1.10], [66.90,-29.20,-0.90], [0.00,0.00,-16.62], [0.00,0.00,0.12], [6.65,15.23,0.00], [0.00,0.00,0.12]]),
                (19, [[-313.00,357.90,-0.10], [40.00,-33.50,9.60], [0.00,0.00,-16.52], [0.00,0.00,0.10], [10.61,12.67,0.00], [0.00,0.00,0.10]]),
                (20, [[-259.20,340.70,2.10], [48.90,6.40,1.40], [0.00,0.00,-16.42], [0.00,0.00,0.09], [-2.13,16.28,0.00], [0.00,0.00,0.09]]),
                (21, [[-246.50,380.30,-0.80], [-29.70,33.60,-0.70], [0.00,0.00,-16.33], [0.00,0.00,0.09], [-12.23,-10.82,0.00], [0.00,0.00,0.09]]),
                (22, [[-297.30,387.10,0.60], [-59.70,12.60,-0.00], [0.00,0.00,-16.24], [0.00,0.00,0.09], [-3.35,-15.89,0.00], [0.00,0.00,0.09]]),
                (23, [[-340.20,415.60,-1.00], [-86.20,28.90,-2.90], [0.00,0.00,-16.15], [0.00,0.00,0.10], [-5.13,-15.31,0.00], [0.00,0.00,0.10]]),
                (24, [[-398.30,443.10,-0.10], [10.60,82.10,-2.60], [0.00,0.00,-16.03], [0.00,0.00,0.12], [-15.90,2.06,0.00], [0.00,0.00,0.12]]),
                (25, [[-329.80,449.10,-2.10], [53.20,14.00,-0.50], [0.00,0.00,-15.90], [0.00,0.00,0.14], [-4.05,15.38,0.00], [0.00,0.00,0.14]]),
                (26, [[-251.30,425.90,-0.30], [43.90,-19.30,0.00], [0.00,0.00,-15.76], [0.00,0.00,0.11], [6.35,14.42,0.00], [0.00,0.00,0.11]]),
                (27, [[-209.10,390.60,0.00], [26.00,-38.80,0.90], [0.00,0.00,-15.67], [0.00,0.00,0.08], [13.02,8.72,0.00], [0.00,0.00,0.08]]),
                (28, [[-207.80,350.80,1.40], [-9.40,-43.60,1.80], [0.00,0.00,-15.59], [0.00,0.00,0.09], [15.24,-3.29,0.00], [0.00,0.00,0.09]]),
                (29, [[-245.80,299.40,7.60], [-70.30,-36.00,1.40], [0.00,0.00,-15.48], [0.00,0.00,0.14], [7.06,-13.78,0.00], [0.00,0.00,0.14]]),
                (30, [[-345.30,304.10,3.10], [-100.20,27.90,-1.90], [0.00,0.00,-15.31], [0.00,0.00,0.17], [-4.11,-14.75,0.00], [0.00,0.00,0.17]]),
                (31, [[-418.40,361.10,-0.20], [-57.80,55.80,-1.70], [0.00,0.00,-15.15], [0.00,0.00,0.15], [-10.52,-10.90,0.00], [0.00,0.00,0.15]]),
                (32, [[-479.20,415.60,2.20], [-8.80,73.10,-1.60], [0.00,0.00,-15.00], [0.00,0.00,0.15], [-14.89,-1.79,0.00], [0.00,0.00,0.15]]),
                (33, [[-439.60,495.70,-2.10], [61.10,57.10,-1.30], [0.00,0.00,-14.84], [0.00,0.00,0.15], [-10.13,10.85,0.00], [0.00,0.00,0.15]]),
                (34, [[-361.60,522.60,-3.00], [78.60,9.90,0.20], [0.00,0.00,-14.70], [0.00,0.00,0.15], [-1.84,14.59,0.00], [0.00,0.00,0.15]]),
                (35, [[-270.10,506.50,-3.80], [103.60,-33.30,1.00], [0.00,0.00,-14.54], [0.00,0.00,0.19], [4.46,13.84,0.00], [0.00,0.00,0.19]]),
                (36, [[-148.90,441.40,-2.10], [79.70,-91.50,2.80], [0.00,0.00,-14.30], [0.00,0.00,0.23], [10.79,9.39,0.00], [0.00,0.00,0.23]]),
                (37, [[-130.90,313.30,4.00], [-4.00,-107.20,3.10], [0.00,0.00,-14.07], [0.00,0.00,0.18], [14.06,-0.52,0.00], [0.00,0.00,0.18]]),
                (38, [[-183.90,251.00,3.80], [-65.50,-60.20,3.60], [0.00,0.00,-13.92], [0.00,0.00,0.16], [9.42,-10.25,0.00], [0.00,0.00,0.16]]),
                (39, [[-280.30,213.00,3.40], [-165.10,-18.60,0.10], [0.00,0.00,-13.74], [0.00,0.00,0.20], [1.54,-13.65,0.00], [0.00,0.00,0.20]]),
                (40, [[-400.80,247.50,6.80], [-127.10,36.80,1.30], [0.00,0.00,-13.53], [0.00,0.00,0.23], [-3.76,-13.00,0.00], [0.00,0.00,0.23]]),
                (41, [[-530.50,290.70,5.20], [-89.00,86.50,0.30], [0.00,0.00,-13.29], [0.00,0.00,0.21], [-9.27,-9.52,0.00], [0.00,0.00,0.21]]),
                (42, [[-568.80,392.30,6.90], [-77.40,67.70,-5.50], [0.00,0.00,-13.10], [0.00,0.00,0.23], [-8.63,-9.86,0.00], [0.00,0.00,0.23]]),
                (43, [[-511.20,535.10,2.50], [86.20,111.40,-1.00], [0.00,0.00,-12.82], [0.00,0.00,0.25], [-10.14,7.85,0.00], [0.00,0.00,0.25]]),
                (44, [[-405.00,601.70,6.40], [143.60,52.20,2.60], [0.00,0.00,-12.60], [1.49,-1.44,0.82], [-4.30,11.84,0.00], [1.49,-1.44,0.82]]),
                (45, [[-238.80,615.90,16.60], [63.30,-9.10,19.10], [4.57,-4.41,-10.54], [-5.13,0.21,1.79], [2.73,11.44,-3.61], [-5.13,0.21,1.79]]),
                (46, [[-146.20,605.90,36.50], [49.30,-9.90,-50.60], [-8.95,-1.40,-8.08], [-3.12,3.94,7.67], [0.13,11.93,-2.21], [-3.12,3.94,7.67]]),
                (47, [[-218.40,585.30,-2.00], [-124.00,0.40,-37.50], [-4.06,6.01,9.60], [2.76,2.30,8.98], [1.78,10.41,-5.77], [2.76,2.30,8.98]]),
                (48, [[-376.30,579.60,-40.80], [-189.20,-50.70,-8.80], [-2.47,1.63,11.71], [4.16,0.49,-2.60], [-2.97,11.49,-2.23], [4.16,0.49,-2.60]]),
                (49, [[-557.90,493.90,-24.90], [-30.30,24.10,152.80], [8.24,8.85,0.92], [1.49,-2.48,-8.73], [-8.46,8.18,-2.97], [1.49,-2.48,-8.73]]),
                (50, [[-484.80,594.40,0.70], [132.70,97.00,3.50], [4.32,-1.57,-11.27], [-2.78,-5.06,-5.12], [-6.74,9.35,-3.88], [-2.78,-5.06,-5.12]]),
                (51, [[-318.10,641.90,-8.50], [166.70,17.60,5.50], [0.89,-3.82,-11.58], [-2.15,-0.82,-0.11], [-1.09,11.54,-3.89], [-2.15,-0.82,-0.11]]),
                (52, [[-158.30,634.70,-1.90], [176.50,-14.00,10.80], [-1.43,-3.83,-11.56], [-0.81,0.27,-0.12], [1.15,11.54,-3.97], [-0.81,0.27,-0.12]]),
                (53, [[32.70,611.70,13.60], [205.50,-32.20,20.00], [-1.01,-3.02,-11.90], [1.46,0.96,-0.42], [2.15,11.71,-3.15], [1.46,0.96,-0.42]])
                ]]),

            'userAnnotationGroups': [
                {
                    '_AnnotationGroup': True,
                    'dimension': 1,
                    'identifierRanges': '1-52',
                    'name': get_colon_term('colon')[0],
                    'ontId': get_colon_term('colon')[1]
                },
                {
                    '_AnnotationGroup': True,
                    'dimension': 1,
                    'identifierRanges': '1-8',
                    'name': get_colon_term('right colon')[0],
                    'ontId': get_colon_term('right colon')[1]
                },
                {
                    '_AnnotationGroup': True,
                    'dimension': 1,
                    'identifierRanges': '9-46',
                    'name': get_colon_term('transverse colon')[0],
                    'ontId': get_colon_term('transverse colon')[1]
                },
                {
                    '_AnnotationGroup': True,
                    'dimension': 1,
                    'identifierRanges': '47-52',
                    'name': get_colon_term('left colon')[0],
                    'ontId': get_colon_term('left colon')[1]
                }]
        })
    elif 'Mouse 1' in parameterSetName:
        return ScaffoldPackage(MeshType_1d_network_layout1, {
            'scaffoldSettings': {
                "Structure": "1-2-3-4-5-6-7-8"
            },
            'meshEdits': exnode_string_from_nodeset_field_parameters(
                ['coordinates'],
                [Node.VALUE_LABEL_VALUE, Node.VALUE_LABEL_D_DS1, Node.VALUE_LABEL_D_DS2, Node.VALUE_LABEL_D2_DS1DS2,  Node.VALUE_LABEL_D_DS3, Node.VALUE_LABEL_D2_DS1DS3], [[
                (1, [[0.00,0.00,0.00], [6.00,12.00,-2.00], [1.04,0.51,1.04], [-0.03,0.95,-0.68], [1.33,0.06,-0.79], [6.00,0.00,3.00]]),
                (2, [[-2.00,11.00,-3.00], [-8.00,4.00,9.00], [1.01,1.01,0.50], [-0.03,-0.34,-0.02], [-0.58,1.04,-0.91], [0.00,1.00,2.00]]),
                (3, [[-3.00,2.00,3.00], [-4.00,-8.00,0.00], [0.98,-0.48,0.98], [-0.15,-0.65,0.01], [-0.88,0.43,1.09], [1.00,0.00,2.00]]),
                (4, [[-11.00,-3.00,-4.00], [-8.00,-3.00,-7.00], [0.55,-1.12,0.55], [-0.18,-0.18,-0.31], [-0.53,0.17,1.25], [0.00,0.00,0.50]]),
                (5, [[-16.00,-4.00,0.00], [4.00,-3.00,14.00], [0.40,-1.22,0.00], [-0.16,-0.02,-0.19], [1.24,0.31,0.09], [0.00,0.00,0.50]]),
                (6, [[-7.00,-8.00,0.00], [5.00,-1.00,-14.00], [0.00,-1.25,0.00], [0.03,0.04,-0.12], [-1.14,-0.00,-0.50], [0.00,0.00,0.50]]),
                (7, [[-1.00,-6.00,-1.00], [2.00,-2.00,9.00], [0.38,-1.13,-0.38], [0.12,0.11,-0.23], [1.15,0.45,-0.20], [0.00,0.00,0.50]]),
                (8, [[-2.00,-14.00,5.00], [-2.00,-4.00,2.00], [0.41,-0.84,-0.84], [-0.08,0.22,-0.28], [0.95,-0.30,0.75], [0.00,0.00,0.50]])
                ]]),

            'userAnnotationGroups': [
                {
                    '_AnnotationGroup': True,
                    'dimension': 1,
                    'identifierRanges': '1-7',
                    'name': get_colon_term('colon')[0],
                    'ontId': get_colon_term('colon')[1]
                },
                {
                    '_AnnotationGroup': True,
                    'dimension': 1,
                    'identifierRanges': '1-2',
                    'name': get_colon_term('right colon')[0],
                    'ontId': get_colon_term('right colon')[1]
                },
                {
                    '_AnnotationGroup': True,
                    'dimension': 1,
                    'identifierRanges': '3-4',
                    'name': get_colon_term('transverse colon')[0],
                    'ontId': get_colon_term('transverse colon')[1]
                },
                {
                    '_AnnotationGroup': True,
                    'dimension': 1,
                    'identifierRanges': '5-7',
                    'name': get_colon_term('left colon')[0],
                    'ontId': get_colon_term('left colon')[1]
                }]
        })
    elif 'Mouse 2' in parameterSetName:
         return ScaffoldPackage(MeshType_1d_network_layout1, {
            'scaffoldSettings': {
                "Structure": "1-2-3-4-5"
            },
            'meshEdits': exnode_string_from_nodeset_field_parameters(
                ['coordinates'],
                [Node.VALUE_LABEL_VALUE, Node.VALUE_LABEL_D_DS1, Node.VALUE_LABEL_D_DS2, Node.VALUE_LABEL_D2_DS1DS2,  Node.VALUE_LABEL_D_DS3, Node.VALUE_LABEL_D2_DS1DS3], [[
                (1, [[0.00,0.00,0.00], [0.00,0.00,13.00], [0.00,-1.55,0.00], [0.00,0.03,0.00], [1.55,-0.00,0.00], [0.00,0.00,0.50]]),
                (2, [[0.00,0.00,13.00], [0.00,2.00,28.00], [0.00,-1.51,0.00], [0.00,0.05,0.00], [1.50,-0.00,-0.11], [0.00,0.00,0.50]]),
                (3, [[-14.00,-2.00,13.00], [0.00,-3.00,-19.00], [0.00,-1.43,0.00], [0.00,0.13,0.00], [-1.41,-0.03,-0.23], [0.00,0.00,0.50]]),
                (4, [[-14.00,-1.00,-10.00], [1.00,1.00,-17.00], [0.00,-1.25,0.00], [0.00,0.08,0.00], [-1.25,-0.00,-0.00], [0.00,0.00,0.50]]),
                (5, [[-14.00,0.00,-28.00], [0.00,0.00,-11.00], [0.00,-1.25,0.00], [0.00,-0.08,0.00], [-1.25,-0.00,0.00], [0.00,0.00,0.50]])
                ]]),

            'userAnnotationGroups': [
                {
                    '_AnnotationGroup': True,
                    'dimension': 1,
                    'identifierRanges': '1-4',
                    'name': get_colon_term('colon')[0],
                    'ontId': get_colon_term('colon')[1]
                },
                {
                    '_AnnotationGroup': True,
                    'dimension': 1,
                    'identifierRanges': '1-2',
                    'name': get_colon_term('right colon')[0],
                    'ontId': get_colon_term('right colon')[1]
                },
                {
                    '_AnnotationGroup': True,
                    'dimension': 1,
                    'identifierRanges': '3',
                    'name': get_colon_term('transverse colon')[0],
                    'ontId': get_colon_term('transverse colon')[1]
                },
                {
                    '_AnnotationGroup': True,
                    'dimension': 1,
                    'identifierRanges': '4',
                    'name': get_colon_term('left colon')[0],
                    'ontId': get_colon_term('left colon')[1]
                }]
        })
    elif 'Pig 1' in parameterSetName:
         return ScaffoldPackage(MeshType_1d_network_layout1, {
            'scaffoldSettings': {
                "Structure": "1-2-3-4-5-6-7-8-9-10-11-12-13-14-15-16-17-18-19-20-21-22-23-24-25-26-27-28-29-30-31-32-"
                             "33-34-35-36-37-38-39-40"
            },
            'meshEdits': exnode_string_from_nodeset_field_parameters(
                ['coordinates'],
                [Node.VALUE_LABEL_VALUE, Node.VALUE_LABEL_D_DS1, Node.VALUE_LABEL_D_DS2, Node.VALUE_LABEL_D2_DS1DS2,  Node.VALUE_LABEL_D_DS3, Node.VALUE_LABEL_D2_DS1DS3], [[
                (1, [[-7.20,83.30,-20.70], [-65.20,-8.10,7.60], [0.00,0.00,38.25], [0.00,0.00,-0.50], [-9.02,37.17,0.51], [0.00,0.00,-0.50]]),
                (2, [[-68.50,52.80,-9.60], [-40.10,-36.10,10.70], [0.00,0.00,37.69], [0.00,0.00,-0.63], [-30.08,22.66,1.43], [0.00,0.00,-0.63]]),
                (3, [[-97.40,-26.30,5.70], [18.00,-93.20,13.70], [0.00,0.00,36.98], [0.00,0.00,-0.67], [-34.95,-12.07,0.76], [0.00,0.00,-0.67]]),
                (4, [[-56.80,-90.50,14.10], [65.50,-41.40,7.30], [0.00,0.00,36.35], [0.00,0.00,-0.74], [-16.46,-32.40,0.32], [0.00,0.00,-0.74]]),
                (5, [[48.90,-100.80,24.00], [112.20,40.10,19.00], [0.00,0.00,35.47], [0.00,0.00,-0.91], [16.98,-31.12,0.88], [0.00,0.00,-0.91]]),
                (6, [[114.80,-12.60,38.70], [8.20,96.10,14.20], [0.00,0.00,34.53], [0.00,0.00,-0.93], [34.47,2.05,0.73], [0.00,0.00,-0.93]]),
                (7, [[60.30,83.50,43.70], [-108.70,54.10,22.40], [0.00,0.00,33.60], [0.00,0.00,-0.89], [9.36,32.25,1.10], [0.00,0.00,-0.89]]),
                (8, [[-41.20,90.70,56.30], [-89.00,-32.40,14.40], [0.00,0.00,32.75], [0.00,0.00,-0.93], [-15.64,28.77,0.74], [0.00,0.00,-0.93]]),
                (9, [[-107.90,-9.70,76.60], [11.10,-94.40,11.30], [0.00,0.00,31.72], [0.00,0.00,-0.91], [-30.85,-7.37,0.44], [0.00,0.00,-0.91]]),
                (10, [[-57.30,-91.90,81.30], [71.20,-31.20,5.70], [0.00,0.00,30.90], [0.00,0.00,-0.86], [-10.31,-29.13,0.16], [0.00,0.00,-0.86]]),
                (11, [[51.20,-89.40,97.20], [99.10,55.40,12.90], [0.00,0.00,30.00], [0.00,0.00,-0.90], [17.48,-24.38,0.38], [0.00,0.00,-0.90]]),
                (12, [[91.60,9.30,103.60], [4.70,51.20,3.40], [0.00,0.00,29.11], [0.00,0.00,-0.90], [29.10,-0.75,0.13], [0.00,0.00,-0.90]]),
                (13, [[61.60,111.80,109.60], [-85.20,46.10,2.60], [0.00,0.00,28.20], [0.00,0.00,-0.95], [12.75,25.15,0.02], [0.00,0.00,-0.95]]),
                (14, [[-54.60,91.90,129.40], [-92.70,-55.00,14.50], [0.00,0.00,27.20], [0.00,0.00,-0.94], [-16.84,21.35,0.48], [0.00,0.00,-0.94]]),
                (15, [[-109.00,5.60,156.90], [23.60,-108.20,27.70], [0.00,0.00,26.30], [0.00,0.00,-0.80], [-23.61,-11.49,1.55], [0.00,0.00,-0.80]]),
                (16, [[-59.10,-62.50,170.80], [74.00,-20.10,14.40], [0.00,0.00,25.59], [0.00,0.00,-0.70], [-2.12,-25.48,0.87], [0.00,0.00,-0.70]]),
                (17, [[23.50,-53.20,179.70], [84.60,47.00,6.90], [0.00,0.00,24.90], [0.00,0.00,-0.73], [13.61,-20.85,0.12], [0.00,0.00,-0.73]]),
                (18, [[62.30,30.10,187.50], [-12.80,58.00,0.80], [0.00,0.00,24.13], [0.00,0.00,-0.55], [23.49,5.51,0.00], [0.00,0.00,-0.55]]),
                (19, [[22.40,45.20,181.10], [-23.60,-34.50,-7.40], [0.00,0.00,23.69], [0.00,0.00,-0.41], [-16.96,16.53,0.72], [0.00,0.00,-0.41]]),
                (20, [[-1.90,4.90,180.50], [-41.30,-30.90,7.50], [0.00,0.00,23.31], [0.00,0.00,-0.39], [-16.48,16.48,0.49], [0.00,0.00,-0.39]]),
                (21, [[-45.10,-12.60,194.40], [-40.50,-4.60,6.90], [0.00,0.00,22.92], [0.00,0.00,-0.30], [-6.30,22.03,0.64], [0.00,0.00,-0.30]]),
                (22, [[-71.70,-2.20,197.20], [-25.20,35.80,-6.80], [0.00,0.00,22.67], [0.00,0.00,-0.30], [20.29,10.08,0.53], [0.00,0.00,-0.30]]),
                (23, [[-65.80,42.10,182.30], [26.60,37.60,-15.60], [0.00,0.00,22.28], [0.00,0.00,-0.46], [13.31,-17.71,2.29], [0.00,0.00,-0.46]]),
                (24, [[-14.10,81.20,163.50], [41.00,10.30,-9.50], [0.00,0.00,21.73], [0.00,0.00,-0.59], [0.66,-21.69,1.05], [0.00,0.00,-0.59]]),
                (25, [[61.70,86.10,156.40], [77.90,-40.70,8.90], [0.00,0.00,21.10], [0.00,0.00,-0.62], [-7.85,-19.59,0.21], [0.00,0.00,-0.62]]),
                (26, [[92.90,20.50,150.30], [0.00,-73.30,-5.20], [0.00,0.00,20.48], [0.00,0.00,-0.69], [-20.43,1.45,0.10], [0.00,0.00,-0.69]]),
                (27, [[48.90,-65.00,142.80], [-82.80,-80.00,-1.90], [0.00,0.00,19.69], [0.00,0.00,-0.84], [-13.45,14.38,0.00], [0.00,0.00,-0.84]]),
                (28, [[-54.30,-90.80,134.00], [-60.10,26.40,-8.20], [0.00,0.00,18.79], [0.00,0.00,-0.92], [9.61,16.14,0.28], [0.00,0.00,-0.92]]),
                (29, [[-89.90,11.20,115.00], [34.90,125.10,-27.90], [0.00,0.00,17.84], [0.00,0.00,-0.88], [15.82,-8.22,0.79], [0.00,0.00,-0.88]]),
                (30, [[-17.40,74.20,91.10], [78.80,19.10,-15.40], [0.00,0.00,17.02], [0.00,0.00,-0.67], [0.91,-16.99,0.59], [0.00,0.00,-0.67]]),
                (31, [[43.40,50.20,73.30], [30.20,-36.00,-9.90], [0.00,0.00,16.45], [0.00,0.00,-0.52], [-14.46,-7.80,0.70], [0.00,0.00,-0.52]]),
                (32, [[62.40,-5.10,63.50], [10.90,-54.20,-2.70], [0.00,0.00,15.97], [0.00,0.00,-0.48], [-15.78,-2.39,0.03], [0.00,0.00,-0.48]]),
                (33, [[32.70,-51.70,56.10], [-38.60,-29.80,-8.10], [0.00,0.00,15.49], [1.37,2.33,-1.30], [-7.36,13.63,0.42], [1.59,2.70,-1.41]]),
                (34, [[-38.10,-28.60,46.80], [-62.50,82.60,-19.20], [3.87,6.57,12.74], [1.59,-2.89,-2.75], [10.87,7.27,-7.02], [1.85,-3.40,-3.08]]),
                (35, [[5.70,40.40,22.40], [144.80,18.60,-20.50], [3.20,-9.88,9.14], [-4.75,-6.37,-4.66], [0.39,-9.34,-10.20], [-5.62,-7.55,-5.37]]),
                (36, [[53.00,-14.70,-4.10], [-6.00,-25.70,-46.70], [-6.94,-9.97,2.06], [-3.78,1.55,-1.86], [-10.08,4.47,-5.49], [-4.60,1.69,-2.12]]),
                (37, [[24.80,-0.40,-48.80], [-13.40,23.90,-30.60], [-8.21,-7.12,3.01], [4.46,2.06,2.31], [-2.34,4.93,9.87], [5.41,2.39,2.88]]),
                (38, [[-20.90,15.30,-77.90], [-51.20,-30.60,21.10], [4.73,-5.14,8.14], [-1.12,2.71,-1.85], [-3.33,7.50,6.91], [-1.44,3.31,-2.27]]),
                (39, [[-47.60,33.90,-112.20], [32.60,30.70,-27.80], [-10.59,-0.41,-1.32], [-7.25,2.76,-6.03], [-4.75,2.85,9.12], [-8.97,3.42,-7.45]]),
                (40, [[19.60,96.00,-167.50], [19.90,19.10,-18.40], [-8.87,0.91,-5.71], [9.97,-0.68,-0.89], [-3.77,7.41,6.56], [12.30,-0.82,-1.11]])
                ]]),

            'userAnnotationGroups': [
                {
                    '_AnnotationGroup': True,
                    'dimension': 1,
                    'identifierRanges': '1-39',
                    'name': get_colon_term('colon')[0],
                    'ontId': get_colon_term('colon')[1]
                },
                {
                    '_AnnotationGroup': True,
                    'dimension': 1,
                    'identifierRanges': '1-34',
                    'name': get_colon_term('spiral colon')[0],
                    'ontId': get_colon_term('spiral colon')[1]
                },
                {
                    '_AnnotationGroup': True,
                    'dimension': 1,
                    'identifierRanges': '35-36',
                    'name': get_colon_term('transverse colon')[0],
                    'ontId': get_colon_term('transverse colon')[1]
                },
                {
                    '_AnnotationGroup': True,
                    'dimension': 1,
                    'identifierRanges': '37-39',
                    'name': get_colon_term('descending colon')[0],
                    'ontId': get_colon_term('descending colon')[1]
                }]
        })


class MeshType_3d_colon1(Scaffold_base):
    '''
    Generates a 3-D colon mesh with variable numbers
    of elements around, along the central line, and through wall.
    The colon is created by a function that generates a colon
    segment and uses tubemesh to map the segment along a central
    line profile.
    '''

    @staticmethod
    def getName():
        return '3D Colon 1'

    @staticmethod
    def getParameterSetNames():
        return [
            'Default',
            'Cattle 1',
            'Human 1',
            'Human 2',
            'Human 3',
            'Mouse 1',
            'Mouse 2',
            'Pig 1']

    @classmethod
    def getDefaultOptions(cls, parameterSetName='Default'):
        if 'Human 3' in parameterSetName:
            segmentProfileOption = ScaffoldPackage(MeshType_3d_colonsegment1, defaultParameterSetName='Human 2')
        elif 'Cattle' in parameterSetName:
            segmentProfileOption = ScaffoldPackage(MeshType_3d_colonsegment1, defaultParameterSetName='Cattle 1')
        elif 'Mouse' in parameterSetName:
            segmentProfileOption = ScaffoldPackage(MeshType_3d_colonsegment1, defaultParameterSetName='Mouse 1')
        elif 'Pig' in parameterSetName:
            segmentProfileOption = ScaffoldPackage(MeshType_3d_colonsegment1, defaultParameterSetName='Pig 1')
        else:
            segmentProfileOption = ScaffoldPackage(MeshType_3d_colonsegment1, defaultParameterSetName='Human 1')
        options = {
            'Base parameter set': parameterSetName,
            'Network layout': getDefaultNetworkLayoutScaffoldPackage(cls, parameterSetName),
            'Segment profile': segmentProfileOption,
            'Number of segments': 30,
            'Start phase': 0.0,
            'Proximal tenia coli width': 10.0,
            'Proximal-transverse tenia coli width': 10.0,
            'Transverse-distal tenia coli width': 10.0,
            'Distal tenia coli width': 10.0,
            'Use linear through wall': True,
            'Refine': False,
            'Refine number of elements around': 1,
            'Refine number of elements along': 1,
            'Refine number of elements through wall': 1
        }
        if 'Cattle 1' in parameterSetName:
            options['Number of segments'] = 40
            options['Proximal tenia coli width'] = 12.0
            options['Proximal-transverse tenia coli width'] = 6.0
            options['Transverse-distal tenia coli width'] = 3.0
            options['Distal tenia coli width'] = 3.0
        elif 'Human 3' in parameterSetName:
            options['Number of segments'] = 33
        elif 'Mouse' in parameterSetName:
            options['Number of segments'] = 10
            options['Proximal tenia coli width'] = 0.77
            options['Proximal-transverse tenia coli width'] = 0.8
            options['Transverse-distal tenia coli width'] = 0.9
            options['Distal tenia coli width'] = 0.9
        elif 'Pig 1' in parameterSetName:
            options['Number of segments'] = 120
            options['Proximal tenia coli width'] = 5.0
            options['Proximal-transverse tenia coli width'] = 4.0
            options['Transverse-distal tenia coli width'] = 3.0
            options['Distal tenia coli width'] = 1.5

        return options

    @staticmethod
    def getOrderedOptionNames():
        return [
            'Network layout',
            'Segment profile',
            'Number of segments',
            'Start phase',
            'Proximal tenia coli width',
            'Proximal-transverse tenia coli width',
            'Transverse-distal tenia coli width',
            'Distal tenia coli width',
            'Use linear through wall',
            'Refine',
            'Refine number of elements around',
            'Refine number of elements along',
            'Refine number of elements through wall']

    @classmethod
    def getOptionValidScaffoldTypes(cls, optionName):
        if optionName == 'Network layout':
            return [MeshType_1d_network_layout1]
        if optionName == 'Segment profile':
            return [MeshType_3d_colonsegment1]
        return []

    @classmethod
    def getOptionScaffoldTypeParameterSetNames(cls, optionName, scaffoldType):
        if optionName == 'Network layout':
            return cls.getParameterSetNames()
        assert scaffoldType in cls.getOptionValidScaffoldTypes(optionName), \
            cls.__name__ + '.getOptionScaffoldTypeParameterSetNames.  ' + \
            'Invalid option \'' + optionName + '\' scaffold type ' + scaffoldType.getName()
        return scaffoldType.getParameterSetNames()

    @classmethod
    def getOptionScaffoldPackage(cls, optionName, scaffoldType, parameterSetName=None):
        '''
        :param parameterSetName:  Name of valid parameter set for option Scaffold, or None for default.
        :return: ScaffoldPackage.
        '''
        if parameterSetName:
            assert parameterSetName in cls.getOptionScaffoldTypeParameterSetNames(optionName, scaffoldType), \
                'Invalid parameter set ' + str(parameterSetName) + ' for scaffold ' + str(scaffoldType.getName()) + \
                ' in option ' + str(optionName) + ' of scaffold ' + cls.getName()
        if optionName == 'Network layout':
            if not parameterSetName:
                parameterSetName = "Default"
            return getDefaultNetworkLayoutScaffoldPackage(cls, parameterSetName)
        if optionName == 'Segment profile':
            if not parameterSetName:
                parameterSetName = scaffoldType.getParameterSetNames()[0]
            return ScaffoldPackage(scaffoldType, defaultParameterSetName=parameterSetName)
        assert False, cls.__name__ + '.getOptionScaffoldPackage:  Option ' + optionName + ' is not a scaffold'

    @classmethod
    def checkOptions(cls, options):
        if not options['Network layout'].getScaffoldType() in cls.getOptionValidScaffoldTypes('Network layout'):
            options['Network layout'] = cls.getOptionScaffoldPackage('Network layout',  MeshType_1d_network_layout1)
        if not options['Segment profile'].getScaffoldType() in cls.getOptionValidScaffoldTypes('Segment profile'):
            options['Segment profile'] = cls.getOptionScaffoldPackage('Segment profile', MeshType_3d_colonsegment1)
        for key in [
            'Number of segments',
            'Refine number of elements around',
            'Refine number of elements along',
            'Refine number of elements through wall']:
            if options[key] < 1:
                options[key] = 1
        for key in [
            'Proximal tenia coli width',
            'Proximal-transverse tenia coli width',
            'Transverse-distal tenia coli width',
            'Distal tenia coli width']:
            if options[key] < 0.0:
                options[key] = 0.0

    @classmethod
    def generateBaseMesh(cls, region, options):
        """
        Generate the base tricubic Hermite mesh.
        :param region: Zinc region to define model in. Must be empty.
        :param options: Dict containing options. See getDefaultOptions().
        :return: list of AnnotationGroup, None
        """
        nextNodeIdentifier = 1
        nextElementIdentifier = 1

        segmentProfile = options['Segment profile']
        segmentSettings = segmentProfile.getScaffoldSettings()
        tcCount = segmentSettings['Number of tenia coli']

        geometricNetworkLayout = options['Network layout']
        if tcCount == 1:
            colonTermsAlong = ['colon', 'right colon', 'transverse colon', 'left colon']
        elif tcCount == 2:
            colonTermsAlong = ['colon', 'spiral colon', 'transverse colon', 'descending colon']
        elif tcCount == 3:
            colonTermsAlong = ['colon', 'ascending colon', 'transverse colon', 'descending colon']

        geometricNetworkLayout = ColonNetworkLayout(region, geometricNetworkLayout, colonTermsAlong)

        annotationGroups, nextNodeIdentifier, nextElementIdentifier = \
            createColonMesh3d(region, options, geometricNetworkLayout, nextNodeIdentifier,
                              nextElementIdentifier, flatCoordinates=True, materialCoordinates=True)[0:3]

        return annotationGroups, None

    @classmethod
    def refineMesh(cls, meshrefinement, options):
        """
        Refine source mesh into separate region, with change of basis.
        :param meshrefinement: MeshRefinement, which knows source and target region.
        :param options: Dict containing options. See getDefaultOptions().
        """
        refineElementsCountAround = options['Refine number of elements around']
        refineElementsCountAlong = options['Refine number of elements along']
        refineElementsCountThroughWall = options['Refine number of elements through wall']

        meshrefinement.refineAllElementsCubeStandard3d(refineElementsCountAround, refineElementsCountAlong,
                                                       refineElementsCountThroughWall)
        return

    @classmethod
    def defineFaceAnnotations(cls, region, options, annotationGroups):
        '''
        Add face annotation groups from the highest dimension mesh.
        Must have defined faces and added subelements for highest dimension groups.
        :param region: Zinc region containing model.
        :param options: Dict containing options. See getDefaultOptions().
        :param annotationGroups: List of annotation groups for top-level elements.
        New face annotation groups are appended to this list.
        '''
        # Create 2d surface mesh groups
        fm = region.getFieldmodule()
        mesh2d = fm.findMeshByDimension(2)

        colonGroup = getAnnotationGroupForTerm(annotationGroups, get_colon_term("colon"))
        is_exterior = fm.createFieldIsExterior()
        is_exterior_face_xi3_1 = fm.createFieldAnd(is_exterior, fm.createFieldIsOnFace(Element.FACE_TYPE_XI3_1))
        is_exterior_face_xi3_0 = fm.createFieldAnd(is_exterior, fm.createFieldIsOnFace(Element.FACE_TYPE_XI3_0))
        is_colon = colonGroup.getGroup()
        is_serosa = fm.createFieldAnd(is_colon, is_exterior_face_xi3_1)
        serosa = findOrCreateAnnotationGroupForTerm(annotationGroups, region, get_colon_term("serosa of colon"))
        serosa.getMeshGroup(mesh2d).addElementsConditional(is_serosa)
        is_mucosaInnerSurface = fm.createFieldAnd(is_colon, is_exterior_face_xi3_0)
        mucosaInnerSurface = findOrCreateAnnotationGroupForTerm(annotationGroups, region,
                                                                get_colon_term("luminal surface of the colonic mucosa"))
        mucosaInnerSurface.getMeshGroup(mesh2d).addElementsConditional(is_mucosaInnerSurface)

def createColonMesh3d(region, options, networkLayout, nextNodeIdentifier, nextElementIdentifier,
                      flatCoordinates=False, materialCoordinates=False,
                      nodeIdProximal=[], xProximal=[], d1Proximal=[], d2Proximal=[], d3Proximal=[]):
    """
    Generates a colon scaffold in the region using a network layout and parameter options.
    :param region: Region to create elements in.
    :param options: Parameter options for creating scaffold.
    :param networkLayout: Network layout through the path of the colon.
    :param nextNodeIdentifier: Next node identifier to use.
    :param nextElementIdentifier: Next element identifier to use.
    :param flatCoordinates: Generate flat coordinates if True.
    :param materialCoordinates: Create material coordinates if True.
    :param nodeIdProximal, xProximal, d1Proximal, d2Proximal, d3Proximal: Node identifier, coordinates and derivatives
    of nodes to use at proximal end of scaffold.
    :return annotationGroups, nextNodeIdentifier, nextElementIdentifier, nodesIdDistal, xDistal, d1Distal, d2Distal,
    d3Distal
    """
    parameterSetName = options['Base parameter set']
    isHuman = 'Human' in parameterSetName
    segmentProfile = options['Segment profile']
    segmentCount = options['Number of segments']
    startPhase = options['Start phase'] % 360.0
    proximalTCWidth = options['Proximal tenia coli width']
    proximalTransverseTCWidth = options['Proximal-transverse tenia coli width']
    transverseDistalTCWidth = options['Transverse-distal tenia coli width']
    distalTCWidth = options['Distal tenia coli width']
    useCubicHermiteThroughWall = not (options['Use linear through wall'])
    segmentSettings = segmentProfile.getScaffoldSettings()

    elementsCountAroundTC = segmentSettings['Number of elements around tenia coli']
    elementsCountAroundHaustrum = segmentSettings['Number of elements around haustrum']
    cornerOuterRadiusFactor = segmentSettings['Corner outer radius factor']
    haustrumOuterRadiusFactor = segmentSettings['Haustrum outer radius factor']
    segmentLengthEndDerivativeFactor = segmentSettings['Segment length end derivative factor']
    segmentLengthMidDerivativeFactor = segmentSettings['Segment length mid derivative factor']
    tcCount = segmentSettings['Number of tenia coli']
    tcThickness = segmentSettings['Tenia coli thickness']
    elementsCountAround = (elementsCountAroundTC + elementsCountAroundHaustrum) * tcCount

    elementsCountAlongSegment = segmentSettings['Number of elements along segment']
    elementsCountThroughWall = segmentSettings['Number of elements through wall']
    wallThickness = segmentSettings['Wall thickness']
    mucosaRelThickness = segmentSettings['Mucosa relative thickness']
    submucosaRelThickness = segmentSettings['Submucosa relative thickness']
    circularRelThickness = segmentSettings['Circular muscle layer relative thickness']
    longitudinalRelThickness = segmentSettings['Longitudinal muscle layer relative thickness']
    useCrossDerivatives = segmentSettings['Use cross derivatives']

    elementsCountAlong = int(elementsCountAlongSegment * segmentCount)

    # Colon coordinates
    lengthToDiameterRatio = 24
    wallThicknessToDiameterRatio = 0.1
    teniaColiThicknessToDiameterRatio = 0.25 * wallThicknessToDiameterRatio
    relativeThicknessListColonCoordinates = [1.0 / elementsCountThroughWall for n3 in range(elementsCountThroughWall)]

    # Network layout
    if tcCount == 1:
        colonTermsAlong = ['colon', 'right colon', 'transverse colon', 'left colon']
    elif tcCount == 2:
        colonTermsAlong = ['colon', 'spiral colon', 'transverse colon', 'descending colon']
    elif tcCount == 3:
        colonTermsAlong = ['colon', 'ascending colon', 'transverse colon', 'descending colon']

    networkLayoutLength = networkLayout.arcLengthOfGroupsAlong[0]
    cx = networkLayout.cxGroups[0]
    cd1 = networkLayout.cd1Groups[0]
    cd2 = networkLayout.cd2Groups[0]
    cd12 = networkLayout.cd12Groups[0]
    arcLengthOfGroupsAlong = networkLayout.arcLengthOfGroupsAlong

    # find arclength of colon
    length = 0.0
    elementsCountIn = len(cx) - 1
    sd1 = interp.smoothCubicHermiteDerivativesLine(cx, cd1, fixAllDirections=True,
                                                   magnitudeScalingMode=interp.DerivativeScalingMode.HARMONIC_MEAN)
    for e in range(elementsCountIn):
        arcLength = interp.getCubicHermiteArcLength(cx[e], sd1[e], cx[e + 1], sd1[e + 1])
        # print(e+1, arcLength)
        length += arcLength
    segmentLength = length / segmentCount

    # Sample network layout
    sx, sd1, se, sxi, ssf = interp.sampleCubicHermiteCurves(cx, cd1, elementsCountAlong)
    sd2, sd12 = interp.interpolateSampleCubicHermite(cd2, cd12, se, sxi, ssf)

    elementAlongLength = networkLayoutLength / elementsCountAlong

    elementsCountAlongGroups = []
    groupLength = 0.0
    e = 0
    elementsCount = 1
    length = elementAlongLength
    for i in range(1, len(colonTermsAlong)):
        groupLength += arcLengthOfGroupsAlong[i]
        if e == elementsCountAlong - 2:
            elementsCount += 1
            elementsCountAlongGroups.append(elementsCount)
        else:
            while length < groupLength:
                elementsCount += 1
                e += 1
                length += elementAlongLength

            # check which end is grouplength closer to
            distToUpperEnd = abs(length - groupLength)
            distToLowerEnd = abs(groupLength - (length - elementsCountAlong))
            if distToLowerEnd < distToUpperEnd:
                elementsCount -= 1
                elementsCountAlongGroups.append(elementsCount)
                e -= 1
                length -= elementAlongLength
            else:
                elementsCountAlongGroups.append(elementsCount)
        elementsCount = 0

    # Generate variation of radius & tc width along length
    lengthList = [0.0, arcLengthOfGroupsAlong[1],
                  arcLengthOfGroupsAlong[1] + arcLengthOfGroupsAlong[2],
                  arcLengthOfGroupsAlong[0]]

    outerRadiusListCP = [magnitude(c) for c in cd2]
    dOuterRadiusListCP = []
    for n in range(len(outerRadiusListCP) - 1):
        dOuterRadiusListCP.append(outerRadiusListCP[n + 1] - outerRadiusListCP[n])
    dOuterRadiusListCP.append(outerRadiusListCP[-1] - outerRadiusListCP[-2])
    outerRadiusAlongElementList, dOuterRadiusAlongElementList = interp.interpolateSampleCubicHermite(
        outerRadiusListCP, dOuterRadiusListCP, se, sxi, ssf)

    tcWidthList = [proximalTCWidth, proximalTransverseTCWidth, transverseDistalTCWidth, distalTCWidth]
    tcWidthAlongElementList, dTCWidthAlongElementList = interp.sampleParameterAlongLine(lengthList,
                                                                                        tcWidthList,
                                                                                        elementsCountAlong)

    # Account for reduced haustrum appearance in transverse and distal pig colon
    if tcCount == 2:
        haustrumOuterRadiusFactorList = [haustrumOuterRadiusFactor, haustrumOuterRadiusFactor * 0.75,
                                         haustrumOuterRadiusFactor * 0.5, haustrumOuterRadiusFactor * 0.2]
        haustrumOuterRadiusFactorAlongElementList = \
            interp.sampleParameterAlongLine(lengthList, haustrumOuterRadiusFactorList, elementsCountAlong)[0]
    else:
        haustrumOuterRadiusFactorAlongElementList = [haustrumOuterRadiusFactor] * (elementsCountAlong + 1)

    # Create annotation groups for colon sections
    colonGroup = AnnotationGroup(region, get_colon_term("colon"))

    if tcCount == 1:
        proximalGroup = AnnotationGroup(region, get_colon_term("right colon"))
        transverseGroup = AnnotationGroup(region, get_colon_term("transverse colon"))
        distalGroup = AnnotationGroup(region, get_colon_term("left colon"))
        annotationGroupAlong = [[colonGroup, proximalGroup],
                                [colonGroup, transverseGroup],
                                [colonGroup, distalGroup]]

    elif tcCount == 2:
        spiralGroup = AnnotationGroup(region, get_colon_term("spiral colon"))
        transverseGroup = AnnotationGroup(region, get_colon_term("transverse colon"))
        distalGroup = AnnotationGroup(region, get_colon_term("descending colon"))
        annotationGroupAlong = [[colonGroup, spiralGroup],
                                [colonGroup, transverseGroup],
                                [colonGroup, distalGroup]]

    elif tcCount == 3:
        ascendingGroup = AnnotationGroup(region, get_colon_term("ascending colon"))
        transverseGroup = AnnotationGroup(region, get_colon_term("transverse colon"))
        descendingGroup = AnnotationGroup(region, get_colon_term("descending colon"))
        annotationGroupAlong = [[colonGroup, ascendingGroup],
                                [colonGroup, transverseGroup],
                                [colonGroup, descendingGroup]]

    annotationGroupsAlong = []
    for i in range(len(elementsCountAlongGroups)):
        elementsCount = elementsCountAlongGroups[i]
        for n in range(elementsCount):
            annotationGroupsAlong.append(annotationGroupAlong[i])

    xExtrude = []
    d1Extrude = []
    d2Extrude = []
    d3UnitExtrude = []
    sxRefExtrudeList = []

    if elementsCountThroughWall == 1:
        relativeThicknessList = [1.0]
        annotationGroupsThroughWall = [[]]
    else:
        relativeThicknessList = [mucosaRelThickness, submucosaRelThickness,
                                 circularRelThickness, longitudinalRelThickness]
        mucosaGroup = AnnotationGroup(region, get_colon_term("colonic mucosa"))
        submucosaGroup = AnnotationGroup(region, get_colon_term("submucosa of colon"))
        circularMuscleGroup = AnnotationGroup(region, get_colon_term("circular muscle layer of colon"))
        longitudinalMuscleGroup = AnnotationGroup(region, get_colon_term("longitudinal muscle layer of colon"))
        annotationGroupsThroughWall = [[mucosaGroup], [submucosaGroup],
                                       [circularMuscleGroup], [longitudinalMuscleGroup]]

    # Create object
    colonSegmentTubeMeshOuterPoints = ColonSegmentTubeMeshOuterPoints(
        region, elementsCountAroundTC, elementsCountAroundHaustrum, elementsCountAlongSegment,
        tcCount, segmentLengthEndDerivativeFactor, segmentLengthMidDerivativeFactor,
        segmentLength, wallThickness, cornerOuterRadiusFactor, haustrumOuterRadiusFactorAlongElementList,
        outerRadiusAlongElementList, dOuterRadiusAlongElementList, tcWidthAlongElementList,
        startPhase)

    for nSegment in range(segmentCount):
        # Create inner points
        xOuter, d1Outer, d2Outer, transitElementList, segmentAxis, annotationGroupsAround \
            = colonSegmentTubeMeshOuterPoints.getColonSegmentTubeMeshOuterPoints(nSegment)

        # Project reference point for warping onto network layout
        start = nSegment * elementsCountAlongSegment
        end = (nSegment + 1) * elementsCountAlongSegment + 1
        sxRefList, sd1RefList, sd2ProjectedListRef, zRefList = \
            tubemesh.getPlaneProjectionOnCentralPath(xOuter, elementsCountAround, elementsCountAlongSegment,
                                                     segmentLength, sx[start:end], sd1[start:end], sd2[start:end],
                                                     sd12[start:end])

        # Warp segment points
        xWarpedList, d1WarpedList, d2WarpedList, d3WarpedUnitList = tubemesh.warpSegmentPoints(
            xOuter, d1Outer, d2Outer, segmentAxis, sxRefList, sd1RefList, sd2ProjectedListRef,
            elementsCountAround, elementsCountAlongSegment, zRefList)

        # Store points along length
        xExtrude += xWarpedList if nSegment == 0 else xWarpedList[elementsCountAround:]
        d1Extrude += d1WarpedList if nSegment == 0 else d1WarpedList[elementsCountAround:]
        d2Extrude += d2WarpedList if nSegment == 0 else d2WarpedList[elementsCountAround:]
        d3UnitExtrude += d3WarpedUnitList if nSegment == 0 else d3WarpedUnitList[elementsCountAround:]
        sxRefExtrudeList += sxRefList if nSegment == 0 else sxRefList[elementsCountAround:]

    contractedWallThicknessList = colonSegmentTubeMeshOuterPoints.getContractedWallThicknessList()

    # Create coordinates and derivatives
    xList, d1List, d2List, d3List, curvatureList, localIdxDistal, xDistal, d1Distal, d2Distal, d3Distal = \
        tubemesh.extrudeSurfaceCoordinates(xExtrude, d1Extrude, d2Extrude, d3UnitExtrude,
                                           contractedWallThicknessList, relativeThicknessList,
                                           elementsCountAround, elementsCountAlong, elementsCountThroughWall,
                                           transitElementList, outward=False, xProximal=xProximal,
                                           d1Proximal=d1Proximal, d2Proximal=d2Proximal, d3Proximal=d3Proximal)

    relaxedLengthList, xiList = colonSegmentTubeMeshOuterPoints.getRelaxedLengthAndXiList()

    closedProximalEnd = False

    if tcThickness > 0:
        tubeTCWidthList = colonSegmentTubeMeshOuterPoints.getTubeTCWidthList()
        xList, d1List, d2List, d3List, annotationArrayAround, localIdxDistal, xDistal, d1Distal, d2Distal, \
        d3Distal = \
            getTeniaColi(region, xList, d1List, d2List, d3List, curvatureList, tcCount, elementsCountAroundTC,
                         elementsCountAroundHaustrum, elementsCountAlong, elementsCountThroughWall,
                         tubeTCWidthList, tcThickness, annotationGroupsAround, closedProximalEnd,
                         isHuman, xProximal=xProximal, d1Proximal=d1Proximal, d2Proximal=d2Proximal,
                         d3Proximal=d3Proximal)

        # Create flat coordinates
        if flatCoordinates:
            xFlat, d1Flat, d2Flat = createFlatCoordinatesTeniaColi(
                xiList, relaxedLengthList, length, wallThickness, relativeThicknessList, tcCount, tcThickness,
                elementsCountAroundTC, elementsCountAroundHaustrum, elementsCountAlong,
                elementsCountThroughWall, transitElementList, closedProximalEnd)
        else:
            xFlat = d1Flat = d2Flat = []

        # Create colon coordinates
        if materialCoordinates:
            xColon, d1Colon, d2Colon = \
                createColonCoordinatesTeniaColi(xiList, relativeThicknessListColonCoordinates, lengthToDiameterRatio,
                                                wallThicknessToDiameterRatio, teniaColiThicknessToDiameterRatio,
                                                tcCount, elementsCountAroundTC, elementsCountAroundHaustrum,
                                                elementsCountAlong, elementsCountThroughWall, transitElementList,
                                                closedProximalEnd)
        else:
            xColon = d1Colon = d2Colon = []

        # Create nodes and elements
        nextNodeIdentifier, nextElementIdentifier, annotationGroups, nodesIdDistal = createNodesAndElementsTeniaColi(
            region, xList, d1List, d2List, d3List, xFlat, d1Flat, d2Flat, xColon, d1Colon, d2Colon,
            "colon coordinates", elementsCountAroundTC, elementsCountAroundHaustrum, elementsCountAlong,
            elementsCountThroughWall, tcCount, annotationGroupsAround, annotationGroupsAlong,
            annotationGroupsThroughWall, nextNodeIdentifier, nextElementIdentifier, useCubicHermiteThroughWall,
            useCrossDerivatives, closedProximalEnd, localIdxDistal=localIdxDistal, nodeIdProximal=nodeIdProximal)

    else:
        # Create flat coordinates
        xFlat, d1Flat, d2Flat = tubemesh.createFlatCoordinates(
            xiList, relaxedLengthList, length, wallThickness, relativeThicknessList, elementsCountAround,
            elementsCountAlong, elementsCountThroughWall, transitElementList)

        # Create colon coordinates
        xColon, d1Colon, d2Colon = tubemesh.createOrganCoordinates(xiList, relativeThicknessListColonCoordinates,
                                                                   lengthToDiameterRatio,
                                                                   wallThicknessToDiameterRatio,
                                                                   elementsCountAround,
                                                                   elementsCountAlong, elementsCountThroughWall,
                                                                   transitElementList)

        # Create nodes and elements
        nextNodeIdentifier, nextElementIdentifier, annotationGroups, nodesIdDistal = tubemesh.createNodesAndElements(
            region, xList, d1List, d2List, d3List, xFlat, d1Flat, d2Flat, xColon, d1Colon, d2Colon,
            "colon coordinates", elementsCountAround, elementsCountAlong, elementsCountThroughWall,
            annotationGroupsAround, annotationGroupsAlong, annotationGroupsThroughWall,
            nextNodeIdentifier, nextElementIdentifier, useCubicHermiteThroughWall, useCrossDerivatives,
            closedProximalEnd, localIdxDistal=localIdxDistal, nodeIdProximal=nodeIdProximal)

    return annotationGroups, nextNodeIdentifier, nextElementIdentifier, nodesIdDistal, xDistal, d1Distal, d2Distal, \
           d3Distal

class ColonNetworkLayout:

    def __init__(self, region, networkLayout, termsAlong=[None]):
        """
        :param region: Zinc region to define model in.
        :param networkLayout: Network layout subscaffold from meshtype_1d_network_layout1
        :param termsAlong: Annotation terms along length of colon
        """
        # Extract length of each group along colon from network layout
        cxGroups = []
        cd1Groups = []
        cd2Groups = []
        cd3Groups = []
        cd12Groups = []
        cd13Groups = []

        tmpRegion = region.createRegion()
        networkLayout.generate(tmpRegion)
        tmpFieldmodule = tmpRegion.getFieldmodule()
        tmpNodes = tmpFieldmodule.findNodesetByFieldDomainType(Field.DOMAIN_TYPE_NODES)
        tmpCoordinates = tmpFieldmodule.findFieldByName('coordinates')
        arcLengthOfGroupsAlong = []

        for termName in termsAlong:
            tmpGroup = tmpFieldmodule.findFieldByName(termName).castGroup() if termName else None
            tmpNodeset = tmpGroup.getNodesetGroup(tmpNodes) if tmpGroup else tmpNodes

            cxGroup, cd1Group, cd2Group, cd3Group, cd12Group, cd13Group = get_nodeset_path_field_parameters(
                tmpNodeset, tmpCoordinates,
                [Node.VALUE_LABEL_VALUE, Node.VALUE_LABEL_D_DS1,
                 Node.VALUE_LABEL_D_DS2, Node.VALUE_LABEL_D_DS3,
                 Node.VALUE_LABEL_D2_DS1DS2, Node.VALUE_LABEL_D2_DS1DS3])

            arcLength = 0.0
            for e in range(len(cxGroup) - 1):
                arcLength += interp.getCubicHermiteArcLength(cxGroup[e], cd1Group[e],
                                                             cxGroup[e + 1], cd1Group[e + 1])
            arcLengthOfGroupsAlong.append(arcLength)

            if termName == "colon":
                cxGroups.append(cxGroup)
                cd1Groups.append(cd1Group)
                cd2Groups.append(cd2Group)
                cd3Groups.append(cd3Group)
                cd12Groups.append(cd12Group)
                cd13Groups.append(cd13Group)

            del tmpNodeset
            del tmpGroup

        del tmpCoordinates
        del tmpNodes
        del tmpFieldmodule
        del tmpRegion

        self.arcLengthOfGroupsAlong = arcLengthOfGroupsAlong
        self.cxGroups = cxGroups
        self.cd1Groups = cd1Groups
        self.cd2Groups = cd2Groups
        self.cd3Groups = cd3Groups
        self.cd12Groups = cd12Groups
        self.cd13Groups = cd13Groups
